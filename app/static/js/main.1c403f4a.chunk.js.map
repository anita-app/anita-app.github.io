{"version":3,"sources":["app/libs/redux/redux-actions.const.ts","app/libs/redux/reducers/form-element.reducer.ts","app/data/model/form-model-commons.ts","app/libs/redux/reducers/form-eles-valid-state.reducer.ts","app/data/form-models/system-fields-for-sections.constant.ts","app/data/form-models/options-builder.constant.ts","app/data/form-models/project-form-fields-model.constant.ts","app/data/form-models/project-editor-form-models.const.ts","app/data/form-models/section-builder.constant.ts","app/data/model/project-info.ts","app/data/sections/local-settings.const.ts","app/libs/id-creator/id-creator.class.ts","app/libs/redux/reducers/form-project.reducer.ts","app/libs/redux/reducers/layout.reducer.ts","app/libs/redux/reducers/sections-for-child-of-selector.reducer.ts","app/libs/redux/reducers.const.ts","app/libs/redux/reducers/project.reducer.ts","app/libs/redux/reducers/projects.reducer.ts","app/libs/redux/state.store.ts","app/data/sections/projects.const.ts","app/data/auds-system-sections.enum.ts","app/data/client-sections.enum.ts","app/data/db-instances.const.ts","app/data/sections/auds-sections.const.ts","app/data/sections/auds-settings.const.ts","app/libs/db-connector/db-builder/default-values.constant.ts","app/libs/logger/logger.class.ts","app/libs/db-connector/db-builder/sez-builder.class.ts","app/ui-react-components/editor-mode.enum.ts","app/anita-routes/anita-routes.constant.ts","app/libs/db-connector/db-builder/data-structure-builder.class.ts","app/libs/db-connector/db-connector.class.ts","app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class.ts","app/libs/db-connector/plugins/indexed-db/db-deletor/db-deletor.class.ts","app/libs/db-connector/plugins/indexed-db/exporter.constant.ts","app/libs/db-connector/plugins/indexed-db/db-insertor/db-insertor.class.ts","app/libs/db-connector/plugins/indexed-db/db-selector/db-selector.class.ts","app/libs/db-connector/plugins/indexed-db/db-updator/db-updator.class.ts","app/libs/startupper/startupper.class.ts","app/libs/project-helpers/project-handlers/is-project-loaded.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class.ts","app/libs/tools/find-section-by-id.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/required-field.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/validators-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component.tsx","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function.ts","app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component.tsx","app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/options-maker-single-option.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component.tsx","app/libs/tools/find-first-user-defined-field.function.ts","app/libs/tools/tools.ts","app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class.ts","app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class.ts","app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function.tsx","app/ui-react-components/shared-components/forms-automator/form-automator.component.tsx","app/ui-react-components/project/add-edit-components/form-element-manager.component.tsx","app/libs/project-helpers/section-elements-handlers/element-saver.class.ts","app/ui-react-components/project/add-edit-components/save-element.component.tsx","app/ui-react-components/shared-components/common-ui-eles/main-content-container.component.tsx","app/ui-react-components/shared-components/loader/loader.component.tsx","app/ui-react-components/project/add-edit-section-element.component.tsx","app/libs/projects-helpers/projects-handlers/projects-list-loader.class.ts","app/libs/project-helpers/project-handlers/project-deletor.class.ts","app/ui-react-components/shared-components/buttons/delete-project.component.tsx","app/anita-routes/url-param-fillers.function.ts","app/ui-react-components/shared-components/buttons/edit-project-button.component.tsx","app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component.tsx","app/ui-react-components/project/project-details.component.tsx","app/libs/project-helpers/get-parent-info-for-details-view.class.ts","app/ui-react-components/project/details-components/parents-link-shower.component.tsx","app/ui-react-components/project/values-renderers/basic-text.component.tsx","app/ui-react-components/project/values-renderers/check-box-as-check.component.tsx","app/ui-react-components/project/values-renderers/formatted-date-time.component.tsx","app/ui-react-components/project/values-renderers/formatted-date.component.tsx","app/ui-react-components/project/values-renderers/text-from-options-by-value.component.tsx","app/libs/project-helpers/txt-by-field-value.function.ts","app/ui-react-components/project/values-renderers/custom-render-picker.component.tsx","app/ui-react-components/shared-components/buttons/add-edit-element-button.component.tsx","app/ui-react-components/project/section-element-details.component.tsx","app/ui-react-components/project/list-components/td-with-link-to-details.component.tsx","app/ui-react-components/project/list-components/tableList.component.tsx","app/ui-react-components/project/no-section-data.component.tsx","app/ui-react-components/project/section-elements-list.component.tsx","app/libs/project-helpers/project-handlers/current-project-setter.class.ts","app/libs/db-connector/plugins/file-handles/db-deletor/db-deletor.class.ts","app/libs/db-connector/crypter/options.constant.ts","app/libs/db-connector/crypter/string-crypter.function.ts","app/libs/db-connector/crypter/string-decrypter.function.ts","app/libs/db-connector/crypter/crypt-helper.class.ts","app/libs/db-connector/crypter/encrypter.class.ts","app/libs/db-connector/plugins/file-handles/helpers/fs-helper.ts","app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class.ts","app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class.ts","app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class.ts","app/libs/db-connector/plugins/file-handles/db-insertor/db-insertor.class.ts","app/libs/db-connector/crypter/decrypter.class.ts","app/libs/db-connector/plugins/file-handles/db-selector/db-selector.class.ts","app/data/data-structure-extender.class.ts","app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function.ts","app/libs/db-connector/plugins/file-handles/db-store/dbstore.class.ts","app/libs/db-connector/plugins/file-handles/exporter.constant.ts","app/libs/db-connector/plugins/file-handles/db-updator/db-updator.class.ts","app/libs/project-helpers/project-handlers/project-saver.class.ts","app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/section-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/form-project-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/project-editor-mode-toggle.component.tsx","app/ui-react-components/projects/add-edit-project.component.tsx","app/libs/projects-helpers/file-handle-helpers/project-file-importer.class.ts","app/ui-react-components/projects/no-projects.component.tsx","app/ui-react-components/projects/project-card-components/project-loaded-footer.component.tsx","app/libs/project-helpers/project-handlers/project-loader.class.ts","app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component.tsx","app/ui-react-components/projects/project-card.component.tsx","app/ui-react-components/projects/projects-list.component.tsx","app/anita-routes/anita-routes.component.tsx","app/ui-react-components/admin-layout/components/sidebar-menu.component.tsx","app/ui-react-components/admin-layout/content.component.tsx","app/ui-react-components/admin-layout/header.component.tsx","app/ui-react-components/admin-layout/sidebar.component.tsx","app/version.ts","app/ui-react-components/admin-layout/admin-layout.component.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["REDUX_ACTIONS","FORM_COMPONENTS_CODES","formElementState","element","initialState","RESERVED_FIELDS","SELECTABLE_FORM_ELES","value","basicInput","label","basicTextarea","basicCheckbox","basicSelect","basicRadio","datePicker","dateTimePicker","commonFieldsAdvanced","componentCode","fieldName","type","required","width","commonFieldsBasic","optionsBuilderForAddingAdvanced","optionsBuilderForAddingBasic","hiddenInput","optionsBuilderForEditingAdvanced","disabled","optionsBuilderForEditingBasic","PROJECT_EDITOR_MODE","projectFormFieldsModel","id","dateCreation","sectionDetailsFormFieldsModel","childOfSelectorForSection","options","commonAddAndEditFields","optionsMaker","prerequisites","sectionElesNewItemAdvanced","sectionElesNewItemBasic","sectionElesForEditingAdvanced","sectionElesForEditingBasic","RESERVED_UDS_KEYS","PROJECT_EDITOR_FORM_MODELS_CONST","advanced","projectInfo","sectionInfo","sectionEles","newItem","existingItem","optionEles","basic","LOCAL_SETTINGS_KEYS","IdCreator","name","aliasDate","Date","toUTCString","toISOString","randNumber","Math","floor","random","CryptoES","SHA256","toString","original","_settings","_sections","project","mode","sidebar","sectionsForChildOfSelectorState","REDUCERS","state","action","setCurrentProject","payload","projects","addProjectToList","concat","setProjectList","sectionsForChildOfSelector","addSectionForChildOfSelector","editableState","length","index","findIndex","sectionDeclaration","position","push","formElesValidState","setValidStateForEle","formEleId","valid","unsetValidStateForEle","copyState","Object","keys","forEach","key","startsWith","formElement","updateFormElement","formProject","setProjectEditorMode","setFormProject","cloneDeep","updateFormProjectSettings","updateFormProjectAddSection","title","formModel","updateFormProjectUpdateSection","copy3","section","updateFormProjectUpdateFormModelOfSection","copy4","indexSection","indexFormElement","updateFormProjectAddFieldToSection","copy5","updateFormProjectRemoveFieldFromSection","copy6","sectionIndex","splice","fieldIndex","updateFormProjectRemoveSection","copy7","updateFormProjectUpdateFormModelAddOption","copy8","defaultValue","updateFormProjectUpdateFormModelDeleteOption","copy9","indexOptions","updateFormProjectUpdateFormModelOptionValue","copy10","layout","toggleSidebar","newState","combinedReducers","combineReducers","store","createStore","localSettings","fields","AUDS_SYSTEM_SECTIONS","CLIENT_SECTIONS","previousVersions","CLIENT_SEZ_DEFINITIONS","dbInstances","system","undefined","auds_sections","pk","auds_settings","AUDS_SYSTEM_SECTIONS_DEFINITIONS","DEFAULT_PK","DEFAULT_PARENTS_IDENTIFIER","parentsInfo","DEFAULT_OWNER_IDENTIFIER","createdBy","Logger","desc","arrMsg","JSON","stringify","doLog","list","isEmptyList","stringList","Array","isArray","listFromArray","listFromObject","substring","line","spacesForListeles","formatValueForList","txt","extra","isPrimitiveValue","data","methodName","date","debug","console","join","EDITOR_MODE","URL_PARAMS","SezBuilder","allSez","indexes","orderBy","childOf","parentsIdentifiers","ownerIdentifier","this","addPkToFields","addPkToIndexes","addSpecialFieldsToFields","setOwnerIdentifier","checkOrderByExists","checkRelations","checkParentIdentifier","buildSez","includes","unshift","scope","loopAllRelations","sezName","checkRelationsExist","getSezByName","indexInScope","indexOf","error","foundIndex","counter","addChildOf","DataStructureBuilder","ds","sez","sezParams","make","addToTempDs","DbConnector","executers","addSystemSections","dbStore","DS","assign","initDB","Error","insertor","args","selector","updator","deletor","DbStore","dbConnector","db","lastPreviousVersionScheme","indexedDbName","setDb","currentVersion","versionSezs","handlePreviousVersion","buildVersionDb","Dexie","version","versionDS","tables","stores","QueryHelper","arraysWhere","arraysWhereLen","dexieWhere","whereArr","objFieldsNValues","arrSearch","includeLower","includeUpper","field","lowerBound","upperBound","filter","operator","item","where","logic","result","QueryMaker","table","collection","dexieFilters","arrWhere","new_where","order","complexSelect","methodToExecute","handleDebug","objSearch","get","res","eleToReturn","fieldNValues","buildArrayFildsNValues","toArray","betweenSearchParams","buildBetweenSearchParams","between","buildFilter4Dexie","all_records","toCollection","chainFilters","and","sortBy","copy","put","update","count","delete","promises","clear","Promise","all","typeToShow","toShow","raw","DbDeletor","aliasElementToDelete","addWhere","INDEXEDDB_PLUGIN","insert","catch","err","qe","setUpSelect","setQuery","executeSelect","setOrder","setOrderBy","select","Startupper","systemDbName","info","initSystemIndexedDb","setLoggerDebug","init","React","createElement","isReactDev","ANITA_URLS","projectsNone","projectsList","projectAdd","add","projectEdit","edit","projectId","projectDetails","projectSectionElesList","sectionId","projectSectionAddEle","projectSectionEditEle","elementId","projectSectionEleDetails","isProjectLoaded","ParentInfoFormEleBuilder","sections","parentInfoFormModel","setOptions","setParentSelector","sectionName","find","parentsSelector","findSectionById","toFindId","FormEleContainer","children","className","FormElementLabel","RequiredField","formEle","fieldId","touched","useEffect","dispatch","ValidatorsContainer","props","validators","BasicCheckbox","handleChange","useState","setTouched","useRef","uniqueId","current","validStore","useSelector","isInValid","some","checked","Reflect","has","onChange","event","target","onBlur","calcWidth","FORM_ELEMENTS_CSS_CLASSES","FORM_ELEMENTS_CSS_CLASSES_ERR","BasicInput","placeholder","BasicRadio","map","option","BasicSelect","BasicTextarea","parentInfoObjToString","parentInfoObj","parentInfo","parentInfoStringToObjForOptionsGroup","selectOptions","group","opt","parentInfoStringToObj","ChildOfSelectorForSection","currentEditedProjectSections","setSelectOptions","isMounted","selectableSections","sectionDec","buildOptions","isMulti","newValue","DatePicker","dateFormat","DateTimePicker","HiddenInput","SUCCESS_BTN_OUTLINE","DANGER_BTN_OUTLINE","OptionsMakerSingleOption","handleOptionsChange","handleClickDeleteOption","optionElement","projectEditorMode","formModelToUse","useMemo","getCanEdit","bind","onClick","data-tip","data-for","effect","OptionsMaker","handleClickAddOption","from","a","i","findFirstUserDefinedField","sectionFormModel","firstUserDefinedFieldInfo","cleanString","source","r","toLowerCase","non_asciis","ae","c","e","n","o","oe","u","y","replace","RegExp","asyncForEach","array","callback","totalLength","OptionsForParentsSelector","optionsGroups","callSelector","multiple","createGroupOption","sectionLabel","indexFirstUserFiield","ele","ParentsSelector","getSelectOptions","PrerequisitesChecker","objValues","isIntegrated","loopPrerequisites","checkPrerequisites","prereq","prereqValue","setIsIntegrated","FieldSelector","integrates","formElesSwitcher","FormAutomator","FormElementManager","build","ElementSaver","sectionModelInDS","setSectionModel","checkAndSetPk","setDateCreation","deleteEmptyProps","callInsertor","autoInsert","setLastModifiedValueIfInEditMode","callUpdator","autoUpdate","prop","lastModified","SaveElement","validObj","navigate","useNavigate","handleClick","save","MainContentContainer","headerText","Loader","xmlns","fill","viewBox","cx","cy","stroke","strokeWidth","d","AddEditSectionElement","params","useParams","setElement","single","fetchElement","to","ProjectsListLoader","projectList","loadFromLocalDB","dispatchProjectList","ProjectDeletor","doDelete","reloadProjectList","callDeletor","autoDelete","load","DeleteProjectButton","isModalOpen","setIsModalOpen","closeFn","DeleteProjectModal","aria-labelledby","role","aria-modal","aria-hidden","urlParamFiller","url","paramsToFill","EditButton","CardFooterItemsEnd","LoadedProject","description","ProjectDetails","loadProject","style","minHeight","GetParentInfoForDetailsView","listOfParents","parentInfoForDetailsView","sectionIdElementId","processElement","arrInfo","split","ParentsLinkShower","parents","setParents","getParents","parent","BasicText","CheckBoxAsCheck","FormattedDateTime","FormattedDate","TextFromOptionsByValue","optionToReturn","txtByFieldValue","customRenderPicker","AddEditElementButton","icon","urlParamsToFill","SectionElementDetails","fetchData","formModels","ElementValuesViewer","ValueWithLabel","TdWithLinkToDetails","tdProps","navigation","TableList","sectionData","columns","colsToShoww","Header","accessor","Cell","useSectionInfo","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","row","getRowProps","cells","cell","getCellProps","NoSectionData","sectionTitle","SectionElementsList","setSectionData","getSectionData","CurrentProjectSetter","projectSettings","sectionsDefinitions","securePassEncrypter","stringCrypter","keyToUse","AES","encrypt","stringDecrypter","decrypt","CryptHelper","owner","undecryptedKey","keyIdentifier","setOwner","setUndecryptedKey","makeKeyIdentifier","userKeys","decryptUserKey","returnUserUnencryptedKey","encryptionKeys","keyToEncrypt","Encrypter","getUserKey","logNoKeyError","values","readFileHandleAsText","fileHandle","getFile","file","text","getNewFileHandle","opts","types","accept","window","showSaveFilePicker","contents","createWritable","writable","write","close","verifyPermission","withWrite","queryPermission","requestPermission","SaveProjectSettingsInIndexedDB","copyOfProjectSettings","setProjectSettingsClone","setFileHandleOnProjectSettingsClone","doStoreProjectSettings","ProjectFileHandleSaver","setData","saveDataToDisk","set","writeFile","ElementAdderToCollection","setSectionStore","checkIfElementInStoreAndSetIndex","addToStore","elements","check","DbInsertor","encrypted","handleEncryption","do","Decrypter","DbSelector","results","doSelect","filterKeys","eleToCheck","handleDecryption","DataStructureExtender","datastructure","buildSectionDefinition","sezDefinition","buildAndAddAllSections","addToTempTs","fileHandleChecker","initializeExistingProject","doReadFile","parseFileContents","makedDS","parse","extend","FILE_HANDLES_PLUGIN","ProjectSaver","projectDataToSave","setLastModified","initDbInstance","saveSettings","saveSections","fileHandleOnlyActions","SectionFormModelManager","alreadyExists","getAlreadyExists","identifierAutoVal","SectionManager","customFields","handleClickDeleteField","FormProjectManager","ProjectEditorModeToggle","htmlFor","AddEditProject","setProject","fetchEProject","ProjectFileImporter","fileHandles","fileContents","projectData","localProjectSettings","askForFile","processFileHandles","initializeDb","showOpenFilePicker","then","handles","processFileHandle","dispatchProject","ProjectsNone","handleClickImport","import","href","ProjectLoadedFooter","ProjectLoader","setProjectInfoFromIndexedDB","createNewInstanceOfDbConnectorForrProject","callCurrentProjectSetter","ProjectNotLoadedFooter","ProjectCard","projectState","ProjectsList","hasLoaded","setHasLoaded","projectsLenght","loadProjectsList","AnitaRoutes","path","baseStyleOfSidebarLinks","addActiveClassNameToBaseStyle","currentPath","linkPath","nonProjectRoutes","ProjectMenu","location","useLocation","pathname","SidebarMenu","route","Content","strokeLinecap","strokeLinejoin","src","process","height","alt","fontVariant","Sidebar","toggledClass","rel","AdminLayout","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1c403f4a.chunk.js","sourcesContent":["/**\r\n * Supported reducer actions\r\n */\r\nexport enum REDUX_ACTIONS {\r\n  // LAYOUT\r\n  toggleSidebar = 1,\r\n  // PROJECTS\r\n  addProjectToList,\r\n  setProjectList,\r\n  // PROJECT\r\n  setCurrentProject,\r\n  // SECTIONS_FOR_CHILD_OF_SELECTOR\r\n  addSectionForChildOfSelector,\r\n  resetSectionForChildOfSelector,\r\n  // FORMS\r\n  setValidStateForEle,\r\n  unsetValidStateForEle,\r\n  updateFormElement,\r\n  setFormProject,\r\n  setProjectEditorMode,\r\n  updateFormProjectSettings,\r\n  updateFormProjectAddSection,\r\n  updateFormProjectUpdateSection,\r\n  updateFormProjectUpdateFormModelOfSection,\r\n  updateFormProjectRemoveSection,\r\n  updateFormProjectAddFieldToSection,\r\n  updateFormProjectRemoveFieldFromSection,\r\n  updateFormProjectUpdateFormModelAddOption,\r\n  updateFormProjectUpdateFormModelDeleteOption,\r\n  updateFormProjectUpdateFormModelOptionValue\r\n};\r\n","import { SectionElement } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElementState {\r\n  element: SectionElement | undefined | null;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormElementState = {\r\n  element: null\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formElementReducer = (state: IFormElementState = formElementState, action: Action<REDUX_ACTIONS>): IFormElementState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.updateFormElement:\r\n      return {\r\n        element: { ...action.payload }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/**\r\n * Defines the Object that contains the prerequisite necessary to show a field of a form.\r\n * The key of the Object is the identifier of the field whose value must be checked.\r\n * The value of each key is an Array of all the possible values that fulfill the prerequsite.\r\n */\r\nexport interface Prerequisites {\r\n  [fieldToCheckIdentifier: string]: Array<string | number | boolean>;\r\n}\r\n\r\n/**\r\n * Supported input types.\r\n */\r\nexport type InputTypes = 'color' | 'date' | 'datetime-local' | 'email' | 'hidden' | 'month' | 'number' | 'password' | 'range' | 'reset' | 'tel' | 'text' | 'time' | 'url' | 'week';\r\n\r\n/**\r\n * Supported css classes defining the width of each field of a row of a form.\r\n */\r\nexport type FormEleWidths = string;\r\n\r\n/**\r\n * Defines the structure of possible choices to be selected in a Radio or Select html element.\r\n */\r\nexport interface OptionKeysModelGroup {\r\n  label: string;\r\n  options: Array<OptionKeysModel>;\r\n}\r\n\r\n/**\r\n * Defines the structure of possible choices to be selected in a Radio or Select html element.\r\n */\r\nexport interface OptionKeysModel {\r\n  value: string | number;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * Values to identify the form component to dynamically load.\r\n *\r\n * @remarks\r\n * These values are stored in each `Section` in `AnitaUniversalDataStorage['sections']` so their number __must__ not be changed. Element can be added freely.\r\n */\r\nexport enum FORM_COMPONENTS_CODES {\r\n  basicInput = 1,\r\n  basicTextarea = 2,\r\n  basicCheckbox = 3,\r\n  basicSelect = 4,\r\n  basicRadio = 5,\r\n  hiddenInput = 6,\r\n  optionsMaker = 7,\r\n  datePicker = 8,\r\n  dateTimePicker = 9,\r\n  childOfSelectorForSection = 10,\r\n  parentsSelector = 11\r\n}\r\n\r\n/**\r\n * Defines the value of the Select element for picking the type of Component for a field.\r\n */\r\nexport const SELECTABLE_FORM_ELES: Array<OptionKeysModel> = [\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicInput,\r\n    label: 'Short text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicTextarea,\r\n    label: 'Long text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    label: 'Check box'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicSelect,\r\n    label: 'Drop-down list'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicRadio,\r\n    label: 'Alternative choice'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.datePicker,\r\n    label: 'Date picker'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.dateTimePicker,\r\n    label: 'Date & time picker'\r\n  }\r\n];\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElesValidState {\r\n  [formEleUniqueId: string]: boolean;\r\n}\r\n\r\n/**\r\n * The initial state of the form-eles-valid-state reducer\r\n */\r\nconst initialState: IFormElesValidState = {};\r\n\r\n/**\r\n * The reducer function that sets the valid state of the form elements\r\n */\r\nexport const formElesValidStateReducer = (state: IFormElesValidState = initialState, action: Action<REDUX_ACTIONS>): IFormElesValidState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setValidStateForEle:\r\n      return { ...state, [action.payload.formEleId]: action.payload.valid };\r\n    case REDUX_ACTIONS.unsetValidStateForEle:\r\n      const copyState = { ...state };\r\n      Object.keys(copyState).forEach(key => {\r\n        if (key.startsWith(action.payload))\r\n          delete copyState[key];\r\n      });\r\n      return copyState;\r\n    default:\r\n      return state;\r\n  }\r\n}","/**\r\n * Defines the fields name that are reserved for the functioning of Anita.\r\n * These fields names cannot be assigned as the value of the `fieldName` of sections' fields.\r\n */\r\nexport enum RESERVED_FIELDS {\r\n  id = 'id',\r\n  dateCreation = 'dateCreation',\r\n  parentsInfo = 'parentsInfo',\r\n  lastModified = 'lastModified',\r\n  createdBy = 'createdBy'\r\n}\r\n","import { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nconst commonFieldsAdvanced: FormFieldsModel<OptionKeysModel> = {\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'label',\r\n  type: 'text',\r\n  label: 'Label',\r\n  required: true,\r\n  width: \"8\"\r\n};\r\n\r\nconst commonFieldsBasic: FormFieldsModel<OptionKeysModel> = {\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'label',\r\n  type: 'text',\r\n  label: 'Label',\r\n  required: true,\r\n  width: \"11\"\r\n};\r\n\r\n/**\r\n * Defines the Form model to create the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For adding options only, some properties can't be changed after the filed has been created. Existing items must use `optionsBuilderForEditingAdvanced` instead.\r\n */\r\nexport const optionsBuilderForAddingAdvanced: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFieldsAdvanced\r\n];\r\n\r\nexport const optionsBuilderForAddingBasic: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'value'\r\n  },\r\n  commonFieldsBasic\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `optionsBuilderForAddingAdvanced` instead.\r\n */\r\nexport const optionsBuilderForEditingAdvanced: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFieldsAdvanced\r\n\r\n];\r\nexport const optionsBuilderForEditingBasic: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'value'\r\n  },\r\n  commonFieldsBasic\r\n\r\n];\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Defines the Form model to set the field properties of `ProjectSettings`.\r\n * Empty project template used when creating new projects.\r\n */\r\nexport const projectFormFieldsModel: Array<FormFieldsModel<ProjectSettings>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.dateCreation\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    value: '',\r\n    label: 'Project',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicTextarea,\r\n    fieldName: 'description',\r\n    value: '',\r\n    label: 'Description',\r\n    required: true\r\n  }\r\n];\r\n","import {\r\n  optionsBuilderForAddingAdvanced,\r\n  optionsBuilderForAddingBasic,\r\n  optionsBuilderForEditingAdvanced,\r\n  optionsBuilderForEditingBasic\r\n  } from 'app/data/form-models/options-builder.constant';\r\nimport { projectFormFieldsModel } from 'app/data/form-models/project-form-fields-model.constant';\r\nimport {\r\n  sectionDetailsFormFieldsModel,\r\n  sectionElesForEditingAdvanced,\r\n  sectionElesForEditingBasic,\r\n  sectionElesNewItemAdvanced,\r\n  sectionElesNewItemBasic\r\n  } from 'app/data/form-models/section-builder.constant';\r\n\r\nexport enum PROJECT_EDITOR_MODE {\r\n  advanced = 1,\r\n  basic\r\n};\r\n\r\nexport const PROJECT_EDITOR_FORM_MODELS_CONST = {\r\n  [PROJECT_EDITOR_MODE.advanced]: {\r\n    projectInfo: projectFormFieldsModel,\r\n    sectionInfo: sectionDetailsFormFieldsModel,\r\n    sectionEles: {\r\n      newItem: sectionElesNewItemAdvanced,\r\n      existingItem: sectionElesForEditingAdvanced\r\n    },\r\n    optionEles: {\r\n      newItem: optionsBuilderForAddingAdvanced,\r\n      existingItem: optionsBuilderForEditingAdvanced\r\n    }\r\n  },\r\n  [PROJECT_EDITOR_MODE.basic]: {\r\n    projectInfo: projectFormFieldsModel,\r\n    sectionInfo: sectionDetailsFormFieldsModel,\r\n    sectionEles: {\r\n      newItem: sectionElesNewItemBasic,\r\n      existingItem: sectionElesForEditingBasic\r\n    },\r\n    optionEles: {\r\n      newItem: optionsBuilderForAddingBasic,\r\n      existingItem: optionsBuilderForEditingBasic\r\n    }\r\n  }\r\n};\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, SELECTABLE_FORM_ELES } from 'app/data/model/form-model-commons';\r\nimport { SectionCustomFieldProperties, SectionDetailsDeclaration } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const sectionDetailsFormFieldsModel: Array<FormFieldsModel<SectionDetailsDeclaration>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    label: 'Section name',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.childOfSelectorForSection,\r\n    fieldName: 'childOf',\r\n    label: 'Parent sections:',\r\n    options: []\r\n  }\r\n];\r\n\r\n/**\r\n * Defines common fields that are used both when creating and editing fields of a `Section`.\r\n */\r\nconst commonAddAndEditFields: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.optionsMaker,\r\n    fieldName: 'options',\r\n    type: 'text',\r\n    label: 'Possible values',\r\n    prerequisites: [{ componentCode: [FORM_COMPONENTS_CODES.basicSelect, FORM_COMPONENTS_CODES.basicRadio] }],\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    fieldName: 'required',\r\n    value: false,\r\n    label: 'Required'\r\n  }\r\n];\r\n\r\n/**\r\n * Defines the Form model to set the field properties of a `Section`.\r\n * All the values specified in each field of `sectionElesNewItemAdvanced` are necessary for creating each field.\r\n *\r\n * @remarks\r\n * For new fields only. Existing items must use `sectionElesForEditingAdvanced` as some properties can't be changed after the filed has been created.\r\n */\r\nexport const sectionElesNewItemAdvanced: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\nexport const sectionElesNewItemBasic: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"8\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"4\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'fieldName'\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the properties of an existing field of a `Section`.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `sectionElesNewItemAdvanced` instead.\r\n */\r\nexport const sectionElesForEditingAdvanced: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\nexport const sectionElesForEditingBasic: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"8\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"4\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'fieldName'\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Reserved keys are needed to store system required properties.\r\n *\r\n * @remarks\r\n * Users can still pick any of these as section names as sections are stored using their system-generated `id` as key.\r\n */\r\nexport enum RESERVED_UDS_KEYS {\r\n  _settings = '_settings',\r\n  _sections = '_sections'\r\n}\r\n\r\n/**\r\n * Data structure of Anita, composed of both SystemData and UserData.\r\n */\r\nexport type AnitaUniversalDataStorage = SystemData & UserData;\r\n\r\n/**\r\n * Store for system required properties. Includes general settings and Sections declarations. The reserved keys define system required properties.\r\n */\r\nexport type SystemData = {\r\n  [RESERVED_UDS_KEYS._settings]: Array<ProjectSettings>;\r\n  [RESERVED_UDS_KEYS._sections]: Array<Section>;\r\n};\r\n\r\n/**\r\n * Sections' data, stored in a Object, where the key is the section `id` and the value is a `Array<SectionElement>`.\r\n */\r\nexport type UserData = {\r\n  [sectionId: string]: Array<SectionElement>;\r\n};\r\n\r\n/**\r\n * Defines the structure of the general information on a project.\r\n */\r\nexport interface ProjectSettings {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  dateCreation: string;\r\n  lastModified?: string;\r\n  encrypted?: boolean;\r\n}\r\n\r\n/**\r\n * Info on Projects saved in IndexedDB to know what project are on the device.\r\n */\r\nexport interface LocalProjectSettings extends ProjectSettings {\r\n  fileHandle?: FileSystemFileHandle;\r\n}\r\n\r\n/**\r\n * Defines the properties of user defined fields of a `Section`\r\n *\r\n * @remarks\r\n * These fields are for the object to be stored in `sections.formModel[]` of the `AnitaUniversalDataStorage` store.\r\n */\r\nexport interface SectionCustomFieldProperties {\r\n  componentCode: FORM_COMPONENTS_CODES;\r\n  fieldName: string;\r\n  label?: string;\r\n  options?: Array<OptionKeysModel>;\r\n  required?: boolean;\r\n  externalLabel?: boolean;\r\n  value?: any;\r\n  width?: number;\r\n  [RESERVED_FIELDS.id]?: never;\r\n  [RESERVED_FIELDS.dateCreation]?: never;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum properties of a `Section` of a Project.\r\n */\r\nexport interface SectionDetailsDeclaration {\r\n  id: string;\r\n  title: string;\r\n  childOf?: Array<string>;\r\n  [RESERVED_FIELDS.dateCreation]?: never;\r\n}\r\n\r\n/**\r\n * Defines the full properties of a Section.\r\n */\r\nexport interface Section extends SectionDetailsDeclaration {\r\n  formModel: Array<FormFieldsModel<SupportedFormsTypes>>;\r\n}\r\n\r\n/**\r\n * Defines the properties of each parent to which a element is connected.\r\n */\r\nexport interface ParentInfoForDetailsView {\r\n  txt: string;\r\n  sectionId: string;\r\n  element: SectionElement;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum fields of an `Element` of a `Section`.\r\n */\r\nexport interface SectionElement {\r\n  [RESERVED_FIELDS.id]?: string;\r\n  [RESERVED_FIELDS.dateCreation]?: string;\r\n  [RESERVED_FIELDS.createdBy]?: string;\r\n  [RESERVED_FIELDS.parentsInfo]?: Array<string>;\r\n  [RESERVED_FIELDS.lastModified]?: string;\r\n  [key: string]: any;\r\n}\r\n","import { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table localSettings and its fields for the `indexedDb` plugin of `db-connector`\r\n */\r\nexport const localSettings: SectionDefinition<LocalSettingsData<LOCAL_SETTINGS_KEYS>> = {\r\n  name: 'localSettings',\r\n  fields: [\r\n    'data'\r\n  ]\r\n};\r\n\r\n/**\r\n * Constant to uniquely identify values of local settings.\r\n * As of now there are no settings yet to save, so we keep `testData`.\r\n */\r\nexport enum LOCAL_SETTINGS_KEYS {\r\n  testData = 1\r\n}\r\n\r\n/**\r\n * Defines the expected data structure to be saved in `localSettings`.\r\n */\r\nexport interface LocalSettingsData<T extends LOCAL_SETTINGS_KEYS> {\r\n  id: T;\r\n  data: DataByKey[T];\r\n}\r\n\r\n/**\r\n * Identifies the data type saved in `localSettings` by the enum value of `LOCAL_SETTINGS_KEYS`.\r\n */\r\ninterface DataByKey {\r\n  [LOCAL_SETTINGS_KEYS.testData]: unknown;\r\n}\r\n\r\n/**\r\n * Example of the method to store data in localSettings:\r\n *\r\n * private saveLocalSettings<T extends LOCAL_SETTINGS_KEYS>(id: T, data: DataByKey[T]): void {\r\n *   dbInsertor(CLIENT_SECTIONS.localSettings, { id, data }).autoInsert();\r\n * }\r\n */\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Randomly generated strings hasehd with sha256 to be used as unique identifiers\r\n */\r\nexport class IdCreator {\r\n\r\n  /**\r\n   * Makes a unique random string with the a name \r\n   */\r\n  public static make(name: string): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${name}${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n  /**\r\n   * Makes a unique completely random string\r\n   */\r\n  public static random(): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n}\r\n","import { PROJECT_EDITOR_MODE } from 'app/data/form-models/project-editor-form-models.const';\r\nimport { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport interface IFormProjectState {\r\n  original: Partial<SystemData>;\r\n  project: Partial<SystemData>;\r\n  mode: PROJECT_EDITOR_MODE\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormProjectState = {\r\n  original: {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  },\r\n  project: {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  },\r\n  mode: PROJECT_EDITOR_MODE.basic\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formProjectReducer = (state: IFormProjectState = formElementState, action: Action<REDUX_ACTIONS>): IFormProjectState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setProjectEditorMode:\r\n      return {\r\n        original: state.original, project: state.project,\r\n        mode: state.mode === PROJECT_EDITOR_MODE.basic ? PROJECT_EDITOR_MODE.advanced : PROJECT_EDITOR_MODE.basic\r\n      };\r\n    case REDUX_ACTIONS.setFormProject:\r\n      // Here we need a deep copy of the project to leave the source unchanged in case the user cancel the edits, \r\n      // and to \"unlink\" the Object set on the `project` key from the one set on the `original` key.\r\n      return { original: cloneDeep(action.payload), mode: state.mode, project: cloneDeep(action.payload) };\r\n    case REDUX_ACTIONS.updateFormProjectSettings:\r\n      return {\r\n        original: state.original, mode: state.mode,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_UDS_KEYS._settings]: [{ ...action.payload }]\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectAddSection:\r\n      return {\r\n        original: state.original, mode: state.mode,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_UDS_KEYS._sections]: state.project[RESERVED_UDS_KEYS._sections].concat({\r\n            id: IdCreator.random(),\r\n            title: \"\",\r\n            formModel: [{} as any]\r\n          })\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectUpdateSection:\r\n      const copy3 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy3.project[RESERVED_UDS_KEYS._sections][action.payload.index] = { ...action.payload.section };\r\n      return copy3;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection:\r\n      const copy4 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy4.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement] = { ...action.payload.formElement };\r\n      return copy4;\r\n    case REDUX_ACTIONS.updateFormProjectAddFieldToSection:\r\n      const copy5 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy5.project[RESERVED_UDS_KEYS._sections][action.payload].formModel.push({} as any);\r\n      return copy5;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection:\r\n      const copy6 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy6.project[RESERVED_UDS_KEYS._sections][action.payload.sectionIndex].formModel.splice(action.payload.fieldIndex, 1);\r\n      return copy6;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveSection:\r\n      const copy7 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy7.project[RESERVED_UDS_KEYS._sections].splice(action.payload, 1);\r\n      return copy7;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption:\r\n      const copy8 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      const defaultValue = copy8.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].length + 1;\r\n      copy8.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].push({ label: \"\", value: defaultValue } as OptionKeysModel);\r\n      return copy8;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption:\r\n      const copy9 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy9.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].splice(action.payload.indexOptions, 1);\r\n      return copy9;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue:\r\n      const copy10 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy10.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'][action.payload.indexOptions] = action.payload.formElement;\r\n      return copy10;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface ILayoutState {\r\n  sidebar: string;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: ILayoutState = {\r\n  sidebar: '-translate-x-full'\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const layoutReducer = (state: ILayoutState = formElementState, action: Action<REDUX_ACTIONS>): ILayoutState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.toggleSidebar:\r\n      const newState = { ...state };\r\n      newState.sidebar = newState.sidebar === '-translate-x-full' ? '' : '-translate-x-full';\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SectionDetailsDeclaration } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the sections selectable by the child of selector\r\n */\r\nconst sectionsForChildOfSelectorState: Array<SectionDetailsDeclaration> = [];\r\n\r\n/**\r\n * Updates the sections selectable by the child of selector component\r\n * \r\n * @see ChildOfSelectorForSectionComponent\r\n */\r\nexport const sectionsForChildOfSelectorReducer = (state: Array<SectionDetailsDeclaration> = sectionsForChildOfSelectorState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addSectionForChildOfSelector:\r\n      const editableState = state.concat();\r\n\r\n      if (!editableState.length)\r\n        editableState.push(action.payload);\r\n      else {\r\n        const index = editableState.findIndex(sectionDeclaration => sectionDeclaration.id === action.payload.id);\r\n        const position = index >= 0 ? index : editableState.length;\r\n        editableState[position] = action.payload;\r\n      }\r\n      return editableState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings, SectionDetailsDeclaration, SystemData } from 'app/data/model/project-info';\r\nimport { formElementReducer, IFormElementState } from 'app/libs/redux/reducers/form-element.reducer';\r\nimport { formElesValidStateReducer, IFormElesValidState } from 'app/libs/redux/reducers/form-eles-valid-state.reducer';\r\nimport { formProjectReducer, IFormProjectState } from 'app/libs/redux/reducers/form-project.reducer';\r\nimport { ILayoutState, layoutReducer } from 'app/libs/redux/reducers/layout.reducer';\r\nimport { projectReducer } from 'app/libs/redux/reducers/project.reducer';\r\nimport { projectsReducer } from 'app/libs/redux/reducers/projects.reducer';\r\nimport { sectionsForChildOfSelectorReducer } from 'app/libs/redux/reducers/sections-for-child-of-selector.reducer';\r\n\r\n/**\r\n * Supported reducers\r\n */\r\nexport const REDUCERS = {\r\n  project: projectReducer,\r\n  projects: projectsReducer,\r\n  sectionsForChildOfSelector: sectionsForChildOfSelectorReducer,\r\n  formElesValidState: formElesValidStateReducer,\r\n  formElement: formElementReducer,\r\n  formProject: formProjectReducer,\r\n  layout: layoutReducer\r\n};\r\n\r\n/**\r\n * Types managed by reducers\r\n */\r\nexport interface AnitaStore {\r\n  project: SystemData;\r\n  projects: Array<LocalProjectSettings>;\r\n  sectionsForChildOfSelector: Array<SectionDetailsDeclaration>;\r\n  formElesValidState: IFormElesValidState;\r\n  formElement: IFormElementState;\r\n  formProject: IFormProjectState;\r\n  layout: ILayoutState;\r\n}\r\n","import { SystemData } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst projectState: SystemData = null;\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const projectReducer = (state: SystemData = projectState, action: Action<REDUX_ACTIONS>): SystemData => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setCurrentProject:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nexport const projectsState: Array<LocalProjectSettings> = null;\r\n\r\n/**\r\n * Updates the projectsState\r\n */\r\nexport const projectsReducer = (state: Array<LocalProjectSettings> = projectsState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addProjectToList:\r\n      return state.concat(action.payload);\r\n    case REDUX_ACTIONS.setProjectList:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { REDUCERS } from 'app/libs/redux/reducers.const';\r\nimport { combineReducers, createStore } from 'redux';\r\n\r\nconst combinedReducers = combineReducers(REDUCERS)\r\n\r\nexport const store = createStore(combinedReducers);","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table projects and its fields for the `indexedDb` plugin of `db-connector`.\r\n * In the table `projects` are stored only the essential information needed to load the project from its data source.\r\n */\r\nexport const projects: SectionDefinition<LocalProjectSettings> = {\r\n  name: 'projects',\r\n  fields: [\r\n    'title',\r\n    'fileHandle',\r\n    'description',\r\n    RESERVED_FIELDS.dateCreation\r\n  ]\r\n};\r\n","import { auds_sections } from 'app/data/sections/auds-sections.const';\r\nimport { auds_settings } from 'app/data/sections/auds-settings.const';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport enum AUDS_SYSTEM_SECTIONS {\r\n  auds_settings = 1,\r\n  auds_sections\r\n}\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const AUDS_SYSTEM_SECTIONS_DEFINITIONS = [auds_settings, auds_sections];\r\n","import { localSettings } from 'app/data/sections/local-settings.const';\r\nimport { projects } from 'app/data/sections/projects.const';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport const CLIENT_SECTIONS = {\r\n  projects: projects.name,\r\n  localSettings: localSettings.name\r\n};\r\n\r\n/**\r\n * Optional on first version, required for changes to the structure of the DB\r\n * Must contain on Array for each previous version\r\n * Each array must contain the unaltered SezDefinitions of that version\r\n * \r\n * TODO with Dexie 3.x.x upgrading has been simplified, probably no longer needed.\r\n */\r\nexport const previousVersions: Array<Array<SectionDefinition<any>>> = [\r\n  // insert here previous version on DB structure change\r\n];\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const CLIENT_SEZ_DEFINITIONS = [projects, localSettings];\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport Dexie from 'dexie';\r\nimport { Db } from 'mongodb';\r\nimport * as mysql from 'mysql';\r\n\r\ninterface DbInstances {\r\n  system: DbConnectorInstance<Dexie>;\r\n  [projectIdentifier: string]: DbConnectorInstance<Dexie | Db | mysql.Connection | AnitaUniversalDataStorage>;\r\n}\r\n\r\nexport const dbInstances: DbInstances = {\r\n  system: undefined\r\n};\r\n","import { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _sections and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_sections: SectionDefinition<Section> = {\r\n  name: RESERVED_UDS_KEYS._sections,\r\n  pk: 'id',\r\n  fields: ['title', 'childOf', 'formModel']\r\n};\r\n","import { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _settings and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_settings: SectionDefinition<ProjectSettings> = {\r\n  name: RESERVED_UDS_KEYS._settings,\r\n  pk: 'id',\r\n  fields: ['title', 'dateCreation', 'description']\r\n};\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\n\r\n/**\r\n * Default primary key if none is specified.\r\n */\r\nexport const DEFAULT_PK = RESERVED_FIELDS.id;\r\n\r\n/**\r\n * Default parent identifier if none is specified.\r\n */\r\nexport const DEFAULT_PARENTS_IDENTIFIER = RESERVED_FIELDS.parentsInfo;\r\n\r\n/**\r\n * Default owner identifier if none is specified.\r\n */\r\nexport const DEFAULT_OWNER_IDENTIFIER = RESERVED_FIELDS.createdBy;\r\n","export class Logger {\r\n\r\n  /**\r\n   * Whether to print to the console debug info\r\n   */\r\n  public static debug = true;\r\n\r\n  /**\r\n   * Spaces to format list elements\r\n   */\r\n  private static spacesForListeles = '\\n                            - ';\r\n\r\n  // INFO\r\n\r\n  /**\r\n   * Formats in one line a description and a value\r\n   */\r\n  public static info<T>(desc: string, value?: T): string {\r\n    const arrMsg = (value) ? [`${desc}: ${JSON.stringify(value)}`] : [desc];\r\n    return Logger.doLog(arrMsg);\r\n  }\r\n\r\n  // LIST\r\n\r\n  /**\r\n   * Generates a list in the console for an array of strings\r\n   */\r\n  public static list(desc: string, list: Array<string> | Object): string {\r\n\r\n    if (Logger.isEmptyList(list))\r\n      Logger.doLog([desc, 'none']);\r\n\r\n    let stringList = (Array.isArray(list)) ? Logger.listFromArray(list) : Logger.listFromObject(list);\r\n\r\n    stringList = stringList.substring(0, stringList.length - 1);\r\n    stringList += '.';\r\n\r\n    return Logger.doLog([`${desc} ${stringList}`]);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a list is empty\r\n   */\r\n  private static isEmptyList(list: Array<string> | Object): boolean {\r\n    return (Array.isArray(list) && !list.length) || (typeof list === 'object' && !Object.keys(list).length);\r\n  }\r\n\r\n  /**\r\n   * Creates a list from an array\r\n   */\r\n  private static listFromArray(list: Array<string>): string {\r\n    let stringList = '';\r\n    list.forEach(line => { stringList += `${Logger.spacesForListeles}${Logger.formatValueForList(line)};`; });\r\n    return stringList;\r\n  }\r\n\r\n  /**\r\n   * Creates a list from a object \r\n   */\r\n  private static listFromObject(list: Object): string {\r\n    let stringList = '';\r\n    for (const key in list)\r\n      stringList += `${Logger.spacesForListeles}${key}: ${Logger.formatValueForList(list[key])};`;\r\n    return stringList;\r\n  }\r\n\r\n  // RAW\r\n\r\n  /**\r\n   * Same as console.log\r\n   */\r\n  public static raw(desc: string, txt?: any): string {\r\n    return Logger.doLog([`${desc}: `, txt]);\r\n  }\r\n\r\n  // ERROR\r\n\r\n  /**\r\n   * Same as console.error\r\n   */\r\n  public static error(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'error');\r\n  }\r\n\r\n  /**\r\n   * Same as console.warn\r\n   */\r\n  public static warn(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'warn');\r\n  }\r\n\r\n  // COMMON\r\n\r\n  /**\r\n   * Converts non primitive values to string \r\n   */\r\n  private static formatValueForList<T>(value: T): T | string {\r\n    return (Logger.isPrimitiveValue(value) || value === null) ? value : JSON.stringify(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is a primitive\r\n   */\r\n  private static isPrimitiveValue<T>(value: T): boolean {\r\n    switch (typeof value) {\r\n      case 'string':\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'undefined':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs text to the console if debug is `true`\r\n   */\r\n  private static doLog(data: Array<string | number>, methodName: 'log' | 'error' | 'warn' = 'log'): string {\r\n\r\n    const date = new Date().toISOString();\r\n    data[0] = `[${date}] ${data[0]}`;\r\n\r\n    if (Logger.debug === true)\r\n      console[methodName](...data);\r\n\r\n    return data.join('. ');\r\n  }\r\n\r\n}\r\n","import { DEFAULT_OWNER_IDENTIFIER, DEFAULT_PARENTS_IDENTIFIER, DEFAULT_PK } from 'app/libs/db-connector/db-builder/default-values.constant';\r\nimport { SectionDefinition, SectionModel, SectionName } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Builds a Section model\r\n */\r\nexport class SezBuilder<T> {\r\n\r\n  /**\r\n   * The section model\r\n   */\r\n  private section: SectionModel<T>;\r\n\r\n  /**\r\n   * Creates an instance of sez builder.\r\n   * @param allSez all the sections definitions of the data structure.\r\n   * @param name the section name to build.\r\n   * @param [fields] all fields. Optional as a section can have only the system fields.\r\n   * @param [pk] the primary key.\r\n   * @param [indexes] the indexes of the section (aka table).\r\n   * @param [orderBy] default sorting order.\r\n   * @param [childOf] list of sections of which the current section is child. Needed for the UI, to add the parent delector.\r\n   * @param [parentsIdentifiers] name of the field identifying the parent id value.\r\n   * @param [ownerIdentifier] name of the field identifying the id of the owner.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>,\r\n    private name: SectionName,\r\n    private fields: Array<keyof T> = [],\r\n    private pk: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private indexes: Array<keyof T> = [DEFAULT_PK] as Array<keyof T>,\r\n    private orderBy: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private childOf?: Array<SectionName>,\r\n    private parentsIdentifiers?: keyof T,\r\n    private ownerIdentifier?: keyof T & string\r\n  ) { }\r\n\r\n  /**\r\n   * Makes the section and returns it.\r\n   */\r\n  public make(): SectionModel<T> {\r\n    this.addPkToFields();\r\n    this.addPkToIndexes();\r\n    this.addSpecialFieldsToFields('indexes');\r\n    this.setOwnerIdentifier();\r\n    this.checkOrderByExists();\r\n    this.checkRelations();\r\n    this.checkParentIdentifier();\r\n    this.buildSez();\r\n    return this.section;\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to fields if not already included.\r\n   */\r\n  private addPkToFields(): void {\r\n    if (!this.fields.includes(this.pk))\r\n      this.fields.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to indexes if not already included.\r\n   */\r\n  private addPkToIndexes(): void {\r\n    if (!this.indexes.includes(this.pk))\r\n      this.indexes.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the fields specified in `indexes` to the fields, if not already included.\r\n   */\r\n  private addSpecialFieldsToFields(scope: 'indexes'): void {\r\n    this[scope].forEach(fieldName => {\r\n      if (!this.fields.includes(fieldName))\r\n        this.fields.push(fieldName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the owneridentifier value and adds it to the fields if not already included.\r\n   */\r\n  private setOwnerIdentifier(): void {\r\n    if (!this.ownerIdentifier)\r\n      this.ownerIdentifier = DEFAULT_OWNER_IDENTIFIER as keyof T & string;\r\n    if (!this.fields.includes(this.ownerIdentifier))\r\n      this.fields.push(this.ownerIdentifier);\r\n  }\r\n\r\n  /**\r\n   * Adds the orderBy value to fields if not already included.\r\n   */\r\n  private checkOrderByExists(): void {\r\n    if (!this.fields.includes(this.orderBy))\r\n      this.fields.push(this.orderBy);\r\n  }\r\n\r\n  /**\r\n   * Checks that the values of `childOf` correspond to valid section names.\r\n   */\r\n  private checkRelations(): void {\r\n    if (this.childOf)\r\n      this.loopAllRelations();\r\n  }\r\n\r\n  /**\r\n   * Loops all relations for a given scope and calls checkRelationsExist to check if the value is valid.\r\n   * Sets the scope to undefined if there are no valid relationships.\r\n   *\r\n   * @see checkRelationsExist\r\n   */\r\n  private loopAllRelations(): void {\r\n    this.childOf.forEach((sezName: SectionName) => this.checkRelationsExist(sezName));\r\n    if (!this.childOf.length)\r\n      this.childOf = undefined;\r\n  }\r\n\r\n  /**\r\n   * Checks that the section name found in `childOf` correponds to an actual section.\r\n   * If not, removes the section name from the list of sections in `childOf`.\r\n   * @param sezName the name of the section to look for\r\n   */\r\n  private checkRelationsExist(sezName: SectionName): void {\r\n    const indexSez = this.getSezByName(sezName);\r\n    if (indexSez >= 0)\r\n      return;\r\n\r\n    const indexInScope = this.childOf.indexOf(sezName as string);\r\n    this.childOf.splice(indexInScope, 1);\r\n\r\n    Logger.error(`Error in .childOf list`, `Section '${sezName}' does not exist in the sections list and has hence been removed from the .childOf list`);\r\n  }\r\n\r\n  /**\r\n   * Finds the section number by its name from the list of all the section definitions.\r\n   * @param sezName the name to look for\r\n   * @returns the section number\r\n   */\r\n  private getSezByName(sezName: SectionName): number {\r\n    let foundIndex = -1;\r\n    let counter = 0;\r\n    const length = this.allSez.length;\r\n    while (foundIndex === -1 && counter < length) {\r\n      if (this.allSez[counter].name === sezName)\r\n        foundIndex = counter;\r\n      counter++;\r\n    }\r\n    return foundIndex;\r\n  }\r\n\r\n  /**\r\n   * Checks that parentsIdentifiers is set if `childOf` has any section.\r\n   */\r\n  private checkParentIdentifier(): void {\r\n    if (this.childOf && !this.parentsIdentifiers)\r\n      this.parentsIdentifiers = DEFAULT_PARENTS_IDENTIFIER as keyof T;\r\n  }\r\n\r\n  /**\r\n   * Builds the section\r\n   */\r\n  private buildSez(): void {\r\n    this.section = {\r\n      name: this.name,\r\n      pk: this.pk,\r\n      indexes: this.indexes,\r\n      orderBy: this.orderBy,\r\n      fields: this.fields,\r\n      ownerIdentifier: this.ownerIdentifier\r\n    };\r\n    this.addChildOf();\r\n  }\r\n\r\n  /**\r\n   * Adds the filed `childOf` if any\r\n   */\r\n  private addChildOf(): void {\r\n    if (!this.childOf)\r\n      return;\r\n\r\n    this.section.childOf = this.childOf;\r\n    this.section.parentsIdentifiers = this.parentsIdentifiers;\r\n  }\r\n\r\n}\r\n","export enum EDITOR_MODE {\r\n  add = \"add\",\r\n  edit = \"edit\"\r\n}\r\n","import { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport enum URL_PARAMS {\r\n  projectId = 'projectId',\r\n  sectionId = 'sectionId',\r\n  elementId = 'elementId',\r\n  parentId = 'parentId'\r\n}\r\n\r\n/**\r\n * Lists all the routes in the application\r\n * \r\n * @remarks We can't use the enum approach here because we need to concat strings.\r\n */\r\nexport const ANITA_URLS = {\r\n  // PROJECTS\r\n  projectsNone: '/projects/none',\r\n  projectsList: '/projects/list',\r\n  projectAdd: `/projects/${EDITOR_MODE.add}`,\r\n  projectEdit: `/projects/${EDITOR_MODE.edit}/:${URL_PARAMS.projectId}`,\r\n  // PROJECT\r\n  projectDetails: `/project/:${URL_PARAMS.projectId}/info`,\r\n  projectSectionElesList: `/project/:${URL_PARAMS.projectId}/list/:${URL_PARAMS.sectionId}`,\r\n  projectSectionAddEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.add}`,\r\n  projectSectionEditEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.edit}/:${URL_PARAMS.elementId}`,\r\n  projectSectionEleDetails: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/details/:${URL_PARAMS.elementId}`,\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Builds the data structure of the DB from the section definitions and returns it.\r\n */\r\nexport class DataStructureBuilder {\r\n\r\n  /**\r\n   * The data structure to be returned.\r\n   */\r\n  private ds: AbstractModel = {};\r\n\r\n  /**\r\n   * Creates an instance of DataStructureBuilder.\r\n   * @param allSez the `Array` of all the definitions of the Sections (aka tables) of the DB.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>\r\n  ) { }\r\n\r\n  /**\r\n   * Loops all Sections and finally returns the data structure.\r\n   */\r\n  public make(): AbstractModel {\r\n    this.allSez.forEach(sez => this.buildSez<typeof sez>(sez));\r\n    return this.ds;\r\n  }\r\n\r\n  /**\r\n   * Builds the actual Section to be added to data structure.\r\n   */\r\n  private buildSez<T>(sezParams: SectionDefinition<T>): void {\r\n    const sez = new SezBuilder<T>(\r\n      this.allSez,\r\n      sezParams.name,\r\n      sezParams.fields,\r\n      sezParams.pk,\r\n      sezParams.indexes,\r\n      sezParams.orderBy,\r\n      sezParams.childOf,\r\n      sezParams.parentsIdentifiers,\r\n      sezParams.ownerIdentifier\r\n    ).make();\r\n    this.addToTempDs(sez);\r\n  }\r\n\r\n  /**\r\n   * Adds a Section to the class property `ds` using `name` as key.\r\n   */\r\n  private addToTempDs<T>(sez: SectionModel<T>): void {\r\n    this.ds[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { AUDS_SYSTEM_SECTIONS_DEFINITIONS } from 'app/data/auds-system-sections.enum';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DataStructureBuilder } from 'app/libs/db-connector/db-builder/data-structure-builder.class';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport {\r\n  DbConnectorInstance,\r\n  DbObjects,\r\n  DbStoreInterface,\r\n  Deletor,\r\n  DsDbInitOptions,\r\n  Insertor,\r\n  Selector,\r\n  Updator\r\n  } from 'app/libs/db-connector/models/executers';\r\n\r\n/**\r\n *  Initialize `db-connector` for the given storage (MySQL, IndexedDB, etc.)\r\n *\r\n * @param executers The plugin implementing the read/write operations on the DB\r\n * @param [options={}] Initialization options of the DB. These very depending on the plugin requirements (e.g. connection parameters)\r\n * @param [allSez] section definitions defining the data structure of the DB\r\n * @param [addSystemSections=true] whether to automatically build the data structure for system sections (`_settings` and `_sections`)\r\n */\r\nexport class DbConnector<DbTypes> implements DbConnectorInstance<DbTypes> {\r\n\r\n  public dbStore: DbStoreInterface<DbTypes>;\r\n  public DS: AbstractModel = {};\r\n\r\n  constructor(\r\n    private executers: DbObjects<unknown, DbTypes>,\r\n    public options: DsDbInitOptions = {},\r\n    private allSez: Array<SectionDefinition<any>> = [],\r\n    private addSystemSections: boolean = true\r\n  ) { }\r\n\r\n  public async init(): Promise<DbConnectorInstance<DbTypes>> {\r\n\r\n    if (this.addSystemSections)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(AUDS_SYSTEM_SECTIONS_DEFINITIONS).make());\r\n\r\n    if (this.allSez.length)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(this.allSez).make());\r\n\r\n    if (this.executers.dbStore)\r\n      this.dbStore = await new this.executers.dbStore(this, this.options).initDB();\r\n    else\r\n      throw new Error('No dbStore passed to DbConnector. To initialize DbConnector, you must pass a valid dbStore');\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the insertor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param element the alement to insert in the DB.\r\n   * @returns an instance of insertor (don't forget to call `autoInsert`)\r\n   */\r\n  public callInsertor<E>(section: keyof AbstractModel, element: E): Insertor<E> {\r\n    return new this.executers.insertor(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the selector of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of selector (don't forget to call `single` or `multiple` or `count`)\r\n   */\r\n  public callSelector<E>(section: keyof AbstractModel, args?: Partial<E>): Selector<E> {\r\n    return new this.executers.selector(this, section, args) as Selector<E>;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the updator of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the element to update in the DB.\r\n   * @returns an instance of updator (don't forget to call `autoUpdate`)\r\n   */\r\n  public callUpdator<E>(section: keyof AbstractModel, element: Partial<E>): Updator<E> {\r\n    return new this.executers.updator(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the deletor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of deletor (don't forget to call `autoDelete`)\r\n   */\r\n  public callDeletor<E>(section: keyof AbstractModel, args: Partial<E>): Deletor<E> {\r\n    return new this.executers.deletor(this, section, args);\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DataStructureBuilder } from 'app/libs/db-connector/db-builder/data-structure-builder.class';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { DbConnectorInstance, DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implementation of DbStore for IndexedDB with Dexie.\r\n */\r\nexport class DbStore implements DbStoreInterface<Dexie> {\r\n\r\n  public db: Dexie;\r\n  private lastPreviousVersionScheme = undefined;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private options: DsDbInitOptions\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<Dexie>> {\r\n\r\n    if (!this.dbConnector.options.indexedDbName)\r\n      throw Error('No name found in DsDbInitOptions. Please provide a name for the database by setting the name on the property indexedDbName in the options passed to DbConnector.');\r\n\r\n    this.setDb();\r\n\r\n    if (!this.options.previousVersions)\r\n      this.options.previousVersions = [];\r\n\r\n    const currentVersion = (this.options.previousVersions.length) ? this.options.previousVersions.length + 1 : 1;\r\n\r\n    if (this.options.previousVersions.length)\r\n      this.options.previousVersions.forEach((versionSezs, index) => this.handlePreviousVersion(versionSezs, index + 1));\r\n\r\n    this.buildVersionDb(this.dbConnector.DS, currentVersion);\r\n\r\n    return this;\r\n  }\r\n\r\n  public close(): void {\r\n    // not needed in IndexedDB\r\n  }\r\n\r\n  private setDb(): void {\r\n    this.db = new Dexie(this.dbConnector.options.indexedDbName);\r\n  }\r\n\r\n  private handlePreviousVersion(versionSezs: Array<SectionDefinition<any>>, version: number): void {\r\n    const versionDS = new DataStructureBuilder(versionSezs).make();\r\n    this.buildVersionDb(versionDS, version);\r\n    this.lastPreviousVersionScheme = versionDS;\r\n  }\r\n\r\n  private buildVersionDb(versionDS: AbstractModel, version: number): void {\r\n    const tables = {};\r\n\r\n    for (const section in versionDS)\r\n      if (!this.lastPreviousVersionScheme || !this.lastPreviousVersionScheme[section])\r\n        tables[versionDS[section].name] = versionDS[section].indexes.join();\r\n\r\n    this.db.version(version).stores(tables);\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { NewWhere } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\n\r\nexport interface BetweenSearchParams {\r\n  field: string;\r\n  lowerBound: string | number;\r\n  upperBound: string | number;\r\n  includeLower: boolean;\r\n  includeUpper: boolean;\r\n}\r\n\r\nexport type SuppoertedOperators = '===' | '!=' | '>' | '>=' | '<' | '<=' | '=';\r\n\r\nexport interface FieldNValues {\r\n  [index: string]: string | number;\r\n}\r\n\r\nexport type Filter4Dexie = (item: Object) => boolean;\r\n\r\n/**\r\n * Support methods to build queries with `QueryMaker` on IndexedDB with Dexie\r\n * \r\n * @see QueryMaker\r\n */\r\nexport class QueryHelper {\r\n\r\n  /**\r\n   * Determines the methods to execute for the select query based on the number of arguments.\r\n   */\r\n  public static methodToExecute(DS: AbstractModel, arraysWhere: Array<NewWhere>, section: keyof AbstractModel): 'dexieFullCollection' | 'dexieBetween' | 'dexieGet' | 'dexieWhere' | 'complexSelect' {\r\n\r\n    const arraysWhereLen = arraysWhere.length;\r\n\r\n    if (!arraysWhereLen)\r\n      return 'dexieFullCollection';\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    if (arraysWhereLen === 2 && (arraysWhere[0][1] === '>=' || arraysWhere[0][1] === '>') && (arraysWhere[1][1] === '<=' || arraysWhere[1][1] === '<'))\r\n      return 'dexieBetween';\r\n\r\n    if (arraysWhere[0][1] !== '=')\r\n      return 'complexSelect';\r\n\r\n    if (arraysWhereLen === 1 && arraysWhere[0][0] === DS[section].pk)\r\n      return 'dexieGet';\r\n\r\n    if (DS[section].indexes.indexOf(arraysWhere[0][0]) > -1)\r\n      return 'dexieGet';\r\n\r\n    let dexieWhere = true;\r\n\r\n    arraysWhere.forEach(whereArr => {\r\n      if (whereArr[1] !== '=')\r\n        dexieWhere = false;\r\n      if (DS[section].indexes.indexOf(whereArr[0]) < 0)\r\n        dexieWhere = false;\r\n    });\r\n\r\n    if (dexieWhere)\r\n      return 'dexieWhere';\r\n\r\n    return 'complexSelect';\r\n\r\n  }\r\n\r\n  /**\r\n   * Converts an Array of where arguments (field, operator, value) to an object with field and value\r\n   */\r\n  public static buildArrayFildsNValues(arraysWhere: Array<NewWhere>): FieldNValues {\r\n    const objFieldsNValues: FieldNValues = {};\r\n\r\n    arraysWhere.forEach(arrSearch => {\r\n      objFieldsNValues[arrSearch[0]] = arrSearch[2];\r\n    });\r\n\r\n    return objFieldsNValues;\r\n\r\n  }\r\n\r\n  /**\r\n   * Builds between search params, optionally including upper or lower boundary\r\n   */\r\n  public static buildBetweenSearchParams(arraysWhere: Array<NewWhere>): BetweenSearchParams {\r\n    const includeLower = (arraysWhere[0][1] === '>=') ? true : false;\r\n    const includeUpper = (arraysWhere[1][1] === '<=') ? true : false;\r\n    return {\r\n      field: arraysWhere[0][0],\r\n      lowerBound: arraysWhere[0][2],\r\n      upperBound: arraysWhere[1][2],\r\n      includeLower: includeLower,\r\n      includeUpper: includeUpper\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Builds the filter to select elements for complex queries not supported by Dexie due to IndexedDB limits\r\n   */\r\n  public static buildFilter4Dexie(filter: NewWhere): Filter4Dexie {\r\n    const field = filter[0];\r\n    const operator = filter[1];\r\n    const value = filter[2];\r\n    return (item): boolean => {\r\n      switch (operator) {\r\n        case '===':\r\n          return item[field] === value;\r\n        case '!=':\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] != value;\r\n        case '>':\r\n          return item[field] > value;\r\n        case '>=':\r\n          return item[field] >= value;\r\n        case '<':\r\n          return item[field] > value;\r\n        case '<=':\r\n          return item[field] <= value;\r\n        default:\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] == value;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Chains filters\r\n   */\r\n  public static chainFilters(where: Array<Filter4Dexie>, logic: 'AND' | 'OR'): Filter4Dexie {\r\n    return (item): boolean => {\r\n      if (!where.length)\r\n        return true;\r\n\r\n      let result: boolean = where[0](item);\r\n\r\n      for (const filter of where)\r\n        switch (logic) {\r\n          case 'OR':\r\n            result = result || filter(item);\r\n            break;\r\n          default:\r\n            result = result && filter(item);\r\n        }\r\n\r\n      return result;\r\n    };\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Filter4Dexie, QueryHelper, SuppoertedOperators } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport type NewWhere = [string, SuppoertedOperators, string | number];\r\n\r\n/**\r\n * Builds queries to be executed with Dexie\r\n */\r\nexport class QueryMaker<E> {\r\n\r\n  private logic: 'AND' | 'OR' = 'AND';\r\n  private table: string;\r\n  private collection;\r\n  private dexieFilters: Array<Filter4Dexie> = [];\r\n  private arrWhere: Array<NewWhere> = [];\r\n  private orderBy: string;\r\n  private debug = false;\r\n\r\n  /**\r\n   * Creates an instance of query maker.\r\n   * @param section the section name (aka table) on which to run the query\r\n   * @param [element] optional element on which to perform the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element?: E\r\n  ) {\r\n    this.table = this.dbConnector.DS[this.section].name;\r\n    this.collection = this.dbConnector.dbStore.db[this.table];\r\n  }\r\n\r\n  /**\r\n   * Adds a where clause to `arrWhere`\r\n   */\r\n  public addWhere(new_where: NewWhere): QueryMaker<E> {\r\n    this.arrWhere.push(new_where);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the logic to OR\r\n   */\r\n  public setOrLogic(): QueryMaker<E> {\r\n    this.logic = 'OR';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orderBy property\r\n   */\r\n  public setOrderBy(order: string): void {\r\n    this.orderBy = order;\r\n  }\r\n\r\n  // SELECT\r\n\r\n  /**\r\n   * Determines which method to execute and then performs the select operation \r\n   */\r\n  public async select(): Promise<Array<E>> {\r\n\r\n    if (this.logic !== 'AND')\r\n      return this.complexSelect();\r\n\r\n    const methodToExecute = QueryHelper.methodToExecute(this.dbConnector.DS, this.arrWhere, this.section);\r\n\r\n    this.handleDebug('SELECT', 'methodToExecute', methodToExecute);\r\n\r\n    return this[methodToExecute]();\r\n  }\r\n\r\n  /**\r\n   * Select with Dexie.get\r\n   */\r\n  private async dexieGet(): Promise<Array<E>> {\r\n    const objSearch = {};\r\n    objSearch[this.arrWhere[0][0]] = this.arrWhere[0][2];\r\n    const res = await this.dbConnector.dbStore.db[this.table].get(objSearch);\r\n    const eleToReturn = res ? [res] : [];\r\n    return eleToReturn;\r\n  }\r\n\r\n  /**\r\n   * Selects using the where method of Dexie\r\n   */\r\n  private async dexieWhere(): Promise<Array<E>> {\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(fieldNValues).toArray();\r\n  }\r\n\r\n  /**\r\n   * Select between two values with Dexie\r\n   */\r\n  private async dexieBetween(): Promise<Array<E>> {\r\n    const betweenSearchParams = QueryHelper.buildBetweenSearchParams(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(betweenSearchParams.field)\r\n      .between(betweenSearchParams.lowerBound, betweenSearchParams.upperBound, betweenSearchParams.includeLower, betweenSearchParams.includeUpper)\r\n      .toArray();\r\n  }\r\n\r\n  /**\r\n   * Gets entire collection with Dexie\r\n   */\r\n  private async dexieFullCollection(): Promise<Array<E>> {\r\n    return this.dbConnector.dbStore.db[this.table].toArray();\r\n  }\r\n\r\n  /**\r\n   * Performs a comples select action that is not supported natively by IndexedDB (and so Dexie)\r\n   */\r\n  private complexSelect(): Promise<Array<E>> {\r\n\r\n    this.arrWhere.forEach(arrWhere =>\r\n      this.dexieFilters.push(QueryHelper.buildFilter4Dexie(arrWhere))\r\n    );\r\n\r\n    let all_records = this.dbConnector.dbStore.db[this.table].toCollection();\r\n    const filter = QueryHelper.chainFilters(this.dexieFilters, this.logic);\r\n    all_records = all_records.and(filter);\r\n\r\n    this.handleDebug('SELECT', 'WHERE', this.arrWhere);\r\n\r\n    if (this.orderBy)\r\n      return all_records.sortBy(this.orderBy);\r\n\r\n    return all_records.toArray();\r\n  }\r\n\r\n  // INSERT\r\n\r\n  /**\r\n   * Inserts a new element using `put` method of Dexie\r\n   */\r\n  public async insert(): Promise<void> {\r\n    const copy = cloneDeep(this.element);\r\n    for (const key in this.element)\r\n      if (!this.dbConnector.DS[this.section].fields.includes(key))\r\n        // tslint:disable-next-line:no-dynamic-delete\r\n        delete copy[key];\r\n\r\n    this.handleDebug('INSERT', 'WITH OBJECT', copy);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].put(copy);\r\n  }\r\n\r\n  // UPDATE\r\n\r\n  /**\r\n   * Updates and element using the `update` method of Dexie\r\n   */\r\n  public async update(): Promise<void> {\r\n\r\n    const copy = cloneDeep(this.element);\r\n\r\n    for (const key in this.element)\r\n      if (!this.dbConnector.DS[this.section].fields.includes(key))\r\n        // tslint:disable-next-line:no-dynamic-delete\r\n        delete copy[key];\r\n      else if (!copy[key])\r\n        copy[key] = undefined;\r\n\r\n    this.handleDebug('UPDATE', 'WITH OBJECT', copy);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].update(copy[this.dbConnector.DS[this.section].pk], copy);\r\n  }\r\n\r\n  // COUNT\r\n\r\n  /**\r\n   * Counts the number of items in a collection with Dexie\r\n   */\r\n  public count(): Promise<number> {\r\n    return this.collection.count();\r\n  }\r\n\r\n  // DELETE\r\n\r\n  /**\r\n   * Deletes one or more elements with the `where` clause of Dexie\r\n   */\r\n  public async delete(): Promise<void> {\r\n\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n\r\n    this.handleDebug('DELETE', 'WHERE', this.arrWhere);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].where(fieldNValues).delete();\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears the entire db!!!\r\n   */\r\n  public async clearDb(): Promise<void> {\r\n    const promises = [];\r\n    for (const section in this.dbConnector.DS)\r\n      if (this.dbConnector.DS[section].name) promises.push(this.dbConnector.dbStore.db[this.dbConnector.DS[section].name].clear());\r\n\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /**\r\n   * Clears an entire table!!!\r\n   */\r\n  public async clearTable(): Promise<void> {\r\n    await this.dbConnector.dbStore.db[this.table].clear();\r\n  }\r\n\r\n  /**\r\n   * Logs useful information in the console if `debug` is true\r\n   */\r\n  private handleDebug<T>(action: string, typeToShow: string, toShow: T): void {\r\n    if (this.debug)\r\n      Logger.raw(`EXECUTING ${action} FOR TABLE ${this.table} ${typeToShow} `, toShow);\r\n  }\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements the deletor for IndexedDB\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section of the element to delete\r\n   * @param args the arguments for the query, must include the primary key (`pk`) value\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Perform the delete action on the given element.\r\n   */\r\n  public async autoDelete(): Promise<void> {\r\n    if (this.args[this.dbConnector.DS[this.section].pk]) {\r\n      const aliasElementToDelete = this.args[this.dbConnector.DS[this.section].pk];\r\n      await new QueryMaker(this.dbConnector, this.section)\r\n        .addWhere([this.dbConnector.DS[this.section].pk as string, '=', aliasElementToDelete])\r\n        .delete();\r\n    } else\r\n      Logger.error('Error in autoDelete', 'No PK value was found on the element');\r\n  }\r\n\r\n}\r\n","import { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbStore } from 'app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class';\r\nimport Dexie from 'dexie';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use IndexedDB as plugin\r\n */\r\nexport const INDEXEDDB_PLUGIN: DbObjects<any, Dexie> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements insertor for IndexedDB\r\n */\r\nexport class DbInsertor<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db insertor.\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: E\r\n  ) { }\r\n\r\n  /**\r\n   * Makes sure that all necessary fields are set and performs the insert\r\n   */\r\n  public autoInsert(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .insert()\r\n      .catch(err => { Logger.error('Error in autoinsert: ', err); });\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements selector for IndexedDB\r\n */\r\nexport class DbSelector<E> implements Selector<E> {\r\n  private data: Array<E> = [];\r\n  private qe: QueryMaker<E>;\r\n\r\n  /**\r\n   * Creates an instance of db selector.\r\n   * @param section the section from which to query data\r\n   * @param [args] the optional arguments of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args?: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Retrieves only one element\r\n   */\r\n  public async single(): Promise<E> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    await this.executeSelect();\r\n\r\n    return this.data[0];\r\n  }\r\n\r\n  /**\r\n   * Retrieves multiple elements, returns them in an `Array`\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    this.setOrder();\r\n\r\n    await this.executeSelect();\r\n\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Counts all elements in the section\r\n   * \r\n   * @remarks does not take into consideration argumeents\r\n   */\r\n  public async count(): Promise<number> {\r\n    return new QueryMaker(this.dbConnector, this.section).count();\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of `QueryMaker`\r\n   * \r\n   * @see QueryMaker\r\n   */\r\n  private setUpSelect(): void {\r\n    this.qe = new QueryMaker(this.dbConnector, this.section);\r\n  }\r\n\r\n  /**\r\n   * If the `pk` value is set, it is added as a query argument\r\n   */\r\n  private setQuery(): void {\r\n    if (!this.args)\r\n      return;\r\n\r\n    if (this.args[this.dbConnector.DS[this.section].pk])\r\n      this.qe.addWhere([this.dbConnector.DS[this.section].pk, '=', this.args[this.dbConnector.DS[this.section].pk]]);\r\n  }\r\n\r\n  /**\r\n   * Sets the order of the results\r\n   */\r\n  private setOrder(): void {\r\n    this.qe.setOrderBy(this.dbConnector.DS[this.section].orderBy);\r\n  }\r\n\r\n  /**\r\n   * Executes the select command\r\n   */\r\n  private async executeSelect(): Promise<void> {\r\n    this.data = await this.qe.select();\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Updator } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements updator for IndexedDb\r\n */\r\nexport class DbUpdator<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Creates an instance of db updator.\r\n   * @param section the section of the element to update\r\n   * @param element the full element updated\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Calls `QueryMaker` and updates the element\r\n   */\r\n  public autoUpdate(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .update()\r\n      .catch(err => { Logger.error('Error in autoUpdate', err); });\r\n  }\r\n\r\n}\r\n","import { CLIENT_SEZ_DEFINITIONS, previousVersions } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { INDEXEDDB_PLUGIN } from 'app/libs/db-connector/plugins/indexed-db/exporter.constant';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport React from 'react';\r\n\r\nexport class Startupper {\r\n\r\n  /**\r\n   * The name of the IndexedDB for system data\r\n   */\r\n  private systemDbName = 'anitaDB';\r\n\r\n  public async init(): Promise<void> {\r\n    Logger.info('Anita web app.');\r\n    await this.initSystemIndexedDb(this.systemDbName);\r\n    this.setLoggerDebug();\r\n  }\r\n\r\n  /**\r\n   * Inits IndexedDB for system data\r\n   */\r\n  private async initSystemIndexedDb(indexedDbName: string): Promise<void> {\r\n    dbInstances.system = await new DbConnector(INDEXEDDB_PLUGIN, { previousVersions, indexedDbName }, CLIENT_SEZ_DEFINITIONS, false).init();\r\n  }\r\n\r\n  /**\r\n   * Detect if React is in development mode\r\n   */\r\n  private isReactDev(): boolean {\r\n    return '_self' in React.createElement('div');\r\n  }\r\n\r\n  /**\r\n   * Sets logger debug\r\n   */\r\n  private setLoggerDebug(): void {\r\n    Logger.debug = this.isReactDev();\r\n  }\r\n\r\n}","import { dbInstances } from 'app/data/db-instances.const';\r\n\r\nexport function isProjectLoaded(projectId: string): boolean {\r\n  // The project has not been loaded yet\r\n  // For now we only suppor the FileSystem, which requires user input to load the project\r\n  // So we set the project to undefined and navigate to the project selection page\r\n  // TODO: once other storage types are supported, we can try to load the project\r\n  if (!dbInstances[projectId])\r\n    return false;\r\n\r\n  return true;\r\n}","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { Section, SectionElement } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Builds the form element with the info on the parent section for ParentsSelector\r\n * \r\n * @see ParentsSelector\r\n */\r\nexport class ParentInfoFormEleBuilder {\r\n\r\n  private parentInfoFormModel: FormFieldsModel<SectionElement>;\r\n  private options: Array<OptionKeysModel> = [];\r\n\r\n  constructor(\r\n    private childOf: Array<string>,\r\n    private sections?: Array<Section>\r\n\r\n  ) { }\r\n\r\n  public build(): FormFieldsModel<SectionElement> {\r\n    this.setOptions();\r\n    this.setParentSelector();\r\n    return this.parentInfoFormModel;\r\n  }\r\n\r\n  private setOptions(): void {\r\n    this.childOf.forEach(sectionName => {\r\n      const sectionInfo = this.sections.find(section => section.id === sectionName);\r\n      this.options.push({ value: sectionName, label: sectionInfo.title });\r\n    });\r\n  }\r\n\r\n  private setParentSelector(): void {\r\n    this.parentInfoFormModel = {\r\n      componentCode: FORM_COMPONENTS_CODES.parentsSelector,\r\n      fieldName: RESERVED_FIELDS.parentsInfo,\r\n      label: 'Parent elements',\r\n      options: this.options\r\n    };\r\n  }\r\n\r\n}","import { Section } from 'app/data/model/project-info';\r\n\r\nexport function findSectionById(sections: Array<Section>, toFindId: string): Section {\r\n  return sections.find(section => section.id === toFindId);\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport const FormEleContainer = ({ children, width }: { children: ReactNode, width: string | number }) => (\r\n  <div className={`${width} my-3 px-2 inline-block align-top`}>\r\n    {children}\r\n  </div>\r\n)","export const FormElementLabel = ({ label }: { label: string }) => (\r\n  <label className=\"w-full block mb-0 ml-1 text-gray-700 text-sm\">{label}</label>\r\n)","import { IValidStateForEle } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\nimport { useEffect } from 'react';\r\n\r\nexport const RequiredField = ({ formEle, element, fieldId, touched }: IValidatorsConatinerProps) => {\r\n\r\n  const value = element[formEle.fieldName];\r\n\r\n  useEffect(() => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.setValidStateForEle, payload: {\r\n        formEleId: `${fieldId}-required`,\r\n        valid: value !== '' && value !== undefined && value !== null\r\n      } as IValidStateForEle\r\n    });\r\n  }, [value, fieldId]);\r\n\r\n  if (value || !touched)\r\n    return (<div className=\"ml-1 text-xs italic text-gray-400\">Required</div>);\r\n\r\n  return (<div className=\"ml-1 text-red-600 text-xs italic\">This field is required</div>);\r\n\r\n};\r\n","import { RequiredField } from 'app/ui-react-components/shared-components/forms-automator/validators/required-field.component';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\n\r\nexport const ValidatorsContainer = (props: IValidatorsConatinerProps) => {\r\n\r\n  const validators = [];\r\n\r\n  if (props.formEle.required)\r\n    validators.push(<RequiredField key=\"required-validator\" {...props} />)\r\n\r\n  return (\r\n    <span>\r\n      {validators}\r\n    </span>\r\n  );\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicCheckbox = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"checkbox\"\r\n        checked={(Reflect.has(element, formEle.fieldName) && typeof element[formEle.fieldName] === 'boolean') ? element[formEle.fieldName] : false}\r\n        className={`rounded mt-3 ${isInValid && touched ? \"text-red-600 border border-red-600\" : \"text-prussian-blue-500\"}`}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.checked)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","// Converts a col size in the range of 1-12 to the equivalente TailwindCSS width class\r\n// We can't use string concatenation here because it will break the build\r\n// See optimizing for production at https://tailwindcss.com/docs/optimizing-for-production\r\nexport function calcWidth(width: string): string {\r\n  switch (width) {\r\n    case '1':\r\n      return 'w-full lg:w-1/12';\r\n    case '2':\r\n      return 'w-full lg:w-2/12';\r\n    case '3':\r\n      return 'w-full lg:w-3/12';\r\n    case '4':\r\n      return 'w-full lg:w-4/12';\r\n    case '5':\r\n      return 'w-full lg:w-5/12';\r\n    case '6':\r\n      return 'w-full lg:w-6/12';\r\n    case '7':\r\n      return 'w-full lg:w-7/12';\r\n    case '8':\r\n      return 'w-full lg:w-8/12';\r\n    case '9':\r\n      return 'w-full lg:w-9/12';\r\n    case '10':\r\n      return 'w-full lg:w-10/12';\r\n    case '11':\r\n      return 'w-full lg:w-11/12';\r\n    case '12':\r\n      return 'w-full lg:w-12/12';\r\n    default:\r\n      return 'w-full';\r\n  }\r\n}","export const FORM_ELEMENTS_CSS_CLASSES = \"rounded-md border border-gray-300 hover:border-gray-400 focus:border-gray-200 focus:shadow-inner focus:bg-white focus:ring-0\";\r\nexport const FORM_ELEMENTS_CSS_CLASSES_ERR = \"rounded-md border-2 border-red-300 hover:border-red-400 focus:border-red-200 focus:shadow-inner focus:bg-white focus:ring-0\";","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"text\"\r\n        placeholder={formEle['label']}\r\n        disabled={formEle.disabled ? formEle.disabled : false}\r\n        required={formEle.required ? formEle.required : false}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicRadio, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/* eslint-disable eqeqeq */\r\n\r\nexport const BasicRadio = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicRadio<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  return (\r\n    <FormEleContainer key={formEle.fieldName} width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <div className=\"mt-2 pl-1\"\r\n      >\r\n        {formEle.options.map(option => {\r\n          return (\r\n            <div key={option.value} className=\"mb-2\">\r\n              <input\r\n                type=\"radio\"\r\n                value={option.value}\r\n                name={formEle.fieldName}\r\n                checked={element[formEle.fieldName] == option.value}\r\n                className={`${isInValid && touched ? \"bg-red-600 text-red-600\" : \"bg-gray-200 text-prussian-blue-500\"} mr-2 border-transparent focus:border-gray-500 focus:text-prussian-blue-600 focus:ring-prussian-blue-600`}\r\n                onChange={event => handleChange(formEle.fieldName, event.target['value'])}\r\n                onBlur={() => setTouched(true)}\r\n              /> {option.label}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicSelect = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <select\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      >\r\n        <option value=\"\">Please chose one</option>\r\n        {formEle.options.map((option, index) => (\r\n          <option\r\n            key={index}\r\n            value={option.value}\r\n          >{option.label}</option>)\r\n        )}\r\n      </select>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicTextarea = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <textarea\r\n        name={formEle.fieldName}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { Option } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\n\r\n/**\r\n * Converts the options used by react-select to a string for storing it in the DB\r\n * We do not want to store the whole object, only the values, as the label might change.\r\n */\r\nexport function parentInfoObjToString(parentInfoObj: Array<Option>): Array<string> {\r\n  const parentsInfo = [];\r\n  parentInfoObj.forEach(parentInfo => {\r\n    parentsInfo.push(parentInfo.value);\r\n  });\r\n  return parentsInfo;\r\n}","export interface Option { value: string, label: string }\r\n\r\ninterface OptionKeysModelGroup {\r\n  label: string;\r\n  options: Array<Option>\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObjForOptionsGroup(parentsInfo: Array<string>, selectOptions: Array<OptionKeysModelGroup>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the options group by recourevily searching the options by value\r\n    const group = selectOptions.find(group => group.options.find(opt => opt.value === parentInfo));\r\n\r\n    if (!group) return;\r\n\r\n    // find the option by searching the options of the group\r\n    const option = group.options.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with NON grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObj(parentsInfo: Array<string>, selectOptions: Array<Option>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the option by searching the options of the select element\r\n    const option = selectOptions.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}","import { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObj } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ChildOfSelectorForSection = ({ formEle, element, handleChange, sectionId }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const currentEditedProjectSections = useSelector((state: AnitaStore) => state.formProject.project[RESERVED_UDS_KEYS._sections]);\r\n  const [selectOptions, setSelectOptions] = useState<Array<Option>>([]);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const buildOptions = () => {\r\n\r\n      if (!Array.isArray(currentEditedProjectSections))\r\n        return;\r\n\r\n      const selectableSections: Array<Option> = [];\r\n      currentEditedProjectSections.forEach(sectionDec => {\r\n        if (sectionDec.id !== sectionId)\r\n          selectableSections.push({\r\n            value: sectionDec.id,\r\n            label: sectionDec.title\r\n          });\r\n      });\r\n      setSelectOptions(selectableSections);\r\n    }\r\n\r\n    if (isMounted)\r\n      buildOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [currentEditedProjectSections, currentEditedProjectSections.length, sectionId]);\r\n\r\n  const handleChangeInChildOfSelectorForSection = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObj(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInChildOfSelectorForSection}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DatePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"date\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DateTimePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"datetime-local\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const HiddenInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (<input key={formEle.fieldName}\r\n    name={formEle.fieldName}\r\n    type=\"hidden\"\r\n    value={element[formEle.fieldName]}\r\n    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleChange(formEle.fieldName, event.target.value)} />)\r\n};","const SUCCESS_BG_COLOR = \"bg-green-500\";\r\nconst DANGER_BG_COLOR = \"bg-red-500\";\r\nconst SUCCESS_TEXT_COLOR = \"text-green-700\";\r\nconst DANGER_TEXT_COLOR = \"text-red-700\";\r\nconst SUCCESS_BORDER_COLOR = \"border-green-500\";\r\nconst DANGER_BORDER_COLOR = \"border-red-500\";\r\n\r\nexport const SUCCESS_BTN_OUTLINE = `bg-transparent hover:${SUCCESS_BG_COLOR} ${SUCCESS_TEXT_COLOR} font-semibold hover:text-white border ${SUCCESS_BORDER_COLOR} hover:border-transparent rounded`;\r\nexport const DANGER_BTN_OUTLINE = `bg-transparent hover:${DANGER_BG_COLOR} ${DANGER_TEXT_COLOR} font-semibold hover:text-white border ${DANGER_BORDER_COLOR} hover:border-transparent rounded`;","import { PROJECT_EDITOR_FORM_MODELS_CONST } from 'app/data/form-models/project-editor-form-models.const';\r\nimport { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { DANGER_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormFieldsModel, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n/**\r\n * Checks if the OptionKeysModel was already in the section before we started editing.\r\n * We can't rely on the general edit mode of the form because we might have new options in edit mode.\r\n * @param section the section to which the current OptionKeysModel belongs\r\n * @param indexFormElement the index of the form model at which the current OptionKeysModel is, as we want to check only on the same form model\r\n * @param option the option to check\r\n * @returns the form model to use. We want different form models for adding and editing to disable fields that should not be altered.\r\n */\r\nfunction getCanEdit(section: Section, indexFormElement: number, value: any): boolean {\r\n  if (!section || !section.formModel[indexFormElement] || !section.formModel[indexFormElement]['options'] || !section.formModel[indexFormElement]['options'].length)\r\n    return true;\r\n\r\n  return !section.formModel[indexFormElement]['options'].some((opt: OptionKeysModel) => opt.value === value);\r\n}\r\n\r\nexport const OptionsMakerSingleOption = (props: ICommonFormEleProps<FormFieldsModel<OptionKeysModel>>) => {\r\n  const { formEle, element, handleOptionsChange, handleClickDeleteOption, indexSection, indexFormElement, index, optionElement } = props;\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const section = useSelector((store: AnitaStore) => store.formProject.original[RESERVED_UDS_KEYS._sections][indexSection]);\r\n  const formModelToUse: Array<FormFieldsModel<any>> = useMemo(() => {\r\n    const canEdit = getCanEdit(section, indexFormElement, optionElement.value);\r\n    return canEdit ?\r\n      PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].optionEles.newItem :\r\n      PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].optionEles.newItem;\r\n  }, [section, indexFormElement, optionElement.value, projectEditorMode]);\r\n\r\n  return (\r\n    <li>\r\n      <FormAutomator\r\n        formModel={formModelToUse}\r\n        element={optionElement}\r\n        handleChange={handleOptionsChange.bind(undefined, index, optionElement)} />\r\n      {(typeof handleClickDeleteOption === 'function' && element[formEle.fieldName].length > 2) && <div className=\"inline-block w-full lg:w-1/12 px-2 lg:pl-1 lg:pr-3 lg:align-bottom mb-8\">\r\n        <button\r\n          onClick={handleClickDeleteOption.bind(undefined, index)}\r\n          data-tip data-for={`deleteOption-${index}`}\r\n          className={`w-full py-1 ${DANGER_BTN_OUTLINE}`}\r\n        ><i className=\"bi-trash hidden lg:block\"></i><span className=\"lg:hidden\">Delete option {index + 1}</span></button>\r\n        <ReactTooltip id={`deleteOption-${index}`} effect=\"solid\">\r\n          <span>Delete option {index + 1}</span>\r\n        </ReactTooltip>\r\n      </div>}\r\n    </li>\r\n  )\r\n};\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormFieldsModel, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { OptionsMakerSingleOption } from 'app/ui-react-components/shared-components/forms-automator/form-fields/options-maker-single-option.component';\r\n\r\nexport const OptionsMaker = (props: ICommonFormEleProps<FormFieldsModel<OptionKeysModel>>) => {\r\n\r\n  const { formEle, element, handleOptionsChange, handleClickAddOption } = props;\r\n\r\n  if (typeof handleOptionsChange !== 'function')\r\n    return null;\r\n\r\n  if (!element[formEle.fieldName] || !Array.isArray(element[formEle.fieldName]) || !element[formEle.fieldName].length)\r\n    element[formEle.fieldName] = Array.from(Array(2), (a, i) => ({ label: '', value: i + 1 }));\r\n\r\n  return (\r\n    <div className=\"mt-6 pl-10 py-4 bg-gray-50 rounded-lg\">\r\n      <p className=\"-ml-5 font-semibold mb-1\">Choices</p>\r\n      <ol className=\"list-decimal\">\r\n        {element[formEle.fieldName].map((optionElement: OptionKeysModel, index) =>\r\n          <OptionsMakerSingleOption key={index} index={index} optionElement={optionElement} {...props} />\r\n        )}\r\n      </ol>\r\n      {(typeof handleClickAddOption === 'function') &&\r\n        <div className=\"flex items-end\">\r\n          <button\r\n            className={`ml-auto mr-4 mt-3 py-2 px-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddOption}\r\n          >\r\n            Add option\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport function findFirstUserDefinedField(sectionFormModel: FormModel): number {\r\n\r\n  let firstUserDefinedFieldInfo: number = undefined;\r\n\r\n  sectionFormModel.some((formEle, index) => {\r\n    if (RESERVED_FIELDS[formEle.fieldName])\r\n      return false;\r\n\r\n    firstUserDefinedFieldInfo = index;\r\n    return true;\r\n  });\r\n\r\n  return firstUserDefinedFieldInfo;\r\n}\r\n","// Removes non ascii characters from a string and replaces with ascii chars, plus replaces spaces with -\r\nexport function cleanString(source: string): string {\r\n  let r = source.toLowerCase();\r\n  const non_asciis = {\r\n    a: '[àáâãäå]',\r\n    ae: 'æ',\r\n    c: 'ç',\r\n    e: '[èéêë]',\r\n    i: '[ìíîï]',\r\n    n: 'ñ',\r\n    o: '[òóôõö]',\r\n    oe: 'œ',\r\n    u: '[ùúûűü]',\r\n    y: '[ýÿ]'\r\n  };\r\n  for (const i in non_asciis)\r\n    r = r.replace(new RegExp(non_asciis[i], 'g'), i);\r\n\r\n  return r.replace(/\\s/g, '-')\r\n    .replace(/[^\\w-]/gi, '');\r\n}\r\n\r\n/**\r\n * Asyncs forEach. Unlike native JS forEach, this one awaits each callback to resolve befofore iterating to the next element of the array\r\n * @param array the array to loop\r\n * @param callback the function to call on each element of the array\r\n */\r\nexport async function asyncForEach<T>(array: Array<T>, callback: (item: T, index: number, arr: Array<T>) => Promise<any>): Promise<void> {\r\n  const totalLength = array.length;\r\n  for (let index = 0; index < totalLength; index++)\r\n    await callback(array[index] as T, index, array);\r\n}\r\n\r\n/**\r\n * Gets the current utcdate and time as an ISO string\r\n */\r\nexport function getUTCDateTime(): string {\r\n  return new Date(new Date().toUTCString()).toISOString();\r\n}\r\n\r\n/**\r\n * Gets the current date and time as an ISO string\r\n */\r\nexport function getDateTime(): string {\r\n  return new Date(new Date()).toISOString();\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { OptionKeysModel, OptionKeysModelGroup } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, SectionElement, SystemData } from 'app/data/model/project-info';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class OptionsForParentsSelector {\r\n\r\n  private optionsGroups: Array<OptionKeysModelGroup> = [];\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private options: Array<OptionKeysModel>\r\n  ) {\r\n  }\r\n  public async buildOptions(): Promise<Array<OptionKeysModelGroup>> {\r\n    await asyncForEach(this.options, async group => {\r\n      const sectionEles = await dbInstances[this.project[RESERVED_UDS_KEYS._settings][0].id].callSelector<SectionElement>(group.value).multiple();\r\n      if (sectionEles.length)\r\n        this.createGroupOption(group.value as string, group.label, sectionEles);\r\n    });\r\n\r\n    return this.optionsGroups;\r\n  }\r\n\r\n  private createGroupOption(sectionId: string, sectionLabel: string, sectionEles: Array<SectionElement>): void {\r\n    const options: Array<OptionKeysModel> = [];\r\n    const section = findSectionById(this.project[RESERVED_UDS_KEYS._sections], sectionId);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    sectionEles.forEach(ele => options.push({\r\n      value: `${sectionId}|${ele.id}`,\r\n      label: ele[section.formModel[indexFirstUserFiield].fieldName]\r\n    }));\r\n    this.optionsGroups.push({\r\n      label: sectionLabel,\r\n      options\r\n    });\r\n  }\r\n}","import { OptionKeysModelGroup } from 'app/data/model/form-model-commons';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { OptionsForParentsSelector } from 'app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObjForOptionsGroup } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ParentsSelector = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [selectOptions, setSelectOptions] = useState<Array<OptionKeysModelGroup>>([]);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const getSelectOptions = async () => {\r\n      const options = await new OptionsForParentsSelector(project, formEle.options).buildOptions();\r\n\r\n      if (isMounted)\r\n        setSelectOptions(options);\r\n    };\r\n\r\n\r\n    if (isMounted)\r\n      getSelectOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [project, formEle.options]);\r\n\r\n  const handleChangeInParentsSelector = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObjForOptionsGroup(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInParentsSelector}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { Prerequisites } from 'app/data/model/form-model-commons';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class PrerequisitesChecker<ELEMENT extends Partial<SupportedFormsTypes>> {\r\n\r\n  private isIntegrated = false;\r\n\r\n  constructor(\r\n    private formEle: FormFieldsModel<Partial<SupportedFormsTypes>>,\r\n    private objValues: Partial<ELEMENT>\r\n  ) { }\r\n\r\n  public integrates(): boolean {\r\n    if (!this.formEle.prerequisites || !this.formEle.prerequisites.length)\r\n      return true;\r\n\r\n    this.loopPrerequisites();\r\n\r\n    return this.isIntegrated;\r\n  }\r\n\r\n  private loopPrerequisites(): void {\r\n    let counter = 0;\r\n    while (this.isIntegrated === false && counter < this.formEle.prerequisites.length) {\r\n      this.checkPrerequisites(this.formEle.prerequisites[counter]);\r\n      counter++;\r\n    }\r\n  }\r\n\r\n  private checkPrerequisites(prereq: Prerequisites): void {\r\n    for (const key in prereq)\r\n      // We use a relaxed equality check here, because the value can be a string or a number\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this.objValues[key] && (prereq[key].filter(prereqValue => prereqValue == this.objValues[key]).length > 0))\r\n        this.setIsIntegrated();\r\n  }\r\n\r\n  private setIsIntegrated(): void {\r\n    this.isIntegrated = true;\r\n  }\r\n\r\n}\r\n","import { formElesSwitcher } from 'app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function';\r\nimport { PrerequisitesChecker } from 'app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useMemo } from 'react';\r\n\r\nexport const FieldSelector = (props: ICommonFormEleProps) => {\r\n\r\n  const shouldRender = useMemo(() => new PrerequisitesChecker(props.formEle, props.element).integrates(), [props.formEle, props.element]);\r\n\r\n  if (shouldRender)\r\n    return formElesSwitcher(props.formEle.fieldName, props.formEle.componentCode, props);\r\n\r\n  return null;\r\n\r\n}","import { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { BasicCheckbox } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component';\r\nimport { BasicInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component';\r\nimport { BasicRadio } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component';\r\nimport { BasicSelect } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component';\r\nimport { BasicTextarea } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component';\r\nimport { ChildOfSelectorForSection } from 'app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component';\r\nimport { DatePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component';\r\nimport { DateTimePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component';\r\nimport { IBasicRadio, IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { HiddenInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component';\r\nimport { OptionsMaker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component';\r\nimport { ParentsSelector } from 'app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component';\r\n\r\nexport function formElesSwitcher(key: string, componentCode: FORM_COMPONENTS_CODES, props: ICommonFormEleProps) {\r\n  switch (componentCode) {\r\n    case FORM_COMPONENTS_CODES.hiddenInput:\r\n      return <HiddenInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n      return <BasicInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n      return <BasicSelect key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return <BasicTextarea key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return <BasicCheckbox key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return <BasicRadio key={key} {...props as ICommonFormEleProps<IBasicRadio<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return <DatePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return <DateTimePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.optionsMaker:\r\n      return <OptionsMaker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.childOfSelectorForSection:\r\n      return <ChildOfSelectorForSection key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.parentsSelector:\r\n      return <ParentsSelector key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    default:\r\n      return <BasicInput key={key} {...props} />\r\n  }\r\n}","import { Section } from 'app/data/model/project-info';\r\nimport { FieldSelector } from 'app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component';\r\n\r\nexport interface IFormAutomatorProps {\r\n  formModel: Section['formModel'];\r\n  element: { [key: string]: any };\r\n  handleChange: (...args: any) => void;\r\n  [customProps: string]: any;\r\n\r\n}\r\n\r\nexport const FormAutomator = (props: IFormAutomatorProps) => {\r\n\r\n  return (\r\n    <span>\r\n      {props.formModel.map((formEle) => (\r\n        <FieldSelector key={formEle.fieldName} formEle={formEle} {...props} />\r\n      ))}\r\n    </span>\r\n  )\r\n\r\n}","import { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { ParentInfoFormEleBuilder } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const FormElementManager = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const sections = project[RESERVED_UDS_KEYS._sections];\r\n  const section = findSectionById(sections, sectionId);\r\n\r\n  const element = useSelector((store: AnitaStore) => store.formElement.element);\r\n\r\n  const handleChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: { ...element, [fieldName]: value } });\r\n  }\r\n\r\n  return (\r\n    <form name=\"element-form\">\r\n      {section.childOf && section.childOf.length > 0 && <FormAutomator\r\n        formModel={[new ParentInfoFormEleBuilder(section.childOf, sections).build()]}\r\n        element={element}\r\n        handleChange={handleChange} />\r\n      }\r\n      <FormAutomator formModel={section.formModel} element={element} handleChange={handleChange} />\r\n    </form>\r\n  )\r\n\r\n};","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\n/**\r\n * Saves a new element in a section of the project, stores the project on disk and dispatches the changes to the current state\r\n */\r\nexport class ElementSaver {\r\n\r\n  /**\r\n   * Reference to section model in DS for easier access in code\r\n   */\r\n  private sectionModelInDS: SectionModel<SectionElement>;\r\n\r\n  /**\r\n   * Creates an instance of element saver.\r\n   * @param projectData the unmodified project data\r\n   * @param sectionId the id of the section of the element to save\r\n   * @param element the element to save\r\n   */\r\n  constructor(\r\n    private projectId: string,\r\n    private sectionId: string,\r\n    private element: SectionElement,\r\n    private mode: EDITOR_MODE\r\n  ) { }\r\n\r\n  /**\r\n   * Deep clones the project, adds/updated the element in the project to save and finally save the project\r\n   */\r\n  public async save(): Promise<SectionElement> {\r\n    this.setSectionModel();\r\n    this.checkAndSetPk();\r\n    this.setDateCreation();\r\n    this.deleteEmptyProps();\r\n\r\n    if (this.mode === EDITOR_MODE.add)\r\n      await dbInstances[this.projectId].callInsertor(this.sectionId, this.element).autoInsert();\r\n    else {\r\n      this.setLastModifiedValueIfInEditMode();\r\n      await dbInstances[this.projectId].callUpdator(this.sectionId, this.element).autoUpdate();\r\n    }\r\n\r\n    return this.element;\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the section model from the DS stored in DbConnector\r\n   */\r\n  private setSectionModel(): void {\r\n    this.sectionModelInDS = dbInstances[this.projectId].DS[this.sectionId];\r\n  }\r\n\r\n  /**\r\n   * Checks if a `pk` value is set, if not one is created.\r\n   */\r\n  private checkAndSetPk(): void {\r\n    if (!this.element[this.sectionModelInDS.pk])\r\n      this.element[this.sectionModelInDS.pk] = IdCreator.make(this.sectionModelInDS.name);\r\n  }\r\n\r\n  /**\r\n   * Deletes all props from the element whose value is an empty string\r\n   */\r\n  private deleteEmptyProps(): void {\r\n    for (const prop in this.element)\r\n      if (this.element[prop] === '')\r\n        delete this.element[prop];\r\n  }\r\n\r\n  /**\r\n   * Checks if `dateCreation` value is set, if not one is created.\r\n   */\r\n  private setDateCreation(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.dateCreation) && !this.element[RESERVED_FIELDS.dateCreation])\r\n      this.element[RESERVED_FIELDS.dateCreation] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  /**\r\n   * Sets the lastModified value if in edit mode\r\n   */\r\n  private setLastModifiedValueIfInEditMode(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.lastModified))\r\n      this.element[RESERVED_FIELDS.lastModified] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n}\r\n","import { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { ElementSaver } from 'app/libs/project-helpers/section-elements-handlers/element-saver.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const SaveElement = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const element = useSelector((state: AnitaStore) => state.formElement.element);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const navigate = useNavigate();\r\n\r\n  const handleClick = async () => {\r\n    const mode = element.id ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n    await new ElementSaver(project[RESERVED_UDS_KEYS._settings][0].id, sectionId, element, mode).save();\r\n    navigate(-1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-6 mb-3 px-2 flex justify-end\">\r\n      <button\r\n        className=\"py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n        onClick={() => navigate(-1)}\r\n      >Cancel</button>\r\n      <button\r\n        disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n        className=\"py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500\"\r\n        onClick={handleClick}\r\n      >Save</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { ReactNode } from 'react';\r\nexport const MainContentContainer = ({ children, headerText }: { children: ReactNode, headerText?: string }) => (\r\n  <div className=\"p-4 bg-white rounded shadow\">\r\n    {headerText ? <div className=\"mt-3\">\r\n      <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n      <hr className=\"mt-4\" />\r\n    </div> : null}\r\n    <div className=\"pt-4\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n)","export const Loader = () => (\r\n  <svg className=\"absolute top-1/2 left-2/4 animate-spin -ml-1 mr-3 h-5 w-5 text-prussian-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n  </svg>\r\n\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormElementManager } from 'app/ui-react-components/project/add-edit-components/form-element-manager.component';\r\nimport { SaveElement } from 'app/ui-react-components/project/add-edit-components/save-element.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditSectionElement = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.elementId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = (mode === EDITOR_MODE.edit) ? params[URL_PARAMS.elementId] : null;\r\n\r\n  const [element, setElement] = useState<Partial<SectionElement> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (!isProjectLoaded(projectId) || !projectId || !sectionId)\r\n      return setElement(undefined);\r\n\r\n    if (mode === EDITOR_MODE.add)\r\n      return setElement({});\r\n\r\n    const fetchElement = async () => {\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n      if (isMounted)\r\n        setElement(element);\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchElement();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId, sectionId, elementId]);\r\n\r\n  if (element === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Element' : 'Edit Element';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: element });\r\n\r\n  return (\r\n    <MainContentContainer headerText={headerText}>\r\n      {element === null && <Loader />}\r\n      {element !== null && <FormElementManager sectionId={sectionId} />}\r\n      {element !== null && <SaveElement sectionId={sectionId} />}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Loads the list of projects on the current device\r\n */\r\nexport class ProjectsListLoader {\r\n\r\n  /**\r\n   * The list of projects to sore in the current state\r\n   */\r\n  private projectList: Array<LocalProjectSettings> = [];\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB and adds them to the current state\r\n   */\r\n  public async load(): Promise<void> {\r\n    await this.loadFromLocalDB();\r\n    this.dispatchProjectList(this.projectList);\r\n  }\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB with db-connector\r\n   */\r\n  private async loadFromLocalDB(): Promise<void> {\r\n    this.projectList = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects).multiple();\r\n  }\r\n\r\n  /**\r\n   * Dispatchs the project list to the current state\r\n   */\r\n  private dispatchProjectList(payload: Array<LocalProjectSettings>): void {\r\n    store.dispatch(({ type: REDUX_ACTIONS.setProjectList, payload }));\r\n  }\r\n\r\n}\r\n","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\n\r\n/**\r\n * Deletes a project from the current device\r\n */\r\nexport class ProjectDeletor {\r\n\r\n  /**\r\n   * Creates an instance of project deletor.\r\n   * @param project the settings of the project to delete\r\n   */\r\n  constructor(\r\n    private project: ProjectSettings\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes the project and reloads the list of projects\r\n   */\r\n  public async delete(): Promise<void> {\r\n    await this.doDelete();\r\n    this.reloadProjectList();\r\n  }\r\n\r\n  /**\r\n   * Performs the delete action on IndexedDB with db-connector\r\n   */\r\n  private async doDelete(): Promise<void> {\r\n    await dbInstances.system.callDeletor<ProjectSettings>(CLIENT_SECTIONS.projects, { id: this.project.id }).autoDelete();\r\n  }\r\n\r\n  /**\r\n   * Reloads the project list from scratch\r\n   */\r\n  private reloadProjectList(): void {\r\n    new ProjectsListLoader().load();\r\n  }\r\n\r\n}\r\n","import { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectDeletor } from 'app/libs/project-helpers/project-handlers/project-deletor.class';\r\nimport { useState } from 'react';\r\n\r\nexport const DeleteProjectButton = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  return (\r\n    <span>\r\n      <button onClick={() => setIsModalOpen(true)} className=\"px-4 py-2 text-red-700 inline-flex items-center md:mb-2 lg:mb-0 rounded bg-red-700 bg-opacity-10 hover:bg-opacity-20 text-sm\">\r\n        <i className=\"bi-trash\"></i><span className=\"ml-2 hidden lg:inline-block\">Delete project</span>\r\n      </button>\r\n      {isModalOpen && <DeleteProjectModal project={project} closeFn={() => setIsModalOpen(false)} />}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport const DeleteProjectModal = ({ project, closeFn }: { project: ProjectSettings, closeFn: () => void }) => (\r\n  <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n      <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n      <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n      <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n        <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n          <div className=\"sm:flex sm:items-start\">\r\n            <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\r\n              <i className=\" text-red-600 bi-exclamation-triangle text-xl -mt-1\"></i>\r\n\r\n            </div>\r\n            <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\r\n                Delete Project\r\n              </h3>\r\n              <div className=\"mt-2\">\r\n                <p className=\"text-sm text-gray-500\">\r\n                  Are you sure you want to delete this project?<br /><br />All project data will be permanently removed from this device. This action cannot be undone.<br /><br />Data stored on other devices will not be affected.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n          <button onClick={() => new ProjectDeletor(project).delete()} type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm\">\r\n            Delete\r\n          </button>\r\n          <button onClick={closeFn} type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\n\r\n/**\r\n * Accepts a url and a param and replaces all the occurences of the url param with a given value\r\n */\r\nexport function urlParamFiller(url: string, paramsToFill: Array<{ name: URL_PARAMS; value: string }>): string {\r\n  let result = url;\r\n  paramsToFill.forEach(params => { result = result.replace(new RegExp(`:${params.name}`, 'g'), params.value) });\r\n  return result;\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const EditButton = ({ project }: { project: ProjectSettings }) => (\r\n  <Link to={urlParamFiller(ANITA_URLS.projectEdit, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-gray-800 mr-3 inline-flex items-center ml-auto leading-none text-sm bg-gray-100 hover:bg-gray-200 rounded\">\r\n    <i className=\"bi-pencil\"></i> <span className=\"ml-2 hidden sm:inline-block\">Edit Project</span>\r\n  </Link>\r\n)","import { ReactNode } from 'react';\r\n\r\nexport const CardFooterItemsEnd = ({ children }: { children: ReactNode }) => (\r\n  <div className=\"flex items-end flex-wrap mt-6\">\r\n    {children}\r\n  </div>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nconst LoadedProject = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"p-6\">\r\n    <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Description</p>\r\n    <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n    <p className=\"text-md\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.dateCreation))}</p>\r\n\r\n    <CardFooterItemsEnd>\r\n      <DeleteProjectButton project={project} />\r\n      <EditButton project={project} />\r\n    </CardFooterItemsEnd>\r\n\r\n  </div>\r\n)\r\n\r\nexport const ProjectDetails = () => {\r\n\r\n  const urlParams = useParams();\r\n  const projectId = urlParams[URL_PARAMS.projectId];\r\n  const [project, setElement] = useState<ProjectSettings>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadProject = async () => {\r\n\r\n      if (!isProjectLoaded(projectId))\r\n        return setElement(undefined);\r\n\r\n      const project = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_UDS_KEYS._settings).single();\r\n      if (isMounted)\r\n        setElement(project);\r\n    }\r\n\r\n    if (isMounted)\r\n      loadProject();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectId]);\r\n\r\n  // If there is no DB instance loaded, for now we just redirect to the project list\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  return (\r\n    <div className=\"relative border-2 border-gray-200 border-opacity-60 rounded bg-white\" style={{ minHeight: \"200px\" }}>\r\n      {(project === null) ? <Loader /> : <LoadedProject project={project} />}\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport {\r\n  ParentInfoForDetailsView,\r\n  RESERVED_UDS_KEYS,\r\n  SectionElement,\r\n  SystemData\r\n  } from 'app/data/model/project-info';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class GetParentInfoForDetailsView {\r\n\r\n  private parentInfoForDetailsView: Array<ParentInfoForDetailsView> = [];\r\n\r\n  constructor(\r\n    private listOfParents: Array<string>,\r\n    private projectId: string,\r\n    private sections: SystemData[RESERVED_UDS_KEYS._sections]\r\n  ) { }\r\n\r\n  public async get(): Promise<Array<ParentInfoForDetailsView>> {\r\n    await asyncForEach(this.listOfParents, async sectionIdElementId => await this.processElement(sectionIdElementId));\r\n    return this.parentInfoForDetailsView;\r\n  }\r\n\r\n  private async processElement(sectionIdElementId: string): Promise<void> {\r\n    const arrInfo = sectionIdElementId.split('|');\r\n    const element = await dbInstances[this.projectId].callSelector<SectionElement>(arrInfo[0], { [RESERVED_FIELDS.id]: arrInfo[1] }).single();\r\n    const section = findSectionById(this.sections, arrInfo[0]);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    this.parentInfoForDetailsView.push({\r\n      sectionId: arrInfo[0],\r\n      element,\r\n      txt: element[section.formModel[indexFirstUserFiield].fieldName]\r\n    });\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ParentInfoForDetailsView, Section } from 'app/data/model/project-info';\r\nimport { GetParentInfoForDetailsView } from 'app/libs/project-helpers/get-parent-info-for-details-view.class';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ParentsLinkShower = ({ projectId, parentsInfo, sections }: { projectId: string, parentsInfo: Array<string>, sections: Array<Section> }) => {\r\n\r\n  const [parents, setParents] = useState<Array<ParentInfoForDetailsView>>([]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getParents = async () => {\r\n      const parents = await new GetParentInfoForDetailsView(parentsInfo, projectId, sections).get();\r\n      if (isMounted) {\r\n        setParents(parents);\r\n      }\r\n    }\r\n\r\n    if (isMounted)\r\n      getParents();\r\n\r\n    return (): void => { isMounted = false; };\r\n  }, [parentsInfo, projectId, sections]);\r\n\r\n  return (\r\n    <div className=\"p-3 pt-0\">\r\n      <p className=\"text-sm text-gray-500 mb-2\">Parent elements:</p>\r\n      {parents.map((parent, index) => (\r\n        <Link to={urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n          { name: URL_PARAMS.projectId, value: projectId },\r\n          { name: URL_PARAMS.sectionId, value: parent.sectionId },\r\n          { name: URL_PARAMS.elementId, value: parent.element.id }\r\n        ])} key={parent.element.id} className=\"mr-2 py-1 px-4 bg-gray-200 hover:bg-gray-300 bg-opacity-80 rounded-md text-sm font-semibold\">\r\n          {parent.txt}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n\r\n};","export const BasicText = ({ value }) => value || null;\r\n","export const CheckBoxAsCheck = ({ value }: { value: boolean }) => value ? '✓' : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDateTime = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd hh:mm', new Date(value)) : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDate = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd', new Date(value)) : null;\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { txtByFieldValue } from 'app/libs/project-helpers/txt-by-field-value.function';\r\n\r\nexport const TextFromOptionsByValue = (options: Array<OptionKeysModel>, { value }: { value: string | number }) => txtByFieldValue(options, value);\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\n/* eslint-disable eqeqeq */\r\n\r\n/**\r\n * Finds the text to be displayed for an option of a Radio or Select element based on the matching value\r\n */\r\nexport function txtByFieldValue(options: Array<OptionKeysModel>, toFindId: string | number): string | null {\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  const optionToReturn = options.find(option => option.value == toFindId);\r\n\r\n  if (typeof optionToReturn === 'undefined')\r\n    return null;\r\n\r\n  return optionToReturn.label;\r\n}\r\n\r\n","import { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { BasicText } from 'app/ui-react-components/project/values-renderers/basic-text.component';\r\nimport { CheckBoxAsCheck } from 'app/ui-react-components/project/values-renderers/check-box-as-check.component';\r\nimport { FormattedDateTime } from 'app/ui-react-components/project/values-renderers/formatted-date-time.component';\r\nimport { FormattedDate } from 'app/ui-react-components/project/values-renderers/formatted-date.component';\r\nimport { TextFromOptionsByValue } from 'app/ui-react-components/project/values-renderers/text-from-options-by-value.component';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const customRenderPicker = (formModel: FormFieldsModel<SupportedFormsTypes>) => {\r\n  switch (formModel.componentCode) {\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return BasicText;\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return TextFromOptionsByValue.bind(null, formModel.options);\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return CheckBoxAsCheck;\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return FormattedDate;\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return FormattedDateTime;\r\n    default:\r\n      return BasicText\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IAddElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  mode: EDITOR_MODE.add;\r\n  elementId?: never;\r\n}\r\n\r\ninterface IEditElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  elementId: string;\r\n  mode: EDITOR_MODE.edit;\r\n}\r\n\r\ntype IAddEditElementButtonProps = | IAddElementButtonProps | IEditElementButtonProps;\r\n\r\nexport const AddEditElementButton = ({ projectId, sectionId, mode, elementId }: IAddEditElementButtonProps) => {\r\n\r\n  const icon = mode === EDITOR_MODE.add ? 'bi-plus' : 'bi-pencil';\r\n  const urlParamsToFill = [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }];\r\n\r\n  if (mode === EDITOR_MODE.edit)\r\n    urlParamsToFill.push({ name: URL_PARAMS.elementId, value: elementId })\r\n\r\n  const urlToFill = mode === EDITOR_MODE.add ? ANITA_URLS.projectSectionAddEle : ANITA_URLS.projectSectionEditEle;\r\n\r\n  const url: string = urlParamFiller(urlToFill, urlParamsToFill);\r\n\r\n  return (\r\n    <Link to={url} className=\"absolute bottom-5 right-7 md:bottom-7 md:right-10 bg-prussian-blue-400 text-white text-xl shadow-xl rounded-3xl h-14 w-14 flex items-center justify-center\">\r\n      <i className={icon}></i>\r\n    </Link>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { ParentsLinkShower } from 'app/ui-react-components/project/details-components/parents-link-shower.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const SectionElementDetails = () => {\r\n\r\n  const [element, setElement] = useState<SectionElement>(null);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = params[URL_PARAMS.elementId];\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const fetchData = async () => {\r\n      if (!isProjectLoaded(projectId) || !projectId || !sectionId || !elementId || !project || project[RESERVED_UDS_KEYS._settings][0].id !== projectId)\r\n        return setElement(undefined);\r\n\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n\r\n      if (isMounted)\r\n        setElement(element);\r\n    }\r\n\r\n    if (isMounted)\r\n      fetchData();\r\n\r\n    return () => { isMounted = false };\r\n  }, [projectId, sectionId, elementId, project]);\r\n\r\n  if (element === undefined) {\r\n    if (projectId && sectionId)\r\n      return <Navigate to={urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])} />\r\n    else\r\n      return <Navigate to={ANITA_URLS.projectsList} />\r\n  }\r\n\r\n  return (\r\n    <MainContentContainer headerText=\"Details\">\r\n      {(element === null) ? <Loader /> : <ElementValuesViewer element={element} formModels={findSectionById(project[RESERVED_UDS_KEYS._sections], sectionId).formModel as Array<FormFieldsModel<SectionElement>>} />}\r\n      {(element !== null && element.parentsInfo && Array.isArray(element.parentsInfo) && element.parentsInfo.length > 0) && <ParentsLinkShower projectId={projectId} parentsInfo={element.parentsInfo} sections={project[RESERVED_UDS_KEYS._sections]} />}\r\n      {(element !== null && <AddEditElementButton projectId={projectId} sectionId={sectionId} elementId={elementId} mode={EDITOR_MODE.edit} />)}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}\r\n\r\nconst ElementValuesViewer = ({ element, formModels }: { element: SectionElement, formModels: Array<FormFieldsModel<SectionElement>> }) => {\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      {formModels.map((formModel) => {\r\n        if (!formModel.label)\r\n          return null;\r\n\r\n        return <ValueWithLabel key={formModel.fieldName} formModel={formModel} value={element[formModel.fieldName]} />\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ValueWithLabel = ({ formModel, value }: { formModel: FormFieldsModel<SectionElement>, value: any }) => {\r\n  if (typeof value === 'undefined')\r\n    return null;\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"text-sm text-gray-500\">{formModel.label}</p>\r\n      <p className=\"mb-3\">{customRenderPicker(formModel)({ value })}</p>\r\n    </div>\r\n  )\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ReactNode } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nexport const TdWithLinkToDetails = ({ children, tdProps, elementId }: { children: ReactNode, tdProps: {}, elementId: string }) => {\r\n\r\n  const navigation = useNavigate();\r\n  const params = useParams();\r\n\r\n  return (\r\n    <td\r\n      onClick={() => navigation(urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n        { name: URL_PARAMS.projectId, value: params.projectId },\r\n        { name: URL_PARAMS.sectionId, value: params.sectionId },\r\n        { name: URL_PARAMS.elementId, value: elementId }\r\n      ]))}\r\n      className=\"px-6 py-4 cursor-pointer\"\r\n      {...tdProps}\r\n    >\r\n      {children}\r\n    </td>\r\n  )\r\n\r\n}","import { SectionElement } from 'app/data/model/project-info';\r\nimport { Section } from 'app/data/model/project-info';\r\nimport { TdWithLinkToDetails } from 'app/ui-react-components/project/list-components/td-with-link-to-details.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { useMemo } from 'react';\r\nimport { useSortBy, useTable } from 'react-table';\r\n\r\n/**\r\n * Builds the columns for the table with react-table looping through sectionInfo\r\n */\r\nconst useSectionInfo = (sectionInfo: Section) => {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const colsToShoww = useMemo(() => [], [sectionInfo.id, sectionInfo.formModel]);\r\n  useMemo(\r\n    () => {\r\n      return sectionInfo.formModel.forEach(formModel => {\r\n        if (sectionInfo.id && formModel.label)\r\n          colsToShoww.push({\r\n            Header: formModel.label,\r\n            accessor: formModel.fieldName,\r\n            Cell: customRenderPicker(formModel),\r\n          });\r\n      }\r\n      )\r\n    },\r\n\r\n    [sectionInfo.id, sectionInfo.formModel, colsToShoww]\r\n  )\r\n  return colsToShoww;\r\n}\r\n\r\n\r\nexport const TableList = ({ sectionInfo, sectionData }: { sectionInfo: Section; sectionData: Array<SectionElement> }) => {\r\n  const columns = useSectionInfo(sectionInfo);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data: sectionData }, useSortBy);\r\n\r\n  return (\r\n    // apply the table props\r\n    <table className=\"table-auto w-full divide-y divide-gray-200\" {...getTableProps()}>\r\n      <thead className=\"bg-gray-50\">\r\n        {// Loop over the header rows\r\n          headerGroups.map(headerGroup => (\r\n            // Apply the header row props\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {// Loop over the headers in each row\r\n                headerGroup.headers.map(column => (\r\n                  // Apply the header cell props\r\n                  <th className=\"px-6 py-2 text-xs text-gray-500 text-left\" {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {// Render the header\r\n                      column.render('Header')}\r\n                  </th>\r\n                ))}\r\n            </tr>\r\n          ))}\r\n      </thead>\r\n      {/* Apply the table body props */}\r\n      <tbody className=\"divide-y divide-gray-200\" {...getTableBodyProps()}>\r\n        {// Loop over the table rows\r\n          rows.map(row => {\r\n            // Prepare the row for display\r\n            prepareRow(row)\r\n            return (\r\n              // Apply the row props\r\n              <tr className=\"whitespace-nowrap\" {...row.getRowProps()}>\r\n                {// Loop over the rows cells\r\n                  row.cells.map(cell => {\r\n                    // TODO No Link to details for checkbox\r\n                    // Apply the cell props\r\n                    return (\r\n                      <TdWithLinkToDetails key={`${cell.column.id}${cell.row.id}`} tdProps={cell.getCellProps()} elementId={cell.row.original.id}>\r\n                        {cell.render('Cell')}\r\n                      </TdWithLinkToDetails>\r\n                    )\r\n                  })}\r\n              </tr>\r\n            )\r\n          })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NoSectionData = ({ sectionTitle, sectionId, projectId }: { sectionTitle: string, sectionId: string, projectId: string }) => (\r\n  <div className=\"container px-5 py-24 mx-auto\">\r\n    <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n      <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n        <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">Nothing here yet</h2>\r\n        <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">There are no items in {sectionTitle}</h1>\r\n        <p className=\"leading-relaxed mb-3\">Create a new entry to populate this list</p>\r\n        <div className=\"flex flex-wrap mt-7\">\r\n          <Link\r\n            to={urlParamFiller(ANITA_URLS.projectSectionAddEle, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])}\r\n            className=\"flex-grow mx-2 mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n          >Create a new element\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { TableList } from 'app/ui-react-components/project/list-components/tableList.component';\r\nimport { NoSectionData } from 'app/ui-react-components/project/no-section-data.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nexport const SectionElementsList = () => {\r\n\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const [sectionData, setSectionData] = useState<Array<SectionElement>>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getSectionData = async () => {\r\n\r\n      if (!isProjectLoaded(projectId))\r\n        return;\r\n\r\n      const data = await dbInstances[projectId].callSelector<SectionElement>(sectionId).multiple();\r\n      if (isMounted)\r\n        setSectionData(data);\r\n    }\r\n\r\n    if (isMounted)\r\n      getSectionData();\r\n\r\n    return () => { isMounted = false; };\r\n  }, [sectionId, projectId]);\r\n\r\n  if (project === null)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  const sectionInfo = findSectionById(project[RESERVED_UDS_KEYS._sections], sectionId);\r\n\r\n  if (sectionData === null)\r\n    return <div>Loading...</div>;\r\n\r\n  if (sectionData.length === 0)\r\n    return <NoSectionData sectionId={sectionId} sectionTitle={sectionInfo.title} projectId={projectId} />;\r\n\r\n  return (\r\n    <MainContentContainer headerText={sectionInfo.title}>\r\n      <TableList sectionInfo={sectionInfo} sectionData={sectionData} />\r\n      <AddEditElementButton projectId={projectId} sectionId={sectionId} mode={EDITOR_MODE.add} />\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Sets the current project\r\n */\r\nexport class CurrentProjectSetter {\r\n\r\n  /**\r\n   * Creates an instance of current project setter.\r\n   * @param project the project to set as current project\r\n   */\r\n  constructor(\r\n    private projectSettings: SystemData[RESERVED_UDS_KEYS._settings],\r\n    private sectionsDefinitions: SystemData[RESERVED_UDS_KEYS._sections]\r\n  ) { }\r\n\r\n  /**\r\n   * Dispatches the action to set SystemData in state\r\n   */\r\n  public set(): void {\r\n    store.dispatch(({\r\n      type: REDUX_ACTIONS.setCurrentProject,\r\n      payload: { [RESERVED_UDS_KEYS._settings]: this.projectSettings.concat(), [RESERVED_UDS_KEYS._sections]: this.sectionsDefinitions.concat() }\r\n    }));\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\n\r\n/**\r\n * Implements deletor for MySql\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section on which to perform the query\r\n   * @param args the args of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes an element from the collection\r\n   */\r\n  public async autoDelete(): Promise<any> {\r\n\r\n    if (!Object.keys(this.args).length)\r\n      return 'Fatal error: trying to delete without any parameter';\r\n\r\n    // TODO\r\n\r\n    return;\r\n  }\r\n\r\n}\r\n","/**\r\n * Algorithm used for encryption.\r\n */\r\nexport const securePassEncrypter = '286b88f2ceb76ce1e7d28117bb2a7659';\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Encrypts a string\r\n *\r\n * @param value the value to encrypt\r\n * @param keyToUse the key to use for encryption\r\n * @return the encrypted string\r\n */\r\nexport function stringCrypter(value: string, keyToUse: string): string {\r\n  const encrypted = CryptoES.AES.encrypt(value, keyToUse);\r\n  return encrypted.toString();\r\n}\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Decrypts a string\r\n *\r\n * @param value the value to decrypt\r\n * @param keyToUse the key to use for decryption\r\n * @return the decrypted string\r\n */\r\nexport function stringDecrypter(value: string, keyToUse: string): string {\r\n  const decrypted = CryptoES.AES.decrypt(value, keyToUse);\r\n  return decrypted.toString();\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { securePassEncrypter } from 'app/libs/db-connector/crypter/options.constant';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Common methods needed to crypt and decrypt data, when data encryption in the DB is enabled.\r\n */\r\nexport class CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * User keys stored as static Object for fast retrieval from memory.\r\n   * The key of the Object is the string concatenation of the user and the undecrypted key to avoid collisions between projects/users.\r\n   */\r\n  private static userKeys: { [keyIdentifier: string]: string } = {};\r\n  private owner: string;\r\n  private undecryptedKey: string;\r\n  private keyIdentifier: string;\r\n\r\n  /**\r\n   * Encrypts the user key using the securePassEncrypter.\r\n   */\r\n  public static decryptUserKey(keyToEncrypt: string): string {\r\n    return stringCrypter(keyToEncrypt, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of Decrypter.\r\n   * @param dbConnector Instance of DbConnector.\r\n   * @param section the section definition, needed to know which fields should be decrypted.\r\n   * @param element the element to be decrypted.\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<DbTypes>,\r\n    protected section: keyof AbstractModel,\r\n    protected element: E\r\n  ) { }\r\n\r\n  /**\r\n   * Returns the unencrypted key of the owner of the element, if an emcrypted key for the user was provided when initializing DbInit.\r\n   */\r\n  protected getUserKey(): string {\r\n    this.setOwner();\r\n    this.setUndecryptedKey();\r\n\r\n    if (!this.undecryptedKey)\r\n      return undefined;\r\n\r\n    this.makeKeyIdentifier();\r\n\r\n    if (CryptHelper.userKeys[this.keyIdentifier])\r\n      return this.returnUserUnencryptedKey();\r\n\r\n    this.decryptUserKey();\r\n\r\n    return this.returnUserUnencryptedKey();\r\n  }\r\n\r\n  /**\r\n   * Logs no key error.\r\n   */\r\n  protected logNoKeyError(): void {\r\n    Logger.error(`ERROR: skipping encryption as no key was found for user ${this.owner}. Did you forget to pass the user key in the options when initializing DbInit?`);\r\n  }\r\n  /**\r\n   * Sets the id of the owner of the element being processed.\r\n   */\r\n  private setOwner(): void {\r\n    this.owner = this.element[this.dbConnector.DS[this.section].ownerIdentifier];\r\n  }\r\n\r\n  /**\r\n   * Sets the undecrypted key of the owner if one was found in dbConnector.options, otherwise `undefined`\r\n   */\r\n  private setUndecryptedKey(): void {\r\n    this.undecryptedKey = (typeof this.dbConnector.options.encryptionKeys === 'object' && this.dbConnector.options.encryptionKeys[this.owner]) ? this.dbConnector.options.encryptionKeys[this.owner] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Makes the identifier of the unencryyypted key by concatenating the `string` of the `owner` and the `string` of the encrypted key.\r\n   */\r\n  private makeKeyIdentifier(): void {\r\n    this.keyIdentifier = `${this.owner}${this.undecryptedKey}`;\r\n  }\r\n\r\n  /**\r\n   * Decrypts the user key using the securePassEncrypter.\r\n   */\r\n  private decryptUserKey(): void {\r\n    CryptHelper.userKeys[this.keyIdentifier] = stringDecrypter(this.undecryptedKey, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Returns the user unencrypted key retrieving it from the store in memory.\r\n   */\r\n  private returnUserUnencryptedKey(): string {\r\n    return CryptHelper.userKeys[this.keyIdentifier];\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\n\r\n/**\r\n * Encrypts one element at a time.\r\n */\r\nexport class Encrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to encrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.encrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Encrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for encryption.\r\n   * @param fieldName the key of the field to encrypt.\r\n   */\r\n  private encrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringCrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { FileSystemFileHandle, WindowFS } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\n\r\ndeclare const window: WindowFS;\r\n\r\n/**\r\n * Open a handle to an existing file on the local file system.\r\n */\r\nexport function getFileHandle(): Promise<Array<FileSystemFileHandle>> {\r\n  return window.showOpenFilePicker({ multiple: true }).then(handles => handles);\r\n}\r\n\r\n/**\r\n * Reads the file content from a fileHandle and returns it as a string.\r\n */\r\nexport async function readFileHandleAsText(fileHandle: FileSystemFileHandle): Promise<string> {\r\n  const file = await fileHandle.getFile() as any; // as any because .text not yet documented in TS\r\n  return file.text();\r\n}\r\n\r\n/**\r\n * Create a handle to a new (text) file on the local file system.\r\n */\r\nexport function getNewFileHandle(name: string = ''): Promise<FileSystemFileHandle> {\r\n  const opts = {\r\n    types: [{\r\n      name,\r\n      description: 'Anita project data file',\r\n      accept: { 'application/json': ['.json'] }\r\n    }]\r\n  };\r\n  return window.showSaveFilePicker(opts);\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nexport function readFile(file: any): Promise<string> {\r\n  // If the new .text() reader is available, use it.\r\n  if (file.text) {\r\n    return file.text();\r\n  }\r\n  // Otherwise use the traditional file reading technique.\r\n  return _readFileLegacy(file) as Promise<string>;\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nfunction _readFileLegacy(file: any): Promise<string> {\r\n  return new Promise(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', e => {\r\n      const text = e.target.result;\r\n      resolve(text as string);\r\n    });\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n\r\n/**\r\n * Writes the contents to disk.\r\n */\r\nexport async function writeFile(fileHandle: FileSystemFileHandle, contents: string): Promise<void> {\r\n  // For Chrome 83 and later.\r\n  // Create a FileSystemWritableFileStream to write to.\r\n  const writable = await fileHandle.createWritable();\r\n  // Write the contents of the file to the stream.\r\n  await writable.write(contents);\r\n  // Close the file and write the contents to disk.\r\n  await writable.close();\r\n}\r\n\r\n/**\r\n * Verify the user has granted permission to read or write to the file, if\r\n * permission hasn't been granted, request permission.\r\n */\r\nexport async function verifyPermission(fileHandle: FileSystemFileHandle, withWrite: boolean): Promise<boolean> {\r\n  const opts = {} as any;\r\n  if (withWrite) {\r\n    opts.writable = true;\r\n    opts.mode = 'readwrite';\r\n  }\r\n  // Check if we already have permission, if so, return true.\r\n  if (await fileHandle.queryPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // Request permission to the file, if the user grants permission, return true.\r\n  if (await fileHandle.requestPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // The user did nt grant permission, return false.\r\n  return false;\r\n}\r\n","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings, ProjectSettings } from 'app/data/model/project-info';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\n/**\r\n * Saves project's settings in IndexedDB.\r\n */\r\nexport class SaveProjectSettingsInIndexedDB {\r\n\r\n  /**\r\n   * Copy of the settings of the project to be saved in IndexedDB\r\n   */\r\n  private copyOfProjectSettings: LocalProjectSettings;\r\n\r\n  /**\r\n   * Creates an instance of save project settings in indexed db.\r\n   * @param projectSettings settings Object of the project to store\r\n   * @param fileHandle handle of the file on disk. Saved in the IndexedDB for future use\r\n   */\r\n  constructor(\r\n    private projectSettings: ProjectSettings,\r\n    private fileHandle: FileSystemFileHandle\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project settings in IndexedDB with its fileHandle\r\n   * @returns save \r\n   */\r\n  public async save(): Promise<LocalProjectSettings> {\r\n    this.setProjectSettingsClone();\r\n    this.setFileHandleOnProjectSettingsClone();\r\n    this.doStoreProjectSettings();\r\n\r\n    return this.copyOfProjectSettings;\r\n  }\r\n\r\n  /**\r\n   * Deep clonse settings and then adds the fileHandle to prevent setting the fileHandle on the project data object\r\n   */\r\n  private setProjectSettingsClone(): void {\r\n    this.copyOfProjectSettings = cloneDeep(this.projectSettings);\r\n  }\r\n\r\n  /**\r\n   * Sets the file handle on the project settings clone\r\n   */\r\n  private setFileHandleOnProjectSettingsClone(): void {\r\n    this.copyOfProjectSettings.fileHandle = this.fileHandle;\r\n  }\r\n\r\n  /**\r\n   * Stores the project settings with db-connector\r\n   */\r\n  private doStoreProjectSettings(): void {\r\n    dbInstances.system.callInsertor(CLIENT_SECTIONS.projects, this.copyOfProjectSettings).autoInsert();\r\n  }\r\n}\r\n","import { AnitaUniversalDataStorage, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { writeFile } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\n\r\n/**\r\n * Saves the `AnitaUniversalDataStorage` to the file a file on disk by using the fileHandle stored in the IndexedDB, if found, or asking the user to pick a new file.\r\n * It also calls `SaveProjectSettingsInIndexedDB` to store or overwrite the `LocalProjectSettings` in IndexedDB.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n */\r\nexport class ProjectFileHandleSaver {\r\n\r\n  /**\r\n   * The string data to sabe in the file on disk\r\n   */\r\n  private data: string;\r\n\r\n  /**\r\n   * Creates an instance of project file handle saver.\r\n   * @param projectData full data of the project to be saved\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project both on file and in IndexedDB\r\n   */\r\n  public async save(): Promise<void> {\r\n    this.setData();\r\n    this.saveDataToDisk();\r\n    await new SaveProjectSettingsInIndexedDB(this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._settings][0], this.dbConnector.options.projectInfo.fileHandle).save();\r\n    await new CurrentProjectSetter(this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._settings], this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._sections]).set();\r\n    await new ProjectsListLoader().load();\r\n  }\r\n\r\n  /**\r\n   * Converts the project data to string\r\n   */\r\n  private setData(): void {\r\n    this.data = JSON.stringify(this.dbConnector.dbStore.db);\r\n  }\r\n\r\n  /**\r\n   * Actually saves the data to disk by calling writeFile\r\n   * \r\n   * @see writeFile\r\n   */\r\n  private saveDataToDisk(): void {\r\n    writeFile(this.dbConnector.options.projectInfo.fileHandle, this.data);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage, SectionElement } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { ProjectFileHandleSaver } from 'app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class';\r\n\r\nexport class ElementAdderToCollection<E> {\r\n\r\n  private index: number;\r\n\r\n  /**\r\n   * Creates an instance of db ElementAdderToCollection.\r\n   * @param dbConnector the instance of DbConnector from which ElementAdderToCollection is called\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    protected section: keyof AbstractModel,\r\n    protected element: Partial<E>\r\n  ) { }\r\n\r\n  protected async save(): Promise<void> {\r\n    this.setSectionStore();\r\n    this.checkIfElementInStoreAndSetIndex();\r\n    this.addToStore();\r\n    await new ProjectFileHandleSaver(this.dbConnector).save();\r\n  }\r\n\r\n  /**\r\n   * Sets the index of the element being saved if it was already in the store, else assigns the lenght of the array to push it at the end.\r\n   *\r\n   * @remarks The index is used by `addToStore` to replace the existing element with the new one when in edit mode.\r\n   */\r\n  protected checkIfElementInStoreAndSetIndex(): void {\r\n    const elements = this.dbConnector.dbStore.db[this.section] as Array<SectionElement>;\r\n    const check = elements.findIndex(ele => this.element[this.dbConnector.DS[this.section].pk] === ele[this.dbConnector.DS[this.section].pk]);\r\n    this.index = (check >= 0) ? check : elements.length;\r\n  }\r\n\r\n  /**\r\n   * Sets an ampty array is the project did not have one already\r\n   */\r\n  private setSectionStore(): void {\r\n    if (!this.dbConnector.dbStore.db[this.section])\r\n      this.dbConnector.dbStore.db[this.section] = [];\r\n  }\r\n\r\n  /**\r\n   * Adds the element to the end of the store if it's a new element, otherwise replaces the existing element.\r\n   */\r\n  private addToStore(): void {\r\n    this.dbConnector.dbStore.db[this.section][this.index] = this.element as unknown as SectionElement;\r\n  }\r\n\r\n}\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements insertor for MySql\r\n */\r\nexport class DbInsertor<E> extends ElementAdderToCollection<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Adds an element to the collection\r\n   */\r\n  public async autoInsert(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption with Encrypter\r\n   * \r\n   * @see Encrypter\r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    await new Encrypter(this.dbConnector, this.section, this.element).do();\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\n\r\n/**\r\n * Decrypts one element at a time.\r\n */\r\nexport class Decrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to decrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.decrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Decrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for decryption.\r\n   * @param fieldName the key of the field to decrypt.\r\n   */\r\n  private decrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringDecrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { Decrypter } from 'app/libs/db-connector/crypter/decrypter.class';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\n\r\nexport class DbSelector<E> implements Selector<E> {\r\n\r\n  private results: Array<any>;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E> = {}\r\n  ) { }\r\n\r\n  /**\r\n   * Gets one element with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async single(): Promise<E> {\r\n    await this.doSelect();\r\n\r\n    if (!this.results.length)\r\n      return;\r\n\r\n    return this.results.find(ele => this.filterKeys(ele));\r\n  }\r\n\r\n  private filterKeys(eleToCheck: E): boolean {\r\n    const keys = Object.keys(this.args);\r\n    let res = true;\r\n    let counter = 0;\r\n    while (res && counter < keys.length) {\r\n      res = eleToCheck[keys[counter]] === this.args[keys[counter]];\r\n      counter++;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Gets multiple elements in an Array with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    await this.doSelect();\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * Counts elements calling multiple and then calling `Array.lenght`\r\n   * @see multiple\r\n   */\r\n  public async count(): Promise<number> {\r\n    await this.multiple();\r\n    return this.results.length;\r\n  }\r\n\r\n  /**\r\n   * Builds the query with QueryMaker and runs it with executeQuery\r\n   * \r\n   * @see QueryMaker\r\n   * @see executeQuery\r\n   */\r\n  private async doSelect(): Promise<void> {\r\n    this.results = this.dbConnector.dbStore.db[this.section] && this.dbConnector.dbStore.db[this.section].length ? this.dbConnector.dbStore.db[this.section] : [];\r\n    await this.handleDecryption();\r\n  }\r\n\r\n  /**\r\n   * Handles decryption\r\n   * \r\n   * @see Decrypter \r\n   */\r\n  private async handleDecryption(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted && this.results.length)\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < this.results.length; i++)\r\n        await new Decrypter(this.dbConnector, this.section, this.results[i]).do();\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { Section, SectionElement } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Converts the abstract definition of a Section into a complete datastructure that can be processed by FormDataParserService\r\n *\r\n * @see FormDataParserService\r\n */\r\nexport class DataStructureExtender {\r\n\r\n  /**\r\n   * Temporarly stores all the sections defined by `buildSectionDefinition`\r\n   *\r\n   * @see buildSectionDefinition\r\n   */\r\n  private allSez: Array<SectionDefinition<SectionElement>> = [];\r\n\r\n  private datastructure: AbstractModel = {};\r\n\r\n  constructor(\r\n    private sections: Array<Section>\r\n  ) { }\r\n\r\n  /**\r\n   * First calls `cleanDataStructure` if a previous project was set.\r\n   * Then builds all sections definitions with `buildSectionDefinition`.\r\n   * Finally calls `buildAndAddAllSections` to build the full section and add it to the datastructure.\r\n   */\r\n  public extend(): AbstractModel {\r\n    this.sections.forEach(section => this.buildSectionDefinition(section));\r\n    this.allSez.forEach(sezDefinition => this.buildAndAddAllSections(sezDefinition));\r\n    return this.datastructure;\r\n  }\r\n\r\n  /**\r\n   * Builds a contant with the specifications of a Section starting from the structure defined by the user.\r\n   */\r\n  private buildSectionDefinition(section: Section): void {\r\n    const sezDefinition: SectionDefinition<SectionElement> = {\r\n      name: section.id,\r\n      fields: Object.values(RESERVED_FIELDS)\r\n    };\r\n    section.formModel.forEach(field => {\r\n      sezDefinition.fields.push(field.fieldName);\r\n    });\r\n\r\n    this.allSez.push(sezDefinition);\r\n  }\r\n\r\n  /**\r\n   * Starting from the definition of the Section, builds a full model of the Section and adds it to the datastructure.\r\n   */\r\n  private buildAndAddAllSections(sezDefinition: SectionDefinition<SectionElement>): void {\r\n    const sez = new SezBuilder<SectionElement>(\r\n      this.allSez,\r\n      sezDefinition.name,\r\n      sezDefinition.fields\r\n    ).make();\r\n    this.addToTempTs(sez);\r\n  }\r\n\r\n  /**\r\n   * Creates a new key on the datastructure and sets on it the model of the section.\r\n   */\r\n  private addToTempTs(sez: SectionModel<SectionElement>): void {\r\n    this.datastructure[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getNewFileHandle, verifyPermission } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\n/**\r\n * Uses the fileHandle stored in IndexedDB, if any, or asks for a new one \r\n */\r\nexport async function fileHandleChecker(options: DsDbInitOptions): Promise<FileSystemFileHandle> {\r\n  if (!options.projectInfo.fileHandle)\r\n    return await getNewFileHandle(`anita-fh-${options.projectInfo.id}`);\r\n\r\n  await verifyPermission(options.projectInfo.fileHandle, true);\r\n  return options.projectInfo.fileHandle;\r\n\r\n}\r\n","import { DataStructureExtender } from 'app/data/data-structure-extender.class';\r\nimport { AnitaUniversalDataStorage, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance, DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { fileHandleChecker } from 'app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function';\r\nimport { readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\nexport class DbStore implements DbStoreInterface<AnitaUniversalDataStorage> {\r\n\r\n  /**\r\n   * Project data\r\n   */\r\n  public db: AnitaUniversalDataStorage = {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  };\r\n\r\n  /**\r\n   * Contents of project file as string\r\n   */\r\n  private contents: string;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private options: DsDbInitOptions\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<AnitaUniversalDataStorage>> {\r\n\r\n    if (!this.options.projectInfo)\r\n      throw new Error('No projectInfo passed to DbConnector.\\nTo retrieve a project from a local file, pass the an Object of type LocalProjectSettings as value of projectInfo to the options of DbConnector');\r\n\r\n    const fileHandle = await fileHandleChecker(this.options);\r\n\r\n    // If the project already had a FileHandle, the data file already existed so we read it and load it\r\n    if (this.options.projectInfo.fileHandle)\r\n      await this.initializeExistingProject();\r\n    // Otherwise, we are inizializing a new project, so we store in memory the fileHandle, which will be sabed by ProjectFileHandleSaver when saving the project\r\n    else\r\n      this.options.projectInfo.fileHandle = fileHandle;\r\n\r\n    return this;\r\n  }\r\n\r\n  public close(): void {\r\n    // NOT NEEDED\r\n  }\r\n\r\n  public async initializeExistingProject(): Promise<void> {\r\n    await this.doReadFile();\r\n    this.parseFileContents();\r\n    this.makedDS();\r\n  }\r\n\r\n  /**\r\n   * Loads file from disk using the fileHandle retrieved from IndexedDB\r\n   */\r\n  private async doReadFile(): Promise<void> {\r\n    this.contents = await readFileHandleAsText(this.options.projectInfo.fileHandle);\r\n  }\r\n\r\n  /**\r\n   * Parses the string file content as data\r\n   */\r\n  private parseFileContents(): void {\r\n    this.db = JSON.parse(this.contents);\r\n  }\r\n\r\n  /**\r\n   * Extends DS (DataStructure) with the sections of the project so that FormDataParserService correctly pares FormData\r\n   *\r\n   * @see FormDataParserService\r\n   * @see DataStructureExtender\r\n   */\r\n  private makedDS(): void {\r\n    this.dbConnector.DS = Object.assign(this.dbConnector.DS, new DataStructureExtender(this.db[RESERVED_UDS_KEYS._sections]).extend());\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbStore } from './db-store/dbstore.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use MySql as plugin\r\n */\r\nexport const FILE_HANDLES_PLUGIN: DbObjects<any, AnitaUniversalDataStorage> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Updator } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements updator for MySql\r\n */\r\nexport class DbUpdator<E> extends ElementAdderToCollection<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Updates an element in the collection\r\n   */\r\n  public async autoUpdate(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption\r\n   * \r\n   * @see Encrypter \r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    await new Encrypter(this.dbConnector, this.section, this.element).do();\r\n  }\r\n\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport class ProjectSaver {\r\n\r\n  private projectDataToSave: SystemData = {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  };\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private mode: EDITOR_MODE\r\n\r\n  ) { }\r\n\r\n  public async save(): Promise<SystemData> {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings] = this.project[RESERVED_UDS_KEYS._settings].concat();\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._sections] = this.project[RESERVED_UDS_KEYS._sections].concat();\r\n\r\n    this.setDateCreation();\r\n\r\n    if (this.mode === EDITOR_MODE.edit)\r\n      this.setLastModified();\r\n\r\n    if (!dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id])\r\n      await this.initDbInstance();\r\n\r\n    await this.saveSettings();\r\n    await this.saveSections();\r\n\r\n    this.fileHandleOnlyActions();\r\n\r\n    return this.projectDataToSave;\r\n  }\r\n\r\n  private setDateCreation(): void {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].dateCreation = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private setLastModified(): void {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].lastModified = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private async initDbInstance(): Promise<void> {\r\n    dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.projectDataToSave[RESERVED_UDS_KEYS._settings][0] }).init();\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    await dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].callInsertor(RESERVED_UDS_KEYS._settings, this.projectDataToSave[RESERVED_UDS_KEYS._settings][0]).autoInsert();\r\n  }\r\n\r\n  private async saveSections(): Promise<void> {\r\n    await asyncForEach(this.projectDataToSave[RESERVED_UDS_KEYS._sections], async section => await dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].callInsertor(RESERVED_UDS_KEYS._sections, section).autoInsert());\r\n  }\r\n\r\n  private fileHandleOnlyActions(): Promise<void> {\r\n    if (this.mode === EDITOR_MODE.add)\r\n      return dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].dbStore['initializeExistingProject']();\r\n  }\r\n\r\n}\r\n","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { PROJECT_EDITOR_FORM_MODELS_CONST } from 'app/data/form-models/project-editor-form-models.const';\r\nimport { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport {\r\n  IUpdateFormProjectUpdateFormModelAddOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelDeleteOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelOfSectionPayload,\r\n  IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n  } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { cleanString } from 'app/libs/tools/tools';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\n\r\ninterface ISectionFormModelManagerProps {\r\n  indexSection: number;\r\n  indexFormElement: number;\r\n  element: FormFieldsModel<SupportedFormsTypes>;\r\n}\r\n\r\nconst getAlreadyExists = (section: Section, fieldName: string): boolean => {\r\n  if (!fieldName || !section) return false;\r\n  return section.formModel.some(formElement => formElement.fieldName === fieldName);\r\n}\r\n\r\nexport const SectionFormModelManager = (props: ISectionFormModelManagerProps) => {\r\n\r\n  const { indexSection, indexFormElement, element } = props;\r\n\r\n  const params = useParams();\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const section = useSelector((state: AnitaStore) => state.formProject.original[RESERVED_UDS_KEYS._sections][indexSection]);\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const mode = useMemo(() => projectId ? EDITOR_MODE.edit : EDITOR_MODE.add, [projectId]);\r\n  const alreadyExists = getAlreadyExists(section, element.fieldName);\r\n  const formModelToUse = useMemo(() => mode === EDITOR_MODE.edit && alreadyExists ?\r\n    PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].sectionEles.existingItem :\r\n    PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].sectionEles.newItem,\r\n    [alreadyExists, mode, projectEditorMode]\r\n  );\r\n\r\n  const handleChange = (indexSection: number, indexFormElement: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    const identifierAutoVal = fieldName === 'label' && !alreadyExists ? { 'fieldName': (typeof value === 'string') ? cleanString(value) : value } : {};\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        formElement: { ...element, ...identifierAutoVal, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOfSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleOptionsChange = (indexSection: number, indexFormElement: number, indexOptions: number, optionElement: OptionKeysModel, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions,\r\n        formElement: { ...optionElement, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddOption = (indexSection: number, indexFormElement: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption, payload: {\r\n        indexSection,\r\n        indexFormElement\r\n      } as IUpdateFormProjectUpdateFormModelAddOptionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickDeleteOption = (indexSection: number, indexFormElement: number, indexOptions: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions\r\n      } as IUpdateFormProjectUpdateFormModelDeleteOptionPayload\r\n    });\r\n  }\r\n\r\n  return (\r\n    <FormAutomator\r\n      {\r\n      ...{\r\n        ...props,\r\n        formModel: formModelToUse as Array<FormFieldsModel<any>>,\r\n        handleChange: handleChange.bind(undefined, indexSection, indexFormElement),\r\n        handleOptionsChange: handleOptionsChange.bind(undefined, indexSection, indexFormElement),\r\n        handleClickAddOption: handleClickAddOption.bind(undefined, indexSection, indexFormElement),\r\n        handleClickDeleteOption: handleClickDeleteOption.bind(undefined, indexSection, indexFormElement)\r\n      }\r\n      }\r\n    />\r\n  )\r\n\r\n}","import { PROJECT_EDITOR_FORM_MODELS_CONST } from 'app/data/form-models/project-editor-form-models.const';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { IUpdateFormProjectRemoveFieldFromSectionPayload, IUpdateFormProjectUpdateSectionPayload } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { SectionFormModelManager } from 'app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component';\r\nimport { DANGER_BTN_OUTLINE, SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SectionManager = ({ section, sectionIndex }: { section: Section, sectionIndex: number }) => {\r\n\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const sections = useSelector((store: AnitaStore) => store.formProject.project[RESERVED_UDS_KEYS._sections]);\r\n  const customFields: Array<string> = section.formModel\r\n    .map(formElement => Object.values(RESERVED_FIELDS).includes(formElement.fieldName) ? null : formElement.fieldName)\r\n    .filter(fieldName => fieldName !== null);\r\n\r\n  const handleChange = (index: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateSection, payload: {\r\n        section: { ...section, [fieldName]: value },\r\n        index\r\n      } as IUpdateFormProjectUpdateSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddField = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddFieldToSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteField = (fieldIndex: number) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection, payload: { sectionIndex, fieldIndex } as IUpdateFormProjectRemoveFieldFromSectionPayload });\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n      <div>\r\n        <h3 className=\"text-md font-bold\">{`Section # ${sectionIndex + 1}`}</h3>\r\n        <hr className=\"mt-4\" />\r\n      </div>\r\n      <div className=\"pt-4\">\r\n        <FormAutomator\r\n          formModel={PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].sectionInfo as Array<FormFieldsModel<any>>}\r\n          element={section}\r\n          handleChange={handleChange.bind(undefined, sectionIndex)}\r\n          sectionId={section.id}\r\n        />\r\n      </div>\r\n      <h4 className=\"pl-2 font-bold mb-2 mt-6\">Section element fields</h4>\r\n      {section.formModel.map((formElement, indexFormElement) =>\r\n        !customFields.includes(formElement.fieldName) ? null : (\r\n          <div key={`${section.id}-${indexFormElement}`} className=\"border border-transparent hover:border-prussian-blue-500 shadow rounded mb-3 p-4\">\r\n            <SectionFormModelManager\r\n              indexFormElement={indexFormElement}\r\n              indexSection={sectionIndex}\r\n              element={formElement}\r\n            />\r\n            {customFields.length < 2 ? null : (\r\n              <div className=\"flex justify-end\">\r\n                <button\r\n                  onClick={handleClickDeleteField.bind(undefined, indexFormElement)}\r\n                  className={`text-sm py-1 px-3 ${DANGER_BTN_OUTLINE}`}>\r\n                  Delete field\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      )}\r\n      <div className=\"flex items-end mt-10 mb-1\">\r\n        {(sections.length > 1) && <button onClick={handleClickDeleteSection}\r\n          className={`py-2 px-4 text-sm ${DANGER_BTN_OUTLINE}`}>\r\n          Delete section\r\n        </button>}\r\n        <button onClick={handleClickAddField}\r\n          className={`ml-auto py-2 px-4 text-sm ${SUCCESS_BTN_OUTLINE}`}>\r\n          Add field\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { PROJECT_EDITOR_FORM_MODELS_CONST } from 'app/data/form-models/project-editor-form-models.const';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { ProjectSaver } from 'app/libs/project-helpers/project-handlers/project-saver.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { SectionManager } from 'app/ui-react-components/projects/add-edit-project-components/section-manager.component';\r\nimport { SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router';\r\n\r\nexport const FormProjectManager = () => {\r\n\r\n  const { projectId } = useParams<URL_PARAMS>();\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const project = useSelector((state: AnitaStore) => state.formProject.project);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const navigate = useNavigate();\r\n\r\n  const handleProjectChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectSettings, payload: { ...project[RESERVED_UDS_KEYS._settings][0], [fieldName]: value } });\r\n  }\r\n\r\n  const handleClickSave = () => {\r\n    const mode: EDITOR_MODE = projectId ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n    new ProjectSaver(project as SystemData, mode).save();\r\n    new CurrentProjectSetter(project[RESERVED_UDS_KEYS._settings], project[RESERVED_UDS_KEYS._sections]).set();\r\n    navigate(urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project[RESERVED_UDS_KEYS._settings][0].id }]));\r\n  }\r\n\r\n  const handleClickAddSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddSection });\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <FormAutomator formModel={PROJECT_EDITOR_FORM_MODELS_CONST[projectEditorMode].projectInfo as any} element={project[RESERVED_UDS_KEYS._settings][0]} handleChange={handleProjectChange} />\r\n      </div>\r\n      <div className=\"px-3\">\r\n        {project[RESERVED_UDS_KEYS._sections].map((section, index) => <SectionManager key={section.id} section={section} sectionIndex={index} />)}\r\n      </div>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <div className=\"flex items-end flex-wrap\">\r\n          <button\r\n            className={`py-2 px-6 mr-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddSection}\r\n          >Add section</button>\r\n          <button\r\n            className=\"ml-auto py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n            onClick={() => navigate(-1)}\r\n          >Cancel</button>\r\n          <button\r\n            disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n            className=\"py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500 disabled:bg-gray-400 disabled:bg-opacity-40 disabled:cursor-not-allowed\"\r\n            onClick={handleClickSave}\r\n          >Save</button>\r\n        </div>\r\n      </div>\r\n    </span>\r\n  )\r\n}","import { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport './project-editor-mode-toggle.component.css';\r\nexport const ProjectEditorModeToggle = () => {\r\n\r\n  const handleChangeProjectEditorMode = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.setProjectEditorMode });\r\n  };\r\n\r\n  return (\r\n    <div className=\"ml-auto\">\r\n      <label htmlFor=\"project-editor-mode-toggle\" className=\"flex items-center cursor-pointer\">\r\n        <div className=\"mr-3 text-gray-700 font-medium\">\r\n          Advanced mode\r\n        </div>\r\n        <div className=\"relative\">\r\n          <input type=\"checkbox\" id=\"project-editor-mode-toggle\" className=\"sr-only\" onChange={handleChangeProjectEditorMode} />\r\n          <div className=\"block bg-gray-600 w-14 h-8 rounded-full\"></div>\r\n          <div className=\"dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition\"></div>\r\n        </div>\r\n      </label>\r\n\r\n    </div>\r\n  )\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport {\r\n  ProjectSettings,\r\n  RESERVED_UDS_KEYS,\r\n  Section,\r\n  SystemData\r\n  } from 'app/data/model/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormProjectManager } from 'app/ui-react-components/projects/add-edit-project-components/form-project-manager.component';\r\nimport { ProjectEditorModeToggle } from 'app/ui-react-components/projects/add-edit-project-components/project-editor-mode-toggle.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditProject = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.projectId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n\r\n  const [project, setProject] = useState<Partial<SystemData> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    // in add mode, sets a new project\r\n    if (mode === EDITOR_MODE.add)\r\n      return setProject({\r\n        [RESERVED_UDS_KEYS._settings]: [{ id: IdCreator.random(), title: '', description: '', dateCreation: '' }],\r\n        [RESERVED_UDS_KEYS._sections]: [{ id: IdCreator.random(), title: '', formModel: [{} as any] }],\r\n      });\r\n\r\n    if (!isProjectLoaded(projectId) || !projectId)\r\n      return setProject(undefined);\r\n\r\n    const fetchEProject = async () => {\r\n      const _settings = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_UDS_KEYS._settings).multiple();\r\n      const _sections = await dbInstances[projectId].callSelector<Section>(RESERVED_UDS_KEYS._sections).multiple();\r\n\r\n      if (isMounted)\r\n        setProject({ _settings, _sections });\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchEProject();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId]);\r\n\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Project' : 'Edit Project';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.setFormProject, payload: project });\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"p-4 bg-white rounded shadow flex\">\r\n        <div>\r\n          <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n        </div>\r\n        {project !== null && <ProjectEditorModeToggle />}\r\n      </div>\r\n      {project === null && <Loader />}\r\n      {project !== null && <FormProjectManager />}\r\n    </span>\r\n  )\r\n\r\n};\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport {\r\n  AnitaUniversalDataStorage,\r\n  LocalProjectSettings,\r\n  ProjectSettings,\r\n  RESERVED_UDS_KEYS\r\n  } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getFileHandle, readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\n\r\n/**\r\n * Imports one or more existing project files, and then calls `SaveProjectSettingsInIndexedDB`.\r\n * Also sets the last imported project as the current one by calling `CurrentProjectSetter`.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n * @see CurrentProjectSetter\r\n */\r\nexport class ProjectFileImporter {\r\n\r\n  /**\r\n   * List of FileSystemFileHandle for each project to import\r\n   */\r\n  private fileHandles: Array<FileSystemFileHandle>;\r\n  /**\r\n   * The file contents of each project to import\r\n   */\r\n  private fileContents: string;\r\n  /**\r\n   * The project data of each project to import\r\n   */\r\n  private projectData: AnitaUniversalDataStorage;\r\n\r\n  private localProjectSettings: LocalProjectSettings;\r\n\r\n  /**\r\n   * Asks for the files to import and processes them, then sets the current project as the last one imported \r\n   */\r\n  public async import(): Promise<void> {\r\n    await this.askForFile();\r\n    await this.processFileHandles();\r\n    await this.initializeDb();\r\n    new CurrentProjectSetter(this.projectData[RESERVED_UDS_KEYS._settings], this.projectData[RESERVED_UDS_KEYS._sections]).set();\r\n  }\r\n\r\n  /**\r\n   * Asks for user permission to open a file\r\n   */\r\n  private async askForFile(): Promise<void> {\r\n    this.fileHandles = await getFileHandle();\r\n  }\r\n\r\n  /**\r\n   * For each file selected by the user, starts the import logic \r\n   */\r\n  private async processFileHandles(): Promise<void> {\r\n    await asyncForEach(this.fileHandles, async fileHandle => await this.processFileHandle(fileHandle));\r\n  }\r\n\r\n  /**\r\n   * Saves the project settings in IndexedDB and adds the project to the project list \r\n   */\r\n  private async processFileHandle(fileHandle: FileSystemFileHandle): Promise<void> {\r\n    this.fileContents = await readFileHandleAsText(fileHandle);\r\n    this.parseFileContents();\r\n    this.localProjectSettings = await new SaveProjectSettingsInIndexedDB(this.projectData[RESERVED_UDS_KEYS._settings][0], fileHandle).save();\r\n    this.dispatchProject(this.projectData[RESERVED_UDS_KEYS._settings][0]);\r\n  }\r\n\r\n  /**\r\n   * Converts the string of the project to the type `AnitaUniversalDataStorage`\r\n   */\r\n  private parseFileContents(): void {\r\n    this.projectData = JSON.parse(this.fileContents);\r\n  }\r\n\r\n  /**\r\n   * Initialize the DbConnector instance\r\n   */\r\n  private async initializeDb(): Promise<void> {\r\n    dbInstances[this.projectData[RESERVED_UDS_KEYS._settings][0].id] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.localProjectSettings }).init();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the action to add the project to the list of projects\r\n   */\r\n  private dispatchProject(payload: ProjectSettings): void {\r\n    store.dispatch({ type: REDUX_ACTIONS.addProjectToList, payload });\r\n  }\r\n\r\n}\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectFileImporter } from 'app/libs/projects-helpers/file-handle-helpers/project-file-importer.class';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nexport const ProjectsNone = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleClickImport = async () => {\r\n    await new ProjectFileImporter().import()\r\n    navigate(ANITA_URLS.projectsList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container px-5 py-24 mx-auto\">\r\n      <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n        <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n          <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">No projects found</h2>\r\n          <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">You do not have any Projects on this device yet</h1>\r\n          <p className=\"leading-relaxed mb-3\">You can create a new project or import one from an existing project file.</p>\r\n          <div className=\"flex flex-wrap mt-7\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={handleClickImport}\r\n              className=\"flex-grow mx-2 mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n            >Import an existing project\r\n            </a>\r\n            <Link\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"flex-grow mx-2 mt-4 bg-gray-200 border-0 py-3 px-8 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            >Create a new project\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ProjectLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"ml-auto\">\r\n    <EditButton project={project} />\r\n    <Link to={urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-white inline-flex items-center leading-none text-sm bg-prussian-blue-400 hover:bg-prussian-blue-500 rounded\">\r\n      <i className=\"bi-info-circle mr-2\"></i>Project details\r\n    </Link>\r\n  </div>\r\n\r\n)","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\n\r\nexport class ProjectLoader {\r\n\r\n  /**\r\n   * The project info of the project to load\r\n   */\r\n  private projectInfo: LocalProjectSettings;\r\n\r\n  /**\r\n   * Creates an instance of ProjectLoader\r\n   * @param projectId the id of the projct to load\r\n   */\r\n  constructor(\r\n    private projectId: string\r\n  ) { }\r\n\r\n  public async loadProject(): Promise<void> {\r\n    await this.setProjectInfoFromIndexedDB();\r\n    await this.createNewInstanceOfDbConnectorForrProject();\r\n    this.callCurrentProjectSetter();\r\n  }\r\n\r\n  /**\r\n   * Loads project info from indexedDB\r\n   */\r\n  private async setProjectInfoFromIndexedDB() {\r\n    this.projectInfo = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects, { id: this.projectId }).single();\r\n  }\r\n\r\n  /**\r\n   * Creates new instance of dbConnector for the project so it can be used in the app\r\n   */\r\n  private async createNewInstanceOfDbConnectorForrProject() {\r\n    dbInstances[this.projectId] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.projectInfo }).init();\r\n  }\r\n\r\n  /**\r\n   * Calls current project setter to load the current project in the Redux store\r\n   */\r\n  private callCurrentProjectSetter() {\r\n    new CurrentProjectSetter(dbInstances[this.projectId].dbStore.db[RESERVED_UDS_KEYS._settings], dbInstances[this.projectId].dbStore.db[RESERVED_UDS_KEYS._sections]).set();\r\n  }\r\n\r\n}","import { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectLoader } from 'app/libs/project-helpers/project-handlers/project-loader.class';\r\n\r\nexport const ProjectNotLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <button onClick={() => new ProjectLoader(project.id).loadProject()} className=\"px-4 py-2 text-white ml-auto inline-flex items-center md:mb-2 lg:mb-0 rounded bg-green-500 hover:bg-green-600 text-sm\">\r\n    Load project\r\n  </button>\r\n)\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-loaded-footer.component';\r\nimport { ProjectNotLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const ProjectCard = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const projectState = useSelector((state: AnitaStore) => state.project);\r\n\r\n  return (\r\n    <div className=\" mt-4 h-full border-2 border-gray-200 border-opacity-60 rounded-lg bg-white\">\r\n      <div className=\"p-6\">\r\n        <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n        <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n        <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n        <p className=\"text-md\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.dateCreation))}</p>\r\n\r\n        <CardFooterItemsEnd>\r\n          <DeleteProjectButton project={project} />\r\n          {(\r\n            projectState === null ||\r\n            projectState[RESERVED_UDS_KEYS._settings][0].id !== project.id ||\r\n            dbInstances[project.id] === undefined\r\n          ) ? <ProjectNotLoadedFooter project={project} /> : <ProjectLoadedFooter project={project} />}\r\n        </CardFooterItemsEnd>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectFileImporter } from 'app/libs/projects-helpers/file-handle-helpers/project-file-importer.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectCard } from 'app/ui-react-components/projects/project-card.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n// Disabled rule as <a> and <button> would have different layouts\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nexport const ProjectsList = () => {\r\n\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n  const projects = useSelector((state: AnitaStore) => state.projects);\r\n  const projectsLenght = Array.isArray(projects) ? projects.length : 0;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const loadProjectsList = async () => {\r\n      await new ProjectsListLoader().load();\r\n      setHasLoaded(true);\r\n    }\r\n    if (isMounted)\r\n      loadProjectsList();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectsLenght]);\r\n\r\n  if (Array.isArray(projects) && projects.length === 0)\r\n    return <Navigate to={ANITA_URLS.projectsNone} />\r\n\r\n\r\n  if (!hasLoaded)\r\n    return <span></span>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"md:w-full bg-white border-b-2 rounded border-white\">\r\n        <div className=\"flex h-full border-t-2 border-prussian-blue-400 border-opacity-60 rounded justify-between\">\r\n          <div className=\"px-6 py-3\">\r\n            <h1 className=\"title-font text-md font-medium text-gray-900\">Projects on this device</h1>\r\n          </div>\r\n          <div className=\"my-2\">\r\n\r\n            <a data-tip data-for=\"importProject\"\r\n              href=\"#\"\r\n              onClick={() => new ProjectFileImporter().import()}\r\n              className=\"mx-2 my-2 text-white bg-prussian-blue-600 border-0 py-1 px-6 focus:outline-none hover:bg-prussian-blue-700 rounded font-bold text-sm\"\r\n            ><i className=\"bi bi-arrow-bar-down\"></i>\r\n            </a>\r\n            <ReactTooltip id=\"importProject\" effect=\"solid\">\r\n              <span>Import an existing project</span>\r\n            </ReactTooltip>\r\n\r\n\r\n            <Link data-tip data-for='createProject'\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"mx-2 my-2 text-white bg-prussian-blue-400 border-0 py-1 px-6 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            ><i className=\"bi bi-plus\"></i>\r\n            </Link>\r\n            <ReactTooltip id=\"createProject\" effect=\"solid\">\r\n              <span>Create a new project</span>\r\n            </ReactTooltip>\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"p-1 md:w-full\">\r\n        {projects.map((project, index) => (<ProjectCard key={project.id} project={project} />))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { AddEditSectionElement } from 'app/ui-react-components/project/add-edit-section-element.component';\r\nimport { ProjectDetails } from 'app/ui-react-components/project/project-details.component';\r\nimport { SectionElementDetails } from 'app/ui-react-components/project/section-element-details.component';\r\nimport { SectionElementsList } from 'app/ui-react-components/project/section-elements-list.component';\r\nimport { AddEditProject } from 'app/ui-react-components/projects/add-edit-project.component';\r\nimport { ProjectsNone } from 'app/ui-react-components/projects/no-projects.component';\r\nimport { ProjectsList } from 'app/ui-react-components/projects/projects-list.component';\r\nimport { Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nexport const AnitaRoutes = () => (\r\n  <Routes>\r\n    <Route path={ANITA_URLS.projectsList} element={<ProjectsList />} />\r\n    <Route path={ANITA_URLS.projectAdd} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectEdit} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectsNone} element={<ProjectsNone />} />\r\n    <Route path={ANITA_URLS.projectDetails} element={<ProjectDetails />} />\r\n\r\n    <Route path={ANITA_URLS.projectSectionElesList} element={<SectionElementsList />} />\r\n    <Route path={ANITA_URLS.projectSectionEleDetails} element={<SectionElementDetails />} />\r\n    <Route path={ANITA_URLS.projectSectionAddEle} element={<AddEditSectionElement />} />\r\n    <Route path={ANITA_URLS.projectSectionEditEle} element={<AddEditSectionElement />} />\r\n    <Route path=\"*\" element={<Navigate to={ANITA_URLS.projectsList} />}\r\n    />\r\n  </Routes>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst baseStyleOfSidebarLinks: string = \"block py-2.5 px-4 transition duration-200 border-l-2 hover:border-prussian-blue-700 hover:text-prussian-blue-500 text-sm font-semibold\";\r\n\r\nconst addActiveClassNameToBaseStyle = (currentPath: string, linkPath: string): string => {\r\n  if (currentPath === linkPath) {\r\n    return `${baseStyleOfSidebarLinks} border-prussian-blue-700`;\r\n  } else {\r\n    return `${baseStyleOfSidebarLinks} border-transparent`;\r\n  }\r\n}\r\n\r\nexport const nonProjectRoutes: Array<{ to: string; txt: string, icon: string }> = [\r\n  { to: ANITA_URLS.projectsList, txt: 'Projects', icon: 'bi-files' }\r\n];\r\n\r\nconst ProjectMenu = () => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const location = useLocation();\r\n\r\n\r\n  if (project === null)\r\n    return <span></span>\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n      <div className=\"block py-2.5 px-4\">\r\n        <p className=\"text-xs text-gray-600\">Current project:</p>\r\n        <p>{project[RESERVED_UDS_KEYS._settings][0].title}</p>\r\n      </div>\r\n      <div className=\"block py-2.5 px-4\">\r\n        <p className=\"text-xs text-gray-600\">Project sections:</p>\r\n      </div>\r\n      {project[RESERVED_UDS_KEYS._sections].map(section => {\r\n        const linkPath = urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: project[RESERVED_UDS_KEYS._settings][0].id }, { name: URL_PARAMS.sectionId, value: section.id }]);\r\n        return (<Link\r\n          key={section.id}\r\n          to={linkPath}\r\n          className={addActiveClassNameToBaseStyle(location.pathname, linkPath)}\r\n        ><i className=\"bi-chevron-compact-right\"></i><span className=\"ml-2\">{section.title}</span>\r\n        </Link>)\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport const SidebarMenu = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div>{\r\n      nonProjectRoutes.map(route => (<Link\r\n        key={route.to}\r\n        to={route.to}\r\n        className={addActiveClassNameToBaseStyle(location.pathname, route.to)}\r\n      ><i className={route.icon}></i><span className=\"ml-2\">{route.txt}</span>\r\n      </Link>)\r\n      )\r\n    }\r\n      < ProjectMenu />\r\n    </div>\r\n  );\r\n}","import { ReactNode } from 'react';\r\n\r\nexport const Content = (props: { children: ReactNode }) => (\r\n  <div className=\"flex-1 p-10 pt-5 overflow-auto\">\r\n    {props.children}\r\n  </div>\r\n);","import { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Header = () => {\r\n\r\n  const handleClickSidebar = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.toggleSidebar });\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white text-gray-700 flex h-14 shadow-md justify-between\">\r\n      <button className=\"mobile-menu-button p-4 focus:outline-none  md:hidden\" onClick={handleClickSidebar}>\r\n        <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div className=\"relative flex items-center lg:w-auto lg:static md:pl-5 -ml-7 md:ml-0\">\r\n        <Link to=\"/\" className=\"text-lg font-bold leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap uppercase\">\r\n          <img src={`${process.env.PUBLIC_URL}/assets/logo/logo_square.svg`} style={{ height: '30px', width: 'auto' }} alt=\"Anita\" />\r\n        </Link>\r\n        <Link to=\"/\" className=\"hidden md:inline-block mr-4 py-2 whitespace-no-wrap text-prussian-blue-400\">\r\n          <span className=\"text-md font-bold leading-relaxed uppercase\">Anita</span><sup style={{ fontVariant: 'small-caps' }}>Beta</sup>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"visible md:hidden\">&#160;</div>\r\n\r\n    </div>\r\n  )\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { appVersion } from 'app/version';\r\nimport { ReactNode } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const Sidebar = (props: { children: ReactNode }) => {\r\n\r\n  const toggledClass = useSelector((store: AnitaStore) => store.layout.sidebar)\r\n\r\n  return (\r\n    <div className=\"py-5\">\r\n      <div className={`${toggledClass} sidebar h-full bg-white shadow rounded-sm text-prussian-blue-500 w-64 space-y-6 py-7 px-2 absolute inset-y-0 left-0 transform md:relative md:translate-x-0 transition duration-200 ease-in-out`}>\r\n        <nav>\r\n          {props.children}\r\n        </nav>\r\n        <div className=\"absolute bottom-1 text-xs text-gray-400\">\r\n          <p className=\"inline-block mr-1\">v{appVersion}</p>|\r\n          <a className=\"ml-1\" href=\"https://github.com/anita-app/anita/issues\" target=\"_blank\" rel=\"noreferrer\">\r\n            <i className=\"bi-bug\" data-tip data-for=\"reportBug\"></i>\r\n            <ReactTooltip id=\"reportBug\" effect=\"solid\">\r\n              <span>Report a bug</span>\r\n            </ReactTooltip>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","/**\n * Auto generated file, do not edit.\n */\n\nexport const appVersion = '0.8.1';\n","import { AnitaRoutes } from 'app/anita-routes/anita-routes.component';\r\nimport { SidebarMenu } from 'app/ui-react-components/admin-layout/components/sidebar-menu.component';\r\nimport { Content } from 'app/ui-react-components/admin-layout/content.component';\r\nimport { Header } from 'app/ui-react-components/admin-layout/header.component';\r\nimport { Sidebar } from 'app/ui-react-components/admin-layout/sidebar.component';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nexport const AdminLayout = () => (\r\n  <Router>\r\n    <Header />\r\n    <div className=\"relative admin-container flex\">\r\n      <Sidebar>\r\n        <SidebarMenu />\r\n      </Sidebar>\r\n      <Content>\r\n        <AnitaRoutes />\r\n      </Content>\r\n    </div>\r\n  </Router>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { store } from 'app/libs/redux/state.store';\r\nimport { Startupper } from 'app/libs/startupper/startupper.class';\r\nimport { AdminLayout } from 'app/ui-react-components/admin-layout/admin-layout.component';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nnew Startupper().init();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AdminLayout />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}