{"version":3,"sources":["app/libs/redux/redux-actions.const.ts","app/libs/redux/reducers/form-element.reducer.ts","app/data/model/form-model-commons.ts","app/libs/redux/reducers/form-eles-valid-state.reducer.ts","app/data/form-models/system-fields-for-sections.constant.ts","app/data/model/project-info.ts","app/data/sections/local-settings.const.ts","app/libs/id-creator/id-creator.class.ts","app/libs/redux/reducers/form-project.reducer.ts","app/libs/redux/reducers/layout.reducer.ts","app/libs/redux/reducers/sections-for-child-of-selector.reducer.ts","app/libs/redux/reducers.const.ts","app/libs/redux/reducers/project.reducer.ts","app/libs/redux/reducers/projects.reducer.ts","app/libs/redux/state.store.ts","app/data/sections/projects.const.ts","app/data/auds-system-sections.enum.ts","app/data/client-sections.enum.ts","app/data/db-instances.const.ts","app/data/sections/auds-sections.const.ts","app/data/sections/auds-settings.const.ts","app/libs/db-connector/db-builder/default-values.constant.ts","app/libs/logger/logger.class.ts","app/libs/db-connector/db-builder/sez-builder.class.ts","app/ui-react-components/editor-mode.enum.ts","app/anita-routes/anita-routes.constant.ts","app/libs/db-connector/db-builder/data-structure-builder.class.ts","app/libs/db-connector/db-connector.class.ts","app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class.ts","app/libs/db-connector/plugins/indexed-db/db-deletor/db-deletor.class.ts","app/libs/db-connector/plugins/indexed-db/exporter.constant.ts","app/libs/db-connector/plugins/indexed-db/db-insertor/db-insertor.class.ts","app/libs/db-connector/plugins/indexed-db/db-selector/db-selector.class.ts","app/libs/db-connector/plugins/indexed-db/db-updator/db-updator.class.ts","app/libs/startupper/startupper.class.ts","app/libs/project-helpers/project-handlers/is-project-loaded.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class.ts","app/libs/tools/find-section-by-id.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/required-field.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/validators-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component.tsx","app/libs/tools/check-is-valid-value-for-controlled-react-form.function.ts","app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component.tsx","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function.ts","app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component.tsx","app/data/form-models/options-builder.constant.ts","app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component.tsx","app/libs/tools/find-first-user-defined-field.function.ts","app/libs/tools/tools.ts","app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class.ts","app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class.ts","app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function.tsx","app/ui-react-components/shared-components/forms-automator/form-automator.component.tsx","app/ui-react-components/project/add-edit-components/form-element-manager.component.tsx","app/libs/project-helpers/section-elements-handlers/element-saver.class.ts","app/ui-react-components/project/add-edit-components/save-element.component.tsx","app/ui-react-components/shared-components/common-ui-eles/main-content-container.component.tsx","app/ui-react-components/shared-components/loader/loader.component.tsx","app/ui-react-components/project/add-edit-section-element.component.tsx","app/libs/projects-helpers/projects-handlers/projects-list-loader.class.ts","app/libs/project-helpers/project-handlers/project-deletor.class.ts","app/ui-react-components/shared-components/buttons/delete-project.component.tsx","app/anita-routes/url-param-fillers.function.ts","app/ui-react-components/shared-components/buttons/edit-project-button.component.tsx","app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component.tsx","app/ui-react-components/project/project-details.component.tsx","app/libs/project-helpers/get-parent-info-for-details-view.class.ts","app/ui-react-components/project/details-components/parents-link-shower.component.tsx","app/ui-react-components/project/values-renderers/basic-text.component.tsx","app/ui-react-components/project/values-renderers/check-box-as-check.component.tsx","app/ui-react-components/project/values-renderers/formatted-date-time.component.tsx","app/ui-react-components/project/values-renderers/formatted-date.component.tsx","app/ui-react-components/project/values-renderers/text-from-options-by-value.component.tsx","app/libs/project-helpers/txt-by-field-value.function.ts","app/ui-react-components/project/values-renderers/custom-render-picker.component.tsx","app/ui-react-components/shared-components/buttons/add-edit-element-button.component.tsx","app/ui-react-components/project/section-element-details.component.tsx","app/ui-react-components/project/list-components/td-with-link-to-details.component.tsx","app/ui-react-components/project/list-components/tableList.component.tsx","app/ui-react-components/project/no-section-data.component.tsx","app/ui-react-components/project/section-elements-list.component.tsx","app/data/form-models/project-form-fields-model.constant.ts","app/libs/project-helpers/project-handlers/current-project-setter.class.ts","app/libs/db-connector/plugins/file-handles/db-deletor/db-deletor.class.ts","app/libs/db-connector/crypter/options.constant.ts","app/libs/db-connector/crypter/string-crypter.function.ts","app/libs/db-connector/crypter/string-decrypter.function.ts","app/libs/db-connector/crypter/crypt-helper.class.ts","app/libs/db-connector/crypter/encrypter.class.ts","app/libs/db-connector/plugins/file-handles/helpers/fs-helper.ts","app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class.ts","app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class.ts","app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class.ts","app/libs/db-connector/plugins/file-handles/db-insertor/db-insertor.class.ts","app/libs/db-connector/crypter/decrypter.class.ts","app/libs/db-connector/plugins/file-handles/db-selector/db-selector.class.ts","app/data/data-structure-extender.class.ts","app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function.ts","app/libs/db-connector/plugins/file-handles/db-store/dbstore.class.ts","app/libs/db-connector/plugins/file-handles/exporter.constant.ts","app/libs/db-connector/plugins/file-handles/db-updator/db-updator.class.ts","app/libs/project-helpers/project-handlers/project-saver.class.ts","app/data/form-models/section-builder.constant.ts","app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/section-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/form-project-manager.component.tsx","app/ui-react-components/projects/add-edit-project.component.tsx","app/libs/projects-helpers/file-handle-helpers/project-file-importer.class.ts","app/ui-react-components/projects/no-projects.component.tsx","app/ui-react-components/projects/project-card-components/project-loaded-footer.component.tsx","app/libs/project-helpers/project-handlers/project-loader.class.ts","app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component.tsx","app/ui-react-components/projects/project-card.component.tsx","app/ui-react-components/projects/projects-list.component.tsx","app/anita-routes/anita-routes.component.tsx","app/ui-react-components/admin-layout/components/sidebar-menu.component.tsx","app/ui-react-components/admin-layout/content.component.tsx","app/ui-react-components/admin-layout/header.component.tsx","app/ui-react-components/admin-layout/sidebar.component.tsx","app/version.ts","app/ui-react-components/admin-layout/admin-layout.component.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["REDUX_ACTIONS","FORM_COMPONENTS_CODES","formElementState","element","initialState","RESERVED_FIELDS","SELECTABLE_FORM_ELES","value","basicInput","label","basicTextarea","basicCheckbox","basicSelect","basicRadio","datePicker","dateTimePicker","RESERVED_UDS_KEYS","hiddenInput","id","dateCreation","LOCAL_SETTINGS_KEYS","IdCreator","name","aliasDate","Date","toUTCString","toISOString","randNumber","Math","floor","random","CryptoES","SHA256","toString","original","_settings","_sections","project","sidebar","sectionsForChildOfSelectorState","REDUCERS","state","action","type","setCurrentProject","payload","projects","addProjectToList","concat","setProjectList","sectionsForChildOfSelector","addSectionForChildOfSelector","editableState","length","index","findIndex","sectionDeclaration","position","push","formElesValidState","setValidStateForEle","formEleId","valid","unsetValidStateForEle","copyState","Object","keys","forEach","key","startsWith","formElement","updateFormElement","formProject","setFormProject","cloneDeep","updateFormProjectSettings","updateFormProjectAddSection","title","formModel","updateFormProjectUpdateSection","copy3","section","updateFormProjectUpdateFormModelOfSection","copy4","indexSection","indexFormElement","updateFormProjectAddFieldToSection","copy5","updateFormProjectRemoveFieldFromSection","copy6","sectionIndex","splice","fieldIndex","updateFormProjectRemoveSection","copy7","updateFormProjectUpdateFormModelAddOption","copy8","updateFormProjectUpdateFormModelDeleteOption","copy9","indexOptions","updateFormProjectUpdateFormModelOptionValue","copy10","layout","toggleSidebar","newState","combinedReducers","combineReducers","store","createStore","localSettings","fields","AUDS_SYSTEM_SECTIONS","CLIENT_SECTIONS","previousVersions","CLIENT_SEZ_DEFINITIONS","dbInstances","system","undefined","auds_sections","pk","auds_settings","AUDS_SYSTEM_SECTIONS_DEFINITIONS","DEFAULT_PK","DEFAULT_PARENTS_IDENTIFIER","parentsInfo","DEFAULT_OWNER_IDENTIFIER","createdBy","Logger","desc","arrMsg","JSON","stringify","doLog","list","isEmptyList","stringList","Array","isArray","listFromArray","listFromObject","substring","line","spacesForListeles","formatValueForList","txt","extra","isPrimitiveValue","data","methodName","date","debug","console","join","EDITOR_MODE","URL_PARAMS","SezBuilder","allSez","indexes","orderBy","childOf","parentsIdentifiers","ownerIdentifier","this","addPkToFields","addPkToIndexes","addSpecialFieldsToFields","setOwnerIdentifier","checkOrderByExists","checkRelations","checkParentIdentifier","buildSez","includes","unshift","scope","fieldName","loopAllRelations","sezName","checkRelationsExist","getSezByName","indexInScope","indexOf","error","foundIndex","counter","addChildOf","DataStructureBuilder","ds","sez","sezParams","make","addToTempDs","DbConnector","executers","options","addSystemSections","dbStore","DS","assign","initDB","Error","insertor","args","selector","updator","deletor","DbStore","dbConnector","db","lastPreviousVersionScheme","indexedDbName","setDb","currentVersion","versionSezs","handlePreviousVersion","buildVersionDb","Dexie","version","versionDS","tables","stores","QueryHelper","arraysWhere","arraysWhereLen","dexieWhere","whereArr","objFieldsNValues","arrSearch","includeLower","includeUpper","field","lowerBound","upperBound","filter","operator","item","where","logic","result","QueryMaker","table","collection","dexieFilters","arrWhere","new_where","order","complexSelect","methodToExecute","handleDebug","objSearch","get","res","eleToReturn","fieldNValues","buildArrayFildsNValues","toArray","betweenSearchParams","buildBetweenSearchParams","between","buildFilter4Dexie","all_records","toCollection","chainFilters","and","sortBy","copy","put","update","count","delete","promises","clear","Promise","all","typeToShow","toShow","raw","DbDeletor","aliasElementToDelete","addWhere","INDEXEDDB_PLUGIN","insert","catch","err","qe","setUpSelect","setQuery","executeSelect","setOrder","setOrderBy","select","Startupper","systemDbName","info","initSystemIndexedDb","setLoggerDebug","init","React","createElement","isReactDev","ANITA_URLS","projectsNone","projectsList","projectAdd","add","projectEdit","edit","projectId","projectDetails","projectSectionElesList","sectionId","projectSectionAddEle","projectSectionEditEle","elementId","projectSectionEleDetails","isProjectLoaded","ParentInfoFormEleBuilder","sections","parentInfoFormModel","setOptions","setParentSelector","sectionName","sectionInfo","find","componentCode","parentsSelector","findSectionById","toFindId","FormEleContainer","children","width","className","FormElementLabel","RequiredField","formEle","fieldId","touched","useEffect","dispatch","ValidatorsContainer","props","validators","required","BasicCheckbox","handleChange","useState","setTouched","useRef","uniqueId","current","validStore","useSelector","isInValid","some","checked","Reflect","has","onChange","event","target","onBlur","checkIsValidValueForControlledReactForm","obj","calcWidth","FORM_ELEMENTS_CSS_CLASSES","FORM_ELEMENTS_CSS_CLASSES_ERR","BasicInput","placeholder","disabled","BasicRadio","map","option","BasicSelect","BasicTextarea","parentInfoObjToString","parentInfoObj","parentInfo","parentInfoStringToObjForOptionsGroup","selectOptions","group","opt","parentInfoStringToObj","ChildOfSelectorForSection","currentEditedProjectSections","setSelectOptions","isMounted","selectableSections","sectionDec","buildOptions","defaultValue","isMulti","newValue","DatePicker","dateFormat","DateTimePicker","HiddenInput","commonFields","optionsBuilderForAdding","optionsBuilderForEditing","SUCCESS_COLOR","DANGER_COLOR","SUCCESS_BTN_OUTLINE","DANGER_BTN_OUTLINE","getFormModelToUse","OptionsMaker","handleOptionsChange","handleClickAddOption","handleClickDeleteOption","optionElement","bind","onClick","data-tip","data-for","effect","findFirstUserDefinedField","sectionFormModel","firstUserDefinedFieldInfo","asyncForEach","array","callback","a","totalLength","OptionsForParentsSelector","optionsGroups","callSelector","multiple","sectionEles","createGroupOption","sectionLabel","indexFirstUserFiield","ele","ParentsSelector","getSelectOptions","PrerequisitesChecker","objValues","isIntegrated","prerequisites","loopPrerequisites","checkPrerequisites","prereq","prereqValue","setIsIntegrated","FieldSelector","shouldRender","setShouldRender","prerequisitesCheckerResult","integrates","optionsMaker","childOfSelectorForSection","formElesSwitcher","FormAutomator","propsForFormElesSwitcher","FormElementManager","build","ElementSaver","mode","sectionModelInDS","setSectionModel","checkAndSetPk","setDateCreation","deleteEmptyProps","callInsertor","autoInsert","setLastModifiedValueIfInEditMode","callUpdator","autoUpdate","prop","lastModified","SaveElement","validObj","navigate","useNavigate","handleClick","save","MainContentContainer","headerText","Loader","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","AddEditSectionElement","params","useParams","setElement","single","fetchElement","to","ProjectsListLoader","projectList","loadFromLocalDB","dispatchProjectList","ProjectDeletor","doDelete","reloadProjectList","callDeletor","autoDelete","load","DeleteProjectButton","isModalOpen","setIsModalOpen","closeFn","DeleteProjectModal","aria-labelledby","role","aria-modal","aria-hidden","urlParamFiller","url","paramsToFill","replace","RegExp","EditButton","CardFooterItemsEnd","LoadedProject","description","ProjectDetails","loadProject","style","minHeight","GetParentInfoForDetailsView","listOfParents","parentInfoForDetailsView","sectionIdElementId","processElement","arrInfo","split","ParentsLinkShower","parents","setParents","getParents","parent","BasicText","CheckBoxAsCheck","FormattedDateTime","FormattedDate","TextFromOptionsByValue","optionToReturn","txtByFieldValue","customRenderPicker","AddEditElementButton","icon","urlParamsToFill","SectionElementDetails","fetchData","formModels","ElementValuesViewer","ValueWithLabel","TdWithLinkToDetails","tdProps","navigation","TableList","sectionData","columns","colsToShoww","useMemo","Header","accessor","Cell","useSectionInfo","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","row","getRowProps","cells","cell","getCellProps","NoSectionData","sectionTitle","SectionElementsList","setSectionData","getSectionData","projectFormFieldsModel","CurrentProjectSetter","projectSettings","sectionsDefinitions","securePassEncrypter","stringCrypter","keyToUse","AES","encrypt","stringDecrypter","decrypt","CryptHelper","owner","undecryptedKey","keyIdentifier","setOwner","setUndecryptedKey","makeKeyIdentifier","userKeys","decryptUserKey","returnUserUnencryptedKey","encryptionKeys","keyToEncrypt","Encrypter","getUserKey","logNoKeyError","values","readFileHandleAsText","fileHandle","getFile","file","text","getNewFileHandle","opts","types","accept","window","showSaveFilePicker","contents","createWritable","writable","write","close","verifyPermission","withWrite","queryPermission","requestPermission","SaveProjectSettingsInIndexedDB","copyOfProjectSettings","setProjectSettingsClone","setFileHandleOnProjectSettingsClone","doStoreProjectSettings","ProjectFileHandleSaver","setData","saveDataToDisk","projectInfo","set","writeFile","ElementAdderToCollection","setSectionStore","checkIfElementInStoreAndSetIndex","addToStore","elements","check","DbInsertor","encrypted","handleEncryption","do","Decrypter","DbSelector","results","doSelect","filterKeys","eleToCheck","handleDecryption","i","DataStructureExtender","datastructure","buildSectionDefinition","sezDefinition","buildAndAddAllSections","addToTempTs","fileHandleChecker","initializeExistingProject","doReadFile","parseFileContents","makedDS","parse","extend","FILE_HANDLES_PLUGIN","ProjectSaver","projectDataToSave","setLastModified","initDbInstance","saveSettings","saveSections","fileHandleOnlyActions","sectionDetailsFormFieldsModel","commonAddAndEditFields","sectionFieldForNewItem","sectionFieldForEditing","SectionFormModelManager","formModelToUse","SectionManager","customFields","handleClickDeleteField","FormProjectManager","AddEditProject","setProject","fetchEProject","ProjectFileImporter","fileHandles","fileContents","projectData","localProjectSettings","askForFile","processFileHandles","initializeDb","showOpenFilePicker","then","handles","processFileHandle","dispatchProject","ProjectsNone","handleClickImport","import","href","ProjectLoadedFooter","ProjectLoader","setProjectInfoFromIndexedDB","createNewInstanceOfDbConnectorForrProject","callCurrentProjectSetter","ProjectNotLoadedFooter","ProjectCard","projectState","ProjectsList","hasLoaded","setHasLoaded","projectsLenght","loadProjectsList","AnitaRoutes","path","baseStyleOfSidebarLinks","addActiveClassNameToBaseStyle","currentPath","linkPath","nonProjectRoutes","ProjectMenu","location","useLocation","pathname","SidebarMenu","route","Content","strokeLinecap","strokeLinejoin","src","process","height","alt","fontVariant","Sidebar","toggledClass","rel","AdminLayout","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1912d912.chunk.js","sourcesContent":["/**\r\n * Supported reducer actions\r\n */\r\nexport enum REDUX_ACTIONS {\r\n  // LAYOUT\r\n  toggleSidebar = 1,\r\n  // PROJECTS\r\n  addProjectToList,\r\n  setProjectList,\r\n  // PROJECT\r\n  setCurrentProject,\r\n  // SECTIONS_FOR_CHILD_OF_SELECTOR\r\n  addSectionForChildOfSelector,\r\n  resetSectionForChildOfSelector,\r\n  // FORMS\r\n  setValidStateForEle,\r\n  unsetValidStateForEle,\r\n  updateFormElement,\r\n  setFormProject,\r\n  updateFormProjectSettings,\r\n  updateFormProjectAddSection,\r\n  updateFormProjectUpdateSection,\r\n  updateFormProjectUpdateFormModelOfSection,\r\n  updateFormProjectRemoveSection,\r\n  updateFormProjectAddFieldToSection,\r\n  updateFormProjectRemoveFieldFromSection,\r\n  updateFormProjectUpdateFormModelAddOption,\r\n  updateFormProjectUpdateFormModelDeleteOption,\r\n  updateFormProjectUpdateFormModelOptionValue\r\n};\r\n","import { SectionElement } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElementState {\r\n  element: SectionElement | undefined | null;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormElementState = {\r\n  element: null\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formElementReducer = (state: IFormElementState = formElementState, action: Action<REDUX_ACTIONS>): IFormElementState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.updateFormElement:\r\n      return {\r\n        element: { ...action.payload }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/**\r\n * Defines the Object that contains the prerequisite necessary to show a field of a form.\r\n * The key of the Object is the identifier of the field whose value must be checked.\r\n * The value of each key is an Array of all the possible values that fulfill the prerequsite.\r\n */\r\nexport interface Prerequisites {\r\n  [fieldToCheckIdentifier: string]: Array<string | number | boolean>;\r\n}\r\n\r\n/**\r\n * Supported input types.\r\n */\r\nexport type InputTypes = 'color' | 'date' | 'datetime-local' | 'email' | 'hidden' | 'month' | 'number' | 'password' | 'range' | 'reset' | 'tel' | 'text' | 'time' | 'url' | 'week';\r\n\r\n/**\r\n * Supported css classes defining the width of each field of a row of a form.\r\n */\r\nexport type FormEleWidths = string;\r\n\r\n/**\r\n * Defines the structure of possible choices to be selected in a Radio or Select html element.\r\n */\r\nexport interface OptionKeysModelGroup {\r\n  label: string;\r\n  options: Array<OptionKeysModel>;\r\n}\r\n\r\n/**\r\n * Defines the structure of possible choices to be selected in a Radio or Select html element.\r\n */\r\nexport interface OptionKeysModel {\r\n  value: string | number;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * Values to identify the form component to dynamically load.\r\n *\r\n * @remarks\r\n * These values are stored in each `Section` in `AnitaUniversalDataStorage['sections']` so their number __must__ not be changed. Element can be added freely.\r\n */\r\nexport enum FORM_COMPONENTS_CODES {\r\n  basicInput = 1,\r\n  basicTextarea = 2,\r\n  basicCheckbox = 3,\r\n  basicSelect = 4,\r\n  basicRadio = 5,\r\n  hiddenInput = 6,\r\n  optionsMaker = 7,\r\n  datePicker = 8,\r\n  dateTimePicker = 9,\r\n  childOfSelectorForSection = 10,\r\n  parentsSelector = 11\r\n}\r\n\r\n/**\r\n * Defines the value of the Select element for picking the type of Component for a field.\r\n */\r\nexport const SELECTABLE_FORM_ELES: Array<OptionKeysModel> = [\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicInput,\r\n    label: 'Short text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicTextarea,\r\n    label: 'Long text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    label: 'Check box'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicSelect,\r\n    label: 'Drop-down list'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicRadio,\r\n    label: 'Alternative choice'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.datePicker,\r\n    label: 'Date picker'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.dateTimePicker,\r\n    label: 'Date & time picker'\r\n  }\r\n];\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElesValidState {\r\n  [formEleUniqueId: string]: boolean;\r\n}\r\n\r\n/**\r\n * The initial state of the form-eles-valid-state reducer\r\n */\r\nconst initialState: IFormElesValidState = {};\r\n\r\n/**\r\n * The reducer function that sets the valid state of the form elements\r\n */\r\nexport const formElesValidStateReducer = (state: IFormElesValidState = initialState, action: Action<REDUX_ACTIONS>): IFormElesValidState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setValidStateForEle:\r\n      return { ...state, [action.payload.formEleId]: action.payload.valid };\r\n    case REDUX_ACTIONS.unsetValidStateForEle:\r\n      const copyState = { ...state };\r\n      Object.keys(copyState).forEach(key => {\r\n        if (key.startsWith(action.payload))\r\n          delete copyState[key];\r\n      });\r\n      return copyState;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Defines the fields name that are reserved for the functioning of Anita.\r\n * These fields names cannot be assigned as the value of the `fieldName` of sections' fields.\r\n */\r\nexport enum RESERVED_FIELDS {\r\n  id = 'id',\r\n  dateCreation = 'dateCreation',\r\n  parentsInfo = 'parentsInfo',\r\n  lastModified = 'lastModified',\r\n  createdBy = 'createdBy'\r\n}\r\n\r\n/**\r\n * Fields that must be included in each Section of a Project.\r\n *\r\n * @see SectionGenerator\r\n */\r\nexport const systemFieldsForSections: Array<FormFieldsModel<SectionElement>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.dateCreation\r\n  }\r\n];\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Reserved keys are needed to store system required properties.\r\n *\r\n * @remarks\r\n * Users can still pick any of these as section names as sections are stored using their system-generated `id` as key.\r\n */\r\nexport enum RESERVED_UDS_KEYS {\r\n  _settings = '_settings',\r\n  _sections = '_sections'\r\n}\r\n\r\n/**\r\n * Data structure of Anita, composed of both SystemData and UserData.\r\n */\r\nexport type AnitaUniversalDataStorage = SystemData & UserData;\r\n\r\n/**\r\n * Store for system required properties. Includes general settings and Sections declarations. The reserved keys define system required properties.\r\n */\r\nexport type SystemData = {\r\n  [RESERVED_UDS_KEYS._settings]: Array<ProjectSettings>;\r\n  [RESERVED_UDS_KEYS._sections]: Array<Section>;\r\n};\r\n\r\n/**\r\n * Sections' data, stored in a Object, where the key is the section `id` and the value is a `Array<SectionElement>`.\r\n */\r\nexport type UserData = {\r\n  [sectionId: string]: Array<SectionElement>;\r\n};\r\n\r\n/**\r\n * Defines the structure of the general information on a project.\r\n */\r\nexport interface ProjectSettings {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  dateCreation: string;\r\n  lastModified?: string;\r\n  encrypted?: boolean;\r\n}\r\n\r\n/**\r\n * Info on Projects saved in IndexedDB to know what project are on the device.\r\n */\r\nexport interface LocalProjectSettings extends ProjectSettings {\r\n  fileHandle?: FileSystemFileHandle;\r\n}\r\n\r\n/**\r\n * Defines the properties of user defined fields of a `Section`\r\n *\r\n * @remarks\r\n * These fields are for the object to be stored in `sections.formModel[]` of the `AnitaUniversalDataStorage` store.\r\n */\r\nexport interface SectionCustomFieldProperties {\r\n  componentCode: FORM_COMPONENTS_CODES;\r\n  fieldName: string;\r\n  label?: string;\r\n  options?: Array<OptionKeysModel>;\r\n  required?: boolean;\r\n  externalLabel?: boolean;\r\n  value?: any;\r\n  width?: number;\r\n  [RESERVED_FIELDS.id]?: never;\r\n  [RESERVED_FIELDS.dateCreation]?: never;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum properties of a `Section` of a Project.\r\n */\r\nexport interface SectionDetailsDeclaration {\r\n  id: string;\r\n  title: string;\r\n  childOf?: Array<string>;\r\n  [RESERVED_FIELDS.dateCreation]?: never;\r\n}\r\n\r\n/**\r\n * Defines the full properties of a Section.\r\n */\r\nexport interface Section extends SectionDetailsDeclaration {\r\n  formModel: Array<FormFieldsModel<SupportedFormsTypes>>;\r\n}\r\n\r\n/**\r\n * Defines the properties of each parent to which a element is connected.\r\n */\r\nexport interface ParentInfoForDetailsView {\r\n  txt: string;\r\n  sectionId: string;\r\n  element: SectionElement;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum fields of an `Element` of a `Section`.\r\n */\r\nexport interface SectionElement {\r\n  [RESERVED_FIELDS.id]?: string;\r\n  [RESERVED_FIELDS.dateCreation]?: string;\r\n  [RESERVED_FIELDS.createdBy]?: string;\r\n  [RESERVED_FIELDS.parentsInfo]?: Array<string>;\r\n  [RESERVED_FIELDS.lastModified]?: string;\r\n  [key: string]: any;\r\n}\r\n","import { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table localSettings and its fields for the `indexedDb` plugin of `db-connector`\r\n */\r\nexport const localSettings: SectionDefinition<LocalSettingsData<LOCAL_SETTINGS_KEYS>> = {\r\n  name: 'localSettings',\r\n  fields: [\r\n    'data'\r\n  ]\r\n};\r\n\r\n/**\r\n * Constant to uniquely identify values of local settings.\r\n * As of now there are no settings yet to save, so we keep `testData`.\r\n */\r\nexport enum LOCAL_SETTINGS_KEYS {\r\n  testData = 1\r\n}\r\n\r\n/**\r\n * Defines the expected data structure to be saved in `localSettings`.\r\n */\r\nexport interface LocalSettingsData<T extends LOCAL_SETTINGS_KEYS> {\r\n  id: T;\r\n  data: DataByKey[T];\r\n}\r\n\r\n/**\r\n * Identifies the data type saved in `localSettings` by the enum value of `LOCAL_SETTINGS_KEYS`.\r\n */\r\ninterface DataByKey {\r\n  [LOCAL_SETTINGS_KEYS.testData]: unknown;\r\n}\r\n\r\n/**\r\n * Example of the method to store data in localSettings:\r\n *\r\n * private saveLocalSettings<T extends LOCAL_SETTINGS_KEYS>(id: T, data: DataByKey[T]): void {\r\n *   dbInsertor(CLIENT_SECTIONS.localSettings, { id, data }).autoInsert();\r\n * }\r\n */\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Randomly generated strings hasehd with sha256 to be used as unique identifiers\r\n */\r\nexport class IdCreator {\r\n\r\n  /**\r\n   * Makes a unique random string with the a name \r\n   */\r\n  public static make(name: string): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${name}${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n  /**\r\n   * Makes a unique completely random string\r\n   */\r\n  public static random(): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n}\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport interface IFormProjectState {\r\n  original: Partial<SystemData>;\r\n  project: Partial<SystemData>;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormProjectState = {\r\n  original: {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  },\r\n  project: {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formProjectReducer = (state: IFormProjectState = formElementState, action: Action<REDUX_ACTIONS>): IFormProjectState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setFormProject:\r\n      // Here we need a deep copy of the project to leave the source unchanged in case the user cancel the edits, \r\n      // and to \"unlink\" the Object set on the `project` key from the one set on the `original` key.\r\n      return { original: action.payload, project: cloneDeep(action.payload) };\r\n    case REDUX_ACTIONS.updateFormProjectSettings:\r\n      return {\r\n        original: state.original,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_UDS_KEYS._settings]: [{ ...action.payload }]\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectAddSection:\r\n      return {\r\n        original: state.original,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_UDS_KEYS._sections]: state.project[RESERVED_UDS_KEYS._sections].concat({\r\n            id: IdCreator.random(),\r\n            title: \"\",\r\n            formModel: [{} as any]\r\n          })\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectUpdateSection:\r\n      const copy3 = { original: state.original, project: { ...state.project } };\r\n      copy3.project[RESERVED_UDS_KEYS._sections][action.payload.index] = { ...action.payload.section };\r\n      return copy3;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection:\r\n      const copy4 = { original: state.original, project: { ...state.project } };\r\n      copy4.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement] = { ...action.payload.formElement };\r\n      return copy4;\r\n    case REDUX_ACTIONS.updateFormProjectAddFieldToSection:\r\n      const copy5 = { original: state.original, project: { ...state.project } };\r\n      copy5.project[RESERVED_UDS_KEYS._sections][action.payload].formModel.push({} as any);\r\n      return copy5;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection:\r\n      const copy6 = { original: state.original, project: { ...state.project } };\r\n      copy6.project[RESERVED_UDS_KEYS._sections][action.payload.sectionIndex].formModel.splice(action.payload.fieldIndex, 1);\r\n      return copy6;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveSection:\r\n      const copy7 = { original: state.original, project: { ...state.project } };\r\n      copy7.project[RESERVED_UDS_KEYS._sections].splice(action.payload, 1);\r\n      return copy7;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption:\r\n      const copy8 = { original: state.original, project: { ...state.project } };\r\n      copy8.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].push({ label: \"\", value: \"\" } as OptionKeysModel);\r\n      return copy8;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption:\r\n      const copy9 = { original: state.original, project: { ...state.project } };\r\n      copy9.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].splice(action.payload.indexOptions, 1);\r\n      return copy9;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue:\r\n      const copy10 = { original: state.original, project: { ...state.project } };\r\n      copy10.project[RESERVED_UDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'][action.payload.indexOptions] = action.payload.formElement;\r\n      return copy10;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface ILayoutState {\r\n  sidebar: string;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: ILayoutState = {\r\n  sidebar: '-translate-x-full'\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const layoutReducer = (state: ILayoutState = formElementState, action: Action<REDUX_ACTIONS>): ILayoutState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.toggleSidebar:\r\n      const newState = { ...state };\r\n      newState.sidebar = newState.sidebar === '-translate-x-full' ? '' : '-translate-x-full';\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SectionDetailsDeclaration } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the sections selectable by the child of selector\r\n */\r\nconst sectionsForChildOfSelectorState: Array<SectionDetailsDeclaration> = [];\r\n\r\n/**\r\n * Updates the sections selectable by the child of selector component\r\n * \r\n * @see ChildOfSelectorForSectionComponent\r\n */\r\nexport const sectionsForChildOfSelectorReducer = (state: Array<SectionDetailsDeclaration> = sectionsForChildOfSelectorState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addSectionForChildOfSelector:\r\n      const editableState = state.concat();\r\n\r\n      if (!editableState.length)\r\n        editableState.push(action.payload);\r\n      else {\r\n        const index = editableState.findIndex(sectionDeclaration => sectionDeclaration.id === action.payload.id);\r\n        const position = index >= 0 ? index : editableState.length;\r\n        editableState[position] = action.payload;\r\n      }\r\n      return editableState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings, SectionDetailsDeclaration, SystemData } from 'app/data/model/project-info';\r\nimport { formElementReducer, IFormElementState } from 'app/libs/redux/reducers/form-element.reducer';\r\nimport { formElesValidStateReducer, IFormElesValidState } from 'app/libs/redux/reducers/form-eles-valid-state.reducer';\r\nimport { formProjectReducer, IFormProjectState } from 'app/libs/redux/reducers/form-project.reducer';\r\nimport { ILayoutState, layoutReducer } from 'app/libs/redux/reducers/layout.reducer';\r\nimport { projectReducer } from 'app/libs/redux/reducers/project.reducer';\r\nimport { projectsReducer } from 'app/libs/redux/reducers/projects.reducer';\r\nimport { sectionsForChildOfSelectorReducer } from 'app/libs/redux/reducers/sections-for-child-of-selector.reducer';\r\n\r\n/**\r\n * Supported reducers\r\n */\r\nexport const REDUCERS = {\r\n  project: projectReducer,\r\n  projects: projectsReducer,\r\n  sectionsForChildOfSelector: sectionsForChildOfSelectorReducer,\r\n  formElesValidState: formElesValidStateReducer,\r\n  formElement: formElementReducer,\r\n  formProject: formProjectReducer,\r\n  layout: layoutReducer\r\n};\r\n\r\n/**\r\n * Types managed by reducers\r\n */\r\nexport interface AnitaStore {\r\n  project: SystemData;\r\n  projects: Array<LocalProjectSettings>;\r\n  sectionsForChildOfSelector: Array<SectionDetailsDeclaration>;\r\n  formElesValidState: IFormElesValidState;\r\n  formElement: IFormElementState;\r\n  formProject: IFormProjectState;\r\n  layout: ILayoutState;\r\n}\r\n","import { SystemData } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst projectState: SystemData = null;\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const projectReducer = (state: SystemData = projectState, action: Action<REDUX_ACTIONS>): SystemData => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setCurrentProject:\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nexport const projectsState: Array<LocalProjectSettings> = null;\r\n\r\n/**\r\n * Updates the projectsState\r\n */\r\nexport const projectsReducer = (state: Array<LocalProjectSettings> = projectsState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addProjectToList:\r\n      return state.concat(action.payload);\r\n    case REDUX_ACTIONS.setProjectList:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { REDUCERS } from 'app/libs/redux/reducers.const';\r\nimport { combineReducers, createStore } from 'redux';\r\n\r\nconst combinedReducers = combineReducers(REDUCERS)\r\n\r\nexport const store = createStore(combinedReducers);","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table projects and its fields for the `indexedDb` plugin of `db-connector`.\r\n * In the table `projects` are stored only the essential information needed to load the project from its data source.\r\n */\r\nexport const projects: SectionDefinition<LocalProjectSettings> = {\r\n  name: 'projects',\r\n  fields: [\r\n    'title',\r\n    'fileHandle',\r\n    'description',\r\n    RESERVED_FIELDS.dateCreation\r\n  ]\r\n};\r\n","import { auds_sections } from 'app/data/sections/auds-sections.const';\r\nimport { auds_settings } from 'app/data/sections/auds-settings.const';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport enum AUDS_SYSTEM_SECTIONS {\r\n  auds_settings = 1,\r\n  auds_sections\r\n}\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const AUDS_SYSTEM_SECTIONS_DEFINITIONS = [auds_settings, auds_sections];\r\n","import { localSettings } from 'app/data/sections/local-settings.const';\r\nimport { projects } from 'app/data/sections/projects.const';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport const CLIENT_SECTIONS = {\r\n  projects: projects.name,\r\n  localSettings: localSettings.name\r\n};\r\n\r\n/**\r\n * Optional on first version, required for changes to the structure of the DB\r\n * Must contain on Array for each previous version\r\n * Each array must contain the unaltered SezDefinitions of that version\r\n * \r\n * TODO with Dexie 3.x.x upgrading has been simplified, probably no longer needed.\r\n */\r\nexport const previousVersions: Array<Array<SectionDefinition<any>>> = [\r\n  // insert here previous version on DB structure change\r\n];\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const CLIENT_SEZ_DEFINITIONS = [projects, localSettings];\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport Dexie from 'dexie';\r\nimport { Db } from 'mongodb';\r\nimport * as mysql from 'mysql';\r\n\r\ninterface DbInstances {\r\n  system: DbConnectorInstance<Dexie>;\r\n  [projectIdentifier: string]: DbConnectorInstance<Dexie | Db | mysql.Connection | AnitaUniversalDataStorage>;\r\n}\r\n\r\nexport const dbInstances: DbInstances = {\r\n  system: undefined\r\n};\r\n","import { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _sections and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_sections: SectionDefinition<Section> = {\r\n  name: RESERVED_UDS_KEYS._sections,\r\n  pk: 'id',\r\n  fields: ['title', 'childOf', 'formModel']\r\n};\r\n","import { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _settings and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_settings: SectionDefinition<ProjectSettings> = {\r\n  name: RESERVED_UDS_KEYS._settings,\r\n  pk: 'id',\r\n  fields: ['title', 'dateCreation', 'description']\r\n};\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\n\r\n/**\r\n * Default primary key if none is specified.\r\n */\r\nexport const DEFAULT_PK = RESERVED_FIELDS.id;\r\n\r\n/**\r\n * Default parent identifier if none is specified.\r\n */\r\nexport const DEFAULT_PARENTS_IDENTIFIER = RESERVED_FIELDS.parentsInfo;\r\n\r\n/**\r\n * Default owner identifier if none is specified.\r\n */\r\nexport const DEFAULT_OWNER_IDENTIFIER = RESERVED_FIELDS.createdBy;\r\n","export class Logger {\r\n\r\n  /**\r\n   * Whether to print to the console debug info\r\n   */\r\n  public static debug = true;\r\n\r\n  /**\r\n   * Spaces to format list elements\r\n   */\r\n  private static spacesForListeles = '\\n                            - ';\r\n\r\n  // INFO\r\n\r\n  /**\r\n   * Formats in one line a description and a value\r\n   */\r\n  public static info<T>(desc: string, value?: T): string {\r\n    const arrMsg = (value) ? [`${desc}: ${JSON.stringify(value)}`] : [desc];\r\n    return Logger.doLog(arrMsg);\r\n  }\r\n\r\n  // LIST\r\n\r\n  /**\r\n   * Generates a list in the console for an array of strings\r\n   */\r\n  public static list(desc: string, list: Array<string> | Object): string {\r\n\r\n    if (Logger.isEmptyList(list))\r\n      Logger.doLog([desc, 'none']);\r\n\r\n    let stringList = (Array.isArray(list)) ? Logger.listFromArray(list) : Logger.listFromObject(list);\r\n\r\n    stringList = stringList.substring(0, stringList.length - 1);\r\n    stringList += '.';\r\n\r\n    return Logger.doLog([`${desc} ${stringList}`]);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a list is empty\r\n   */\r\n  private static isEmptyList(list: Array<string> | Object): boolean {\r\n    return (Array.isArray(list) && !list.length) || (typeof list === 'object' && !Object.keys(list).length);\r\n  }\r\n\r\n  /**\r\n   * Creates a list from an array\r\n   */\r\n  private static listFromArray(list: Array<string>): string {\r\n    let stringList = '';\r\n    list.forEach(line => { stringList += `${Logger.spacesForListeles}${Logger.formatValueForList(line)};`; });\r\n    return stringList;\r\n  }\r\n\r\n  /**\r\n   * Creates a list from a object \r\n   */\r\n  private static listFromObject(list: Object): string {\r\n    let stringList = '';\r\n    for (const key in list)\r\n      stringList += `${Logger.spacesForListeles}${key}: ${Logger.formatValueForList(list[key])};`;\r\n    return stringList;\r\n  }\r\n\r\n  // RAW\r\n\r\n  /**\r\n   * Same as console.log\r\n   */\r\n  public static raw(desc: string, txt?: any): string {\r\n    return Logger.doLog([`${desc}: `, txt]);\r\n  }\r\n\r\n  // ERROR\r\n\r\n  /**\r\n   * Same as console.error\r\n   */\r\n  public static error(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'error');\r\n  }\r\n\r\n  /**\r\n   * Same as console.warn\r\n   */\r\n  public static warn(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'warn');\r\n  }\r\n\r\n  // COMMON\r\n\r\n  /**\r\n   * Converts non primitive values to string \r\n   */\r\n  private static formatValueForList<T>(value: T): T | string {\r\n    return (Logger.isPrimitiveValue(value) || value === null) ? value : JSON.stringify(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is a primitive\r\n   */\r\n  private static isPrimitiveValue<T>(value: T): boolean {\r\n    switch (typeof value) {\r\n      case 'string':\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'undefined':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs text to the console if debug is `true`\r\n   */\r\n  private static doLog(data: Array<string | number>, methodName: 'log' | 'error' | 'warn' = 'log'): string {\r\n\r\n    const date = new Date().toISOString();\r\n    data[0] = `[${date}] ${data[0]}`;\r\n\r\n    if (Logger.debug === true)\r\n      console[methodName](...data);\r\n\r\n    return data.join('. ');\r\n  }\r\n\r\n}\r\n","import { DEFAULT_OWNER_IDENTIFIER, DEFAULT_PARENTS_IDENTIFIER, DEFAULT_PK } from 'app/libs/db-connector/db-builder/default-values.constant';\r\nimport { SectionDefinition, SectionModel, SectionName } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Builds a Section model\r\n */\r\nexport class SezBuilder<T> {\r\n\r\n  /**\r\n   * The section model\r\n   */\r\n  private section: SectionModel<T>;\r\n\r\n  /**\r\n   * Creates an instance of sez builder.\r\n   * @param allSez all the sections definitions of the data structure.\r\n   * @param name the section name to build.\r\n   * @param [fields] all fields. Optional as a section can have only the system fields.\r\n   * @param [pk] the primary key.\r\n   * @param [indexes] the indexes of the section (aka table).\r\n   * @param [orderBy] default sorting order.\r\n   * @param [childOf] list of sections of which the current section is child. Needed for the UI, to add the parent delector.\r\n   * @param [parentsIdentifiers] name of the field identifying the parent id value.\r\n   * @param [ownerIdentifier] name of the field identifying the id of the owner.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>,\r\n    private name: SectionName,\r\n    private fields: Array<keyof T> = [],\r\n    private pk: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private indexes: Array<keyof T> = [DEFAULT_PK] as Array<keyof T>,\r\n    private orderBy: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private childOf?: Array<SectionName>,\r\n    private parentsIdentifiers?: keyof T,\r\n    private ownerIdentifier?: keyof T & string\r\n  ) { }\r\n\r\n  /**\r\n   * Makes the section and returns it.\r\n   */\r\n  public make(): SectionModel<T> {\r\n    this.addPkToFields();\r\n    this.addPkToIndexes();\r\n    this.addSpecialFieldsToFields('indexes');\r\n    this.setOwnerIdentifier();\r\n    this.checkOrderByExists();\r\n    this.checkRelations();\r\n    this.checkParentIdentifier();\r\n    this.buildSez();\r\n    return this.section;\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to fields if not already included.\r\n   */\r\n  private addPkToFields(): void {\r\n    if (!this.fields.includes(this.pk))\r\n      this.fields.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to indexes if not already included.\r\n   */\r\n  private addPkToIndexes(): void {\r\n    if (!this.indexes.includes(this.pk))\r\n      this.indexes.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the fields specified in `indexes` to the fields, if not already included.\r\n   */\r\n  private addSpecialFieldsToFields(scope: 'indexes'): void {\r\n    this[scope].forEach(fieldName => {\r\n      if (!this.fields.includes(fieldName))\r\n        this.fields.push(fieldName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the owneridentifier value and adds it to the fields if not already included.\r\n   */\r\n  private setOwnerIdentifier(): void {\r\n    if (!this.ownerIdentifier)\r\n      this.ownerIdentifier = DEFAULT_OWNER_IDENTIFIER as keyof T & string;\r\n    if (!this.fields.includes(this.ownerIdentifier))\r\n      this.fields.push(this.ownerIdentifier);\r\n  }\r\n\r\n  /**\r\n   * Adds the orderBy value to fields if not already included.\r\n   */\r\n  private checkOrderByExists(): void {\r\n    if (!this.fields.includes(this.orderBy))\r\n      this.fields.push(this.orderBy);\r\n  }\r\n\r\n  /**\r\n   * Checks that the values of `childOf` correspond to valid section names.\r\n   */\r\n  private checkRelations(): void {\r\n    if (this.childOf)\r\n      this.loopAllRelations();\r\n  }\r\n\r\n  /**\r\n   * Loops all relations for a given scope and calls checkRelationsExist to check if the value is valid.\r\n   * Sets the scope to undefined if there are no valid relationships.\r\n   *\r\n   * @see checkRelationsExist\r\n   */\r\n  private loopAllRelations(): void {\r\n    this.childOf.forEach((sezName: SectionName) => this.checkRelationsExist(sezName));\r\n    if (!this.childOf.length)\r\n      this.childOf = undefined;\r\n  }\r\n\r\n  /**\r\n   * Checks that the section name found in `childOf` correponds to an actual section.\r\n   * If not, removes the section name from the list of sections in `childOf`.\r\n   * @param sezName the name of the section to look for\r\n   */\r\n  private checkRelationsExist(sezName: SectionName): void {\r\n    const indexSez = this.getSezByName(sezName);\r\n    if (indexSez >= 0)\r\n      return;\r\n\r\n    const indexInScope = this.childOf.indexOf(sezName as string);\r\n    this.childOf.splice(indexInScope, 1);\r\n\r\n    Logger.error(`Error in .childOf list`, `Section '${sezName}' does not exist in the sections list and has hence been removed from the .childOf list`);\r\n  }\r\n\r\n  /**\r\n   * Finds the section number by its name from the list of all the section definitions.\r\n   * @param sezName the name to look for\r\n   * @returns the section number\r\n   */\r\n  private getSezByName(sezName: SectionName): number {\r\n    let foundIndex = -1;\r\n    let counter = 0;\r\n    const length = this.allSez.length;\r\n    while (foundIndex === -1 && counter < length) {\r\n      if (this.allSez[counter].name === sezName)\r\n        foundIndex = counter;\r\n      counter++;\r\n    }\r\n    return foundIndex;\r\n  }\r\n\r\n  /**\r\n   * Checks that parentsIdentifiers is set if `childOf` has any section.\r\n   */\r\n  private checkParentIdentifier(): void {\r\n    if (this.childOf && !this.parentsIdentifiers)\r\n      this.parentsIdentifiers = DEFAULT_PARENTS_IDENTIFIER as keyof T;\r\n  }\r\n\r\n  /**\r\n   * Builds the section\r\n   */\r\n  private buildSez(): void {\r\n    this.section = {\r\n      name: this.name,\r\n      pk: this.pk,\r\n      indexes: this.indexes,\r\n      orderBy: this.orderBy,\r\n      fields: this.fields,\r\n      ownerIdentifier: this.ownerIdentifier\r\n    };\r\n    this.addChildOf();\r\n  }\r\n\r\n  /**\r\n   * Adds the filed `childOf` if any\r\n   */\r\n  private addChildOf(): void {\r\n    if (!this.childOf)\r\n      return;\r\n\r\n    this.section.childOf = this.childOf;\r\n    this.section.parentsIdentifiers = this.parentsIdentifiers;\r\n  }\r\n\r\n}\r\n","export enum EDITOR_MODE {\r\n  add = \"add\",\r\n  edit = \"edit\"\r\n}\r\n","import { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport enum URL_PARAMS {\r\n  projectId = 'projectId',\r\n  sectionId = 'sectionId',\r\n  elementId = 'elementId',\r\n  parentId = 'parentId'\r\n}\r\n\r\n/**\r\n * Lists all the routes in the application\r\n * \r\n * @remarks We can't use the enum approach here because we need to concat strings.\r\n */\r\nexport const ANITA_URLS = {\r\n  // PROJECTS\r\n  projectsNone: '/projects/none',\r\n  projectsList: '/projects/list',\r\n  projectAdd: `/projects/${EDITOR_MODE.add}`,\r\n  projectEdit: `/projects/${EDITOR_MODE.edit}/:${URL_PARAMS.projectId}`,\r\n  // PROJECT\r\n  projectDetails: `/project/:${URL_PARAMS.projectId}/info`,\r\n  projectSectionElesList: `/project/:${URL_PARAMS.projectId}/list/:${URL_PARAMS.sectionId}`,\r\n  projectSectionAddEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.add}`,\r\n  projectSectionEditEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.edit}/:${URL_PARAMS.elementId}`,\r\n  projectSectionEleDetails: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/details/:${URL_PARAMS.elementId}`,\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Builds the data structure of the DB from the section definitions and returns it.\r\n */\r\nexport class DataStructureBuilder {\r\n\r\n  /**\r\n   * The data structure to be returned.\r\n   */\r\n  private ds: AbstractModel = {};\r\n\r\n  /**\r\n   * Creates an instance of DataStructureBuilder.\r\n   * @param allSez the `Array` of all the definitions of the Sections (aka tables) of the DB.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>\r\n  ) { }\r\n\r\n  /**\r\n   * Loops all Sections and finally returns the data structure.\r\n   */\r\n  public make(): AbstractModel {\r\n    this.allSez.forEach(sez => this.buildSez<typeof sez>(sez));\r\n    return this.ds;\r\n  }\r\n\r\n  /**\r\n   * Builds the actual Section to be added to data structure.\r\n   */\r\n  private buildSez<T>(sezParams: SectionDefinition<T>): void {\r\n    const sez = new SezBuilder<T>(\r\n      this.allSez,\r\n      sezParams.name,\r\n      sezParams.fields,\r\n      sezParams.pk,\r\n      sezParams.indexes,\r\n      sezParams.orderBy,\r\n      sezParams.childOf,\r\n      sezParams.parentsIdentifiers,\r\n      sezParams.ownerIdentifier\r\n    ).make();\r\n    this.addToTempDs(sez);\r\n  }\r\n\r\n  /**\r\n   * Adds a Section to the class property `ds` using `name` as key.\r\n   */\r\n  private addToTempDs<T>(sez: SectionModel<T>): void {\r\n    this.ds[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { AUDS_SYSTEM_SECTIONS_DEFINITIONS } from 'app/data/auds-system-sections.enum';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DataStructureBuilder } from 'app/libs/db-connector/db-builder/data-structure-builder.class';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport {\r\n  DbConnectorInstance,\r\n  DbObjects,\r\n  DbStoreInterface,\r\n  Deletor,\r\n  DsDbInitOptions,\r\n  Insertor,\r\n  Selector,\r\n  Updator\r\n  } from 'app/libs/db-connector/models/executers';\r\n\r\n/**\r\n *  Initialize `db-connector` for the given storage (MySQL, IndexedDB, etc.)\r\n *\r\n * @param executers The plugin implementing the read/write operations on the DB\r\n * @param [options={}] Initialization options of the DB. These very depending on the plugin requirements (e.g. connection parameters)\r\n * @param [allSez] section definitions defining the data structure of the DB\r\n * @param [addSystemSections=true] whether to automatically build the data structure for system sections (`_settings` and `_sections`)\r\n */\r\nexport class DbConnector<DbTypes> implements DbConnectorInstance<DbTypes> {\r\n\r\n  public dbStore: DbStoreInterface<DbTypes>;\r\n  public DS: AbstractModel = {};\r\n\r\n  constructor(\r\n    private executers: DbObjects<unknown, DbTypes>,\r\n    public options: DsDbInitOptions = {},\r\n    private allSez: Array<SectionDefinition<any>> = [],\r\n    private addSystemSections: boolean = true\r\n  ) { }\r\n\r\n  public async init(): Promise<DbConnectorInstance<DbTypes>> {\r\n\r\n    if (this.addSystemSections)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(AUDS_SYSTEM_SECTIONS_DEFINITIONS).make());\r\n\r\n    if (this.allSez.length)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(this.allSez).make());\r\n\r\n    if (this.executers.dbStore)\r\n      this.dbStore = await new this.executers.dbStore(this, this.options).initDB();\r\n    else\r\n      throw new Error('No dbStore passed to DbConnector. To initialize DbConnector, you must pass a valid dbStore');\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the insertor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param element the alement to insert in the DB.\r\n   * @returns an instance of insertor (don't forget to call `autoInsert`)\r\n   */\r\n  public callInsertor<E>(section: keyof AbstractModel, element: E): Insertor<E> {\r\n    return new this.executers.insertor(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the selector of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of selector (don't forget to call `single` or `multiple` or `count`)\r\n   */\r\n  public callSelector<E>(section: keyof AbstractModel, args?: Partial<E>): Selector<E> {\r\n    return new this.executers.selector(this, section, args) as Selector<E>;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the updator of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the element to update in the DB.\r\n   * @returns an instance of updator (don't forget to call `autoUpdate`)\r\n   */\r\n  public callUpdator<E>(section: keyof AbstractModel, element: Partial<E>): Updator<E> {\r\n    return new this.executers.updator(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the deletor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of deletor (don't forget to call `autoDelete`)\r\n   */\r\n  public callDeletor<E>(section: keyof AbstractModel, args: Partial<E>): Deletor<E> {\r\n    return new this.executers.deletor(this, section, args);\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DataStructureBuilder } from 'app/libs/db-connector/db-builder/data-structure-builder.class';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { DbConnectorInstance, DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implementation of DbStore for IndexedDB with Dexie.\r\n */\r\nexport class DbStore implements DbStoreInterface<Dexie> {\r\n\r\n  public db: Dexie;\r\n  private lastPreviousVersionScheme = undefined;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private options: DsDbInitOptions\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<Dexie>> {\r\n\r\n    if (!this.dbConnector.options.indexedDbName)\r\n      throw Error('No name found in DsDbInitOptions. Please provide a name for the database by setting the name on the property indexedDbName in the options passed to DbConnector.');\r\n\r\n    this.setDb();\r\n\r\n    if (!this.options.previousVersions)\r\n      this.options.previousVersions = [];\r\n\r\n    const currentVersion = (this.options.previousVersions.length) ? this.options.previousVersions.length + 1 : 1;\r\n\r\n    if (this.options.previousVersions.length)\r\n      this.options.previousVersions.forEach((versionSezs, index) => this.handlePreviousVersion(versionSezs, index + 1));\r\n\r\n    this.buildVersionDb(this.dbConnector.DS, currentVersion);\r\n\r\n    return this;\r\n  }\r\n\r\n  public close(): void {\r\n    // not needed in IndexedDB\r\n  }\r\n\r\n  private setDb(): void {\r\n    this.db = new Dexie(this.dbConnector.options.indexedDbName);\r\n  }\r\n\r\n  private handlePreviousVersion(versionSezs: Array<SectionDefinition<any>>, version: number): void {\r\n    const versionDS = new DataStructureBuilder(versionSezs).make();\r\n    this.buildVersionDb(versionDS, version);\r\n    this.lastPreviousVersionScheme = versionDS;\r\n  }\r\n\r\n  private buildVersionDb(versionDS: AbstractModel, version: number): void {\r\n    const tables = {};\r\n\r\n    for (const section in versionDS)\r\n      if (!this.lastPreviousVersionScheme || !this.lastPreviousVersionScheme[section])\r\n        tables[versionDS[section].name] = versionDS[section].indexes.join();\r\n\r\n    this.db.version(version).stores(tables);\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { NewWhere } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\n\r\nexport interface BetweenSearchParams {\r\n  field: string;\r\n  lowerBound: string | number;\r\n  upperBound: string | number;\r\n  includeLower: boolean;\r\n  includeUpper: boolean;\r\n}\r\n\r\nexport type SuppoertedOperators = '===' | '!=' | '>' | '>=' | '<' | '<=' | '=';\r\n\r\nexport interface FieldNValues {\r\n  [index: string]: string | number;\r\n}\r\n\r\nexport type Filter4Dexie = (item: Object) => boolean;\r\n\r\n/**\r\n * Support methods to build queries with `QueryMaker` on IndexedDB with Dexie\r\n * \r\n * @see QueryMaker\r\n */\r\nexport class QueryHelper {\r\n\r\n  /**\r\n   * Determines the methods to execute for the select query based on the number of arguments.\r\n   */\r\n  public static methodToExecute(DS: AbstractModel, arraysWhere: Array<NewWhere>, section: keyof AbstractModel): 'dexieFullCollection' | 'dexieBetween' | 'dexieGet' | 'dexieWhere' | 'complexSelect' {\r\n\r\n    const arraysWhereLen = arraysWhere.length;\r\n\r\n    if (!arraysWhereLen)\r\n      return 'dexieFullCollection';\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    if (arraysWhereLen === 2 && (arraysWhere[0][1] === '>=' || arraysWhere[0][1] === '>') && (arraysWhere[1][1] === '<=' || arraysWhere[1][1] === '<'))\r\n      return 'dexieBetween';\r\n\r\n    if (arraysWhere[0][1] !== '=')\r\n      return 'complexSelect';\r\n\r\n    if (arraysWhereLen === 1 && arraysWhere[0][0] === DS[section].pk)\r\n      return 'dexieGet';\r\n\r\n    if (DS[section].indexes.indexOf(arraysWhere[0][0]) > -1)\r\n      return 'dexieGet';\r\n\r\n    let dexieWhere = true;\r\n\r\n    arraysWhere.forEach(whereArr => {\r\n      if (whereArr[1] !== '=')\r\n        dexieWhere = false;\r\n      if (DS[section].indexes.indexOf(whereArr[0]) < 0)\r\n        dexieWhere = false;\r\n    });\r\n\r\n    if (dexieWhere)\r\n      return 'dexieWhere';\r\n\r\n    return 'complexSelect';\r\n\r\n  }\r\n\r\n  /**\r\n   * Converts an Array of where arguments (field, operator, value) to an object with field and value\r\n   */\r\n  public static buildArrayFildsNValues(arraysWhere: Array<NewWhere>): FieldNValues {\r\n    const objFieldsNValues: FieldNValues = {};\r\n\r\n    arraysWhere.forEach(arrSearch => {\r\n      objFieldsNValues[arrSearch[0]] = arrSearch[2];\r\n    });\r\n\r\n    return objFieldsNValues;\r\n\r\n  }\r\n\r\n  /**\r\n   * Builds between search params, optionally including upper or lower boundary\r\n   */\r\n  public static buildBetweenSearchParams(arraysWhere: Array<NewWhere>): BetweenSearchParams {\r\n    const includeLower = (arraysWhere[0][1] === '>=') ? true : false;\r\n    const includeUpper = (arraysWhere[1][1] === '<=') ? true : false;\r\n    return {\r\n      field: arraysWhere[0][0],\r\n      lowerBound: arraysWhere[0][2],\r\n      upperBound: arraysWhere[1][2],\r\n      includeLower: includeLower,\r\n      includeUpper: includeUpper\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Builds the filter to select elements for complex queries not supported by Dexie due to IndexedDB limits\r\n   */\r\n  public static buildFilter4Dexie(filter: NewWhere): Filter4Dexie {\r\n    const field = filter[0];\r\n    const operator = filter[1];\r\n    const value = filter[2];\r\n    return (item): boolean => {\r\n      switch (operator) {\r\n        case '===':\r\n          return item[field] === value;\r\n        case '!=':\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] != value;\r\n        case '>':\r\n          return item[field] > value;\r\n        case '>=':\r\n          return item[field] >= value;\r\n        case '<':\r\n          return item[field] > value;\r\n        case '<=':\r\n          return item[field] <= value;\r\n        default:\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] == value;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Chains filters\r\n   */\r\n  public static chainFilters(where: Array<Filter4Dexie>, logic: 'AND' | 'OR'): Filter4Dexie {\r\n    return (item): boolean => {\r\n      if (!where.length)\r\n        return true;\r\n\r\n      let result: boolean = where[0](item);\r\n\r\n      for (const filter of where)\r\n        switch (logic) {\r\n          case 'OR':\r\n            result = result || filter(item);\r\n            break;\r\n          default:\r\n            result = result && filter(item);\r\n        }\r\n\r\n      return result;\r\n    };\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Filter4Dexie, QueryHelper, SuppoertedOperators } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport type NewWhere = [string, SuppoertedOperators, string | number];\r\n\r\n/**\r\n * Builds queries to be executed with Dexie\r\n */\r\nexport class QueryMaker<E> {\r\n\r\n  private logic: 'AND' | 'OR' = 'AND';\r\n  private table: string;\r\n  private collection;\r\n  private dexieFilters: Array<Filter4Dexie> = [];\r\n  private arrWhere: Array<NewWhere> = [];\r\n  private orderBy: string;\r\n  private debug = false;\r\n\r\n  /**\r\n   * Creates an instance of query maker.\r\n   * @param section the section name (aka table) on which to run the query\r\n   * @param [element] optional element on which to perform the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element?: E\r\n  ) {\r\n    this.table = this.dbConnector.DS[this.section].name;\r\n    this.collection = this.dbConnector.dbStore.db[this.table];\r\n  }\r\n\r\n  /**\r\n   * Adds a where clause to `arrWhere`\r\n   */\r\n  public addWhere(new_where: NewWhere): QueryMaker<E> {\r\n    this.arrWhere.push(new_where);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the logic to OR\r\n   */\r\n  public setOrLogic(): QueryMaker<E> {\r\n    this.logic = 'OR';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orderBy property\r\n   */\r\n  public setOrderBy(order: string): void {\r\n    this.orderBy = order;\r\n  }\r\n\r\n  // SELECT\r\n\r\n  /**\r\n   * Determines which method to execute and then performs the select operation \r\n   */\r\n  public async select(): Promise<Array<E>> {\r\n\r\n    if (this.logic !== 'AND')\r\n      return this.complexSelect();\r\n\r\n    const methodToExecute = QueryHelper.methodToExecute(this.dbConnector.DS, this.arrWhere, this.section);\r\n\r\n    this.handleDebug('SELECT', 'methodToExecute', methodToExecute);\r\n\r\n    return this[methodToExecute]();\r\n  }\r\n\r\n  /**\r\n   * Select with Dexie.get\r\n   */\r\n  private async dexieGet(): Promise<Array<E>> {\r\n    const objSearch = {};\r\n    objSearch[this.arrWhere[0][0]] = this.arrWhere[0][2];\r\n    const res = await this.dbConnector.dbStore.db[this.table].get(objSearch);\r\n    const eleToReturn = res ? [res] : [];\r\n    return eleToReturn;\r\n  }\r\n\r\n  /**\r\n   * Selects using the where method of Dexie\r\n   */\r\n  private async dexieWhere(): Promise<Array<E>> {\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(fieldNValues).toArray();\r\n  }\r\n\r\n  /**\r\n   * Select between two values with Dexie\r\n   */\r\n  private async dexieBetween(): Promise<Array<E>> {\r\n    const betweenSearchParams = QueryHelper.buildBetweenSearchParams(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(betweenSearchParams.field)\r\n      .between(betweenSearchParams.lowerBound, betweenSearchParams.upperBound, betweenSearchParams.includeLower, betweenSearchParams.includeUpper)\r\n      .toArray();\r\n  }\r\n\r\n  /**\r\n   * Gets entire collection with Dexie\r\n   */\r\n  private async dexieFullCollection(): Promise<Array<E>> {\r\n    return this.dbConnector.dbStore.db[this.table].toArray();\r\n  }\r\n\r\n  /**\r\n   * Performs a comples select action that is not supported natively by IndexedDB (and so Dexie)\r\n   */\r\n  private complexSelect(): Promise<Array<E>> {\r\n\r\n    this.arrWhere.forEach(arrWhere =>\r\n      this.dexieFilters.push(QueryHelper.buildFilter4Dexie(arrWhere))\r\n    );\r\n\r\n    let all_records = this.dbConnector.dbStore.db[this.table].toCollection();\r\n    const filter = QueryHelper.chainFilters(this.dexieFilters, this.logic);\r\n    all_records = all_records.and(filter);\r\n\r\n    this.handleDebug('SELECT', 'WHERE', this.arrWhere);\r\n\r\n    if (this.orderBy)\r\n      return all_records.sortBy(this.orderBy);\r\n\r\n    return all_records.toArray();\r\n  }\r\n\r\n  // INSERT\r\n\r\n  /**\r\n   * Inserts a new element using `put` method of Dexie\r\n   */\r\n  public async insert(): Promise<void> {\r\n    const copy = cloneDeep(this.element);\r\n    for (const key in this.element)\r\n      if (!this.dbConnector.DS[this.section].fields.includes(key))\r\n        // tslint:disable-next-line:no-dynamic-delete\r\n        delete copy[key];\r\n\r\n    this.handleDebug('INSERT', 'WITH OBJECT', copy);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].put(copy);\r\n  }\r\n\r\n  // UPDATE\r\n\r\n  /**\r\n   * Updates and element using the `update` method of Dexie\r\n   */\r\n  public async update(): Promise<void> {\r\n\r\n    const copy = cloneDeep(this.element);\r\n\r\n    for (const key in this.element)\r\n      if (!this.dbConnector.DS[this.section].fields.includes(key))\r\n        // tslint:disable-next-line:no-dynamic-delete\r\n        delete copy[key];\r\n      else if (!copy[key])\r\n        copy[key] = undefined;\r\n\r\n    this.handleDebug('UPDATE', 'WITH OBJECT', copy);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].update(copy[this.dbConnector.DS[this.section].pk], copy);\r\n  }\r\n\r\n  // COUNT\r\n\r\n  /**\r\n   * Counts the number of items in a collection with Dexie\r\n   */\r\n  public count(): Promise<number> {\r\n    return this.collection.count();\r\n  }\r\n\r\n  // DELETE\r\n\r\n  /**\r\n   * Deletes one or more elements with the `where` clause of Dexie\r\n   */\r\n  public async delete(): Promise<void> {\r\n\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n\r\n    this.handleDebug('DELETE', 'WHERE', this.arrWhere);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].where(fieldNValues).delete();\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears the entire db!!!\r\n   */\r\n  public async clearDb(): Promise<void> {\r\n    const promises = [];\r\n    for (const section in this.dbConnector.DS)\r\n      if (this.dbConnector.DS[section].name) promises.push(this.dbConnector.dbStore.db[this.dbConnector.DS[section].name].clear());\r\n\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /**\r\n   * Clears an entire table!!!\r\n   */\r\n  public async clearTable(): Promise<void> {\r\n    await this.dbConnector.dbStore.db[this.table].clear();\r\n  }\r\n\r\n  /**\r\n   * Logs useful information in the console if `debug` is true\r\n   */\r\n  private handleDebug<T>(action: string, typeToShow: string, toShow: T): void {\r\n    if (this.debug)\r\n      Logger.raw(`EXECUTING ${action} FOR TABLE ${this.table} ${typeToShow} `, toShow);\r\n  }\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements the deletor for IndexedDB\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section of the element to delete\r\n   * @param args the arguments for the query, must include the primary key (`pk`) value\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Perform the delete action on the given element.\r\n   */\r\n  public async autoDelete(): Promise<void> {\r\n    if (this.args[this.dbConnector.DS[this.section].pk]) {\r\n      const aliasElementToDelete = this.args[this.dbConnector.DS[this.section].pk];\r\n      await new QueryMaker(this.dbConnector, this.section)\r\n        .addWhere([this.dbConnector.DS[this.section].pk as string, '=', aliasElementToDelete])\r\n        .delete();\r\n    } else\r\n      Logger.error('Error in autoDelete', 'No PK value was found on the element');\r\n  }\r\n\r\n}\r\n","import { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbStore } from 'app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class';\r\nimport Dexie from 'dexie';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use IndexedDB as plugin\r\n */\r\nexport const INDEXEDDB_PLUGIN: DbObjects<any, Dexie> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements insertor for IndexedDB\r\n */\r\nexport class DbInsertor<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db insertor.\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: E\r\n  ) { }\r\n\r\n  /**\r\n   * Makes sure that all necessary fields are set and performs the insert\r\n   */\r\n  public autoInsert(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .insert()\r\n      .catch(err => { Logger.error('Error in autoinsert: ', err); });\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements selector for IndexedDB\r\n */\r\nexport class DbSelector<E> implements Selector<E> {\r\n  private data: Array<E> = [];\r\n  private qe: QueryMaker<E>;\r\n\r\n  /**\r\n   * Creates an instance of db selector.\r\n   * @param section the section from which to query data\r\n   * @param [args] the optional arguments of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args?: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Retrieves only one element\r\n   */\r\n  public async single(): Promise<E> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    await this.executeSelect();\r\n\r\n    return this.data[0];\r\n  }\r\n\r\n  /**\r\n   * Retrieves multiple elements, returns them in an `Array`\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    this.setOrder();\r\n\r\n    await this.executeSelect();\r\n\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Counts all elements in the section\r\n   * \r\n   * @remarks does not take into consideration argumeents\r\n   */\r\n  public async count(): Promise<number> {\r\n    return new QueryMaker(this.dbConnector, this.section).count();\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of `QueryMaker`\r\n   * \r\n   * @see QueryMaker\r\n   */\r\n  private setUpSelect(): void {\r\n    this.qe = new QueryMaker(this.dbConnector, this.section);\r\n  }\r\n\r\n  /**\r\n   * If the `pk` value is set, it is added as a query argument\r\n   */\r\n  private setQuery(): void {\r\n    if (!this.args)\r\n      return;\r\n\r\n    if (this.args[this.dbConnector.DS[this.section].pk])\r\n      this.qe.addWhere([this.dbConnector.DS[this.section].pk, '=', this.args[this.dbConnector.DS[this.section].pk]]);\r\n  }\r\n\r\n  /**\r\n   * Sets the order of the results\r\n   */\r\n  private setOrder(): void {\r\n    this.qe.setOrderBy(this.dbConnector.DS[this.section].orderBy);\r\n  }\r\n\r\n  /**\r\n   * Executes the select command\r\n   */\r\n  private async executeSelect(): Promise<void> {\r\n    this.data = await this.qe.select();\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Updator } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements updator for IndexedDb\r\n */\r\nexport class DbUpdator<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Creates an instance of db updator.\r\n   * @param section the section of the element to update\r\n   * @param element the full element updated\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Calls `QueryMaker` and updates the element\r\n   */\r\n  public autoUpdate(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .update()\r\n      .catch(err => { Logger.error('Error in autoUpdate', err); });\r\n  }\r\n\r\n}\r\n","import { CLIENT_SEZ_DEFINITIONS, previousVersions } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { INDEXEDDB_PLUGIN } from 'app/libs/db-connector/plugins/indexed-db/exporter.constant';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport React from 'react';\r\n\r\nexport class Startupper {\r\n\r\n  /**\r\n   * The name of the IndexedDB for system data\r\n   */\r\n  private systemDbName = 'anitaDB';\r\n\r\n  public async init(): Promise<void> {\r\n    Logger.info('Anita web app.');\r\n    await this.initSystemIndexedDb(this.systemDbName);\r\n    this.setLoggerDebug();\r\n  }\r\n\r\n  /**\r\n   * Inits IndexedDB for system data\r\n   */\r\n  private async initSystemIndexedDb(indexedDbName: string): Promise<void> {\r\n    dbInstances.system = await new DbConnector(INDEXEDDB_PLUGIN, { previousVersions, indexedDbName }, CLIENT_SEZ_DEFINITIONS, false).init();\r\n  }\r\n\r\n  /**\r\n   * Detect if React is in development mode\r\n   */\r\n  private isReactDev(): boolean {\r\n    return '_self' in React.createElement('div');\r\n  }\r\n\r\n  /**\r\n   * Sets logger debug\r\n   */\r\n  private setLoggerDebug(): void {\r\n    Logger.debug = this.isReactDev();\r\n  }\r\n\r\n}","import { dbInstances } from 'app/data/db-instances.const';\r\n\r\nexport function isProjectLoaded(projectId: string): boolean {\r\n  // The project has not been loaded yet\r\n  // For now we only suppor the FileSystem, which requires user input to load the project\r\n  // So we set the project to undefined and navigate to the project selection page\r\n  // TODO: once other storage types are supported, we can try to load the project\r\n  if (!dbInstances[projectId])\r\n    return false;\r\n\r\n  return true;\r\n}","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { Section, SectionElement } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Builds the form element with the info on the parent section for ParentsSelector\r\n * \r\n * @see ParentsSelector\r\n */\r\nexport class ParentInfoFormEleBuilder {\r\n\r\n  private parentInfoFormModel: FormFieldsModel<SectionElement>;\r\n  private options: Array<OptionKeysModel> = [];\r\n\r\n  constructor(\r\n    private childOf: Array<string>,\r\n    private sections?: Array<Section>\r\n\r\n  ) { }\r\n\r\n  public build(): FormFieldsModel<SectionElement> {\r\n    this.setOptions();\r\n    this.setParentSelector();\r\n    return this.parentInfoFormModel;\r\n  }\r\n\r\n  private setOptions(): void {\r\n    this.childOf.forEach(sectionName => {\r\n      const sectionInfo = this.sections.find(section => section.id === sectionName);\r\n      this.options.push({ value: sectionName, label: sectionInfo.title });\r\n    });\r\n  }\r\n\r\n  private setParentSelector(): void {\r\n    this.parentInfoFormModel = {\r\n      componentCode: FORM_COMPONENTS_CODES.parentsSelector,\r\n      fieldName: RESERVED_FIELDS.parentsInfo,\r\n      label: 'Parent elements',\r\n      options: this.options\r\n    };\r\n  }\r\n\r\n}","import { Section } from 'app/data/model/project-info';\r\n\r\nexport function findSectionById(sections: Array<Section>, toFindId: string): Section {\r\n  return sections.find(section => section.id === toFindId);\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport const FormEleContainer = ({ children, width }: { children: ReactNode, width: string | number }) => (\r\n  <div className={`${width} my-3 px-2 inline-block align-top`}>\r\n    {children}\r\n  </div>\r\n)","export const FormElementLabel = ({ label }: { label: string }) => (\r\n  <label className=\"w-full block mb-0 ml-1 text-gray-700 text-sm\">{label}</label>\r\n)","import { IValidStateForEle } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\nimport { useEffect } from 'react';\r\n\r\nexport const RequiredField = ({ formEle, element, fieldId, touched }: IValidatorsConatinerProps) => {\r\n\r\n  const value = element[formEle.fieldName];\r\n\r\n  useEffect(() => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.setValidStateForEle, payload: {\r\n        formEleId: `${fieldId}-required`,\r\n        valid: value !== '' && value !== undefined && value !== null\r\n      } as IValidStateForEle\r\n    });\r\n  }, [value, fieldId]);\r\n\r\n  if (value || !touched)\r\n    return (<div className=\"ml-1 text-xs italic text-gray-400\">Required</div>);\r\n\r\n  return (<div className=\"ml-1 text-red-600 text-xs italic\">This field is required</div>);\r\n\r\n};\r\n","import { RequiredField } from 'app/ui-react-components/shared-components/forms-automator/validators/required-field.component';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\n\r\nexport const ValidatorsContainer = (props: IValidatorsConatinerProps) => {\r\n\r\n  const validators = [];\r\n\r\n  if (props.formEle.required)\r\n    validators.push(<RequiredField key=\"required-validator\" {...props} />)\r\n\r\n  return (\r\n    <span>\r\n      {validators}\r\n    </span>\r\n  );\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicCheckbox = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"checkbox\"\r\n        checked={(Reflect.has(element, formEle.fieldName) && typeof element[formEle.fieldName] === 'boolean') ? element[formEle.fieldName] : false}\r\n        className={`rounded mt-3 ${isInValid && touched ? \"text-red-600 border border-red-600\" : \"text-prussian-blue-500\"}`}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.checked)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","export function checkIsValidValueForControlledReactForm(obj, key): boolean {\r\n  return Reflect.has(obj, key) && obj[key] !== undefined && obj[key] !== null;\r\n}","// Converts a col size in the range of 1-12 to the equivalente TailwindCSS width class\r\nexport function calcWidth(width: string): string {\r\n  return `w-full lg:w-${width}/12`;\r\n}","export const FORM_ELEMENTS_CSS_CLASSES = \"rounded-md border border-gray-300 hover:border-gray-400 focus:border-gray-200 focus:shadow-inner focus:bg-white focus:ring-0\";\r\nexport const FORM_ELEMENTS_CSS_CLASSES_ERR = \"rounded-md border-2 border-red-300 hover:border-red-400 focus:border-red-200 focus:shadow-inner focus:bg-white focus:ring-0\";","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { checkIsValidValueForControlledReactForm } from 'app/libs/tools/check-is-valid-value-for-controlled-react-form.function';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"text\"\r\n        placeholder={formEle['label']}\r\n        disabled={formEle.disabled ? formEle.disabled : false}\r\n        required={formEle.required ? formEle.required : false}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={checkIsValidValueForControlledReactForm(element, formEle.fieldName) ? element[formEle.fieldName] : ''}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicRadio, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/* eslint-disable eqeqeq */\r\n\r\nexport const BasicRadio = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicRadio<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  return (\r\n    <FormEleContainer key={formEle.fieldName} width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <div className=\"mt-2 pl-1\"\r\n      >\r\n        {formEle.options.map(option => {\r\n          return (\r\n            <div key={option.value} className=\"mb-2\">\r\n              <input\r\n                type=\"radio\"\r\n                value={option.value}\r\n                name={formEle.fieldName}\r\n                checked={element[formEle.fieldName] == option.value}\r\n                className={`${isInValid && touched ? \"bg-red-600 text-red-600\" : \"bg-gray-200 text-prussian-blue-500\"} mr-2 border-transparent focus:border-gray-500 focus:text-prussian-blue-600 focus:ring-prussian-blue-600`}\r\n                onChange={event => handleChange(formEle.fieldName, event.target['value'])}\r\n                onBlur={() => setTouched(true)}\r\n              /> {option.label}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicSelect = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <select\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      >\r\n        <option value=\"\">Please chose one</option>\r\n        {formEle.options.map((option, index) => (\r\n          <option\r\n            key={index}\r\n            value={option.value}\r\n          >{option.label}</option>)\r\n        )}\r\n      </select>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { checkIsValidValueForControlledReactForm } from 'app/libs/tools/check-is-valid-value-for-controlled-react-form.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicTextarea = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <textarea\r\n        name={formEle.fieldName}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={checkIsValidValueForControlledReactForm(element, formEle.fieldName) ? element[formEle.fieldName] : ''}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { Option } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\n\r\n/**\r\n * Converts the options used by react-select to a string for storing it in the DB\r\n * We do not want to store the whole object, only the values, as the label might change.\r\n */\r\nexport function parentInfoObjToString(parentInfoObj: Array<Option>): Array<string> {\r\n  const parentsInfo = [];\r\n  parentInfoObj.forEach(parentInfo => {\r\n    parentsInfo.push(parentInfo.value);\r\n  });\r\n  return parentsInfo;\r\n}","export interface Option { value: string, label: string }\r\n\r\ninterface OptionKeysModelGroup {\r\n  label: string;\r\n  options: Array<Option>\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObjForOptionsGroup(parentsInfo: Array<string>, selectOptions: Array<OptionKeysModelGroup>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the options group by recourevily searching the options by value\r\n    const group = selectOptions.find(group => group.options.find(opt => opt.value === parentInfo));\r\n\r\n    if (!group) return;\r\n\r\n    // find the option by searching the options of the group\r\n    const option = group.options.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with NON grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObj(parentsInfo: Array<string>, selectOptions: Array<Option>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the option by searching the options of the select element\r\n    const option = selectOptions.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}","import { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObj } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ChildOfSelectorForSection = ({ formEle, element, handleChange, sectionId }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const currentEditedProjectSections = useSelector((state: AnitaStore) => state.formProject.project[RESERVED_UDS_KEYS._sections]);\r\n  const [selectOptions, setSelectOptions] = useState<Array<Option>>([]);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const buildOptions = () => {\r\n\r\n      if (!Array.isArray(currentEditedProjectSections))\r\n        return;\r\n\r\n      const selectableSections: Array<Option> = [];\r\n      currentEditedProjectSections.forEach(sectionDec => {\r\n        if (sectionDec.id !== sectionId)\r\n          selectableSections.push({\r\n            value: sectionDec.id,\r\n            label: sectionDec.title\r\n          });\r\n      });\r\n      setSelectOptions(selectableSections);\r\n    }\r\n\r\n    if (isMounted)\r\n      buildOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [currentEditedProjectSections, currentEditedProjectSections.length, sectionId]);\r\n\r\n  const handleChangeInChildOfSelectorForSection = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObj(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInChildOfSelectorForSection}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DatePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"date\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DateTimePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"datetime-local\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { checkIsValidValueForControlledReactForm } from 'app/libs/tools/check-is-valid-value-for-controlled-react-form.function';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const HiddenInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  return (<input key={formEle.fieldName}\r\n    name={formEle.fieldName}\r\n    type=\"hidden\"\r\n    value={checkIsValidValueForControlledReactForm(element, formEle.fieldName) ? '' : element[formEle.fieldName]}\r\n    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleChange(formEle.fieldName, event.target.value)} />)\r\n};","import { FORM_COMPONENTS_CODES, OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nconst commonFields: FormFieldsModel<OptionKeysModel> = {\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'label',\r\n  type: 'text',\r\n  label: 'Label',\r\n  required: true,\r\n  width: \"8\"\r\n};\r\n\r\n/**\r\n * Defines the Form model to create the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For adding options only, some properties can't be changed after the filed has been created. Existing items must use `optionsBuilderForEditing` instead.\r\n */\r\nexport const optionsBuilderForAdding: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFields\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `optionsBuilderForAdding` instead.\r\n */\r\nexport const optionsBuilderForEditing: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFields\r\n\r\n];\r\n","const SUCCESS_COLOR = \"green\";\r\nconst DANGER_COLOR = \"red\";\r\n\r\nexport const SUCCESS_BTN_OUTLINE = `bg-transparent hover:bg-${SUCCESS_COLOR}-500 text-${SUCCESS_COLOR}-700 font-semibold hover:text-white border border-${SUCCESS_COLOR}-500 hover:border-transparent rounded`;\r\nexport const DANGER_BTN_OUTLINE = `bg-transparent hover:bg-${DANGER_COLOR}-500 text-${DANGER_COLOR}-700 font-semibold hover:text-white border border-${DANGER_COLOR}-500 hover:border-transparent rounded`;","import { optionsBuilderForAdding, optionsBuilderForEditing } from 'app/data/form-models/options-builder.constant';\r\nimport { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { DANGER_BTN_OUTLINE, SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormFieldsModel, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n/**\r\n * Checks if the OptionKeysModel was already in the section before we started editing.\r\n * We can't rely on the general edit mode of the form because we might have new options in edit mode.\r\n * @param section the section to which the current OptionKeysModel belongs\r\n * @param indexFormElement the index of the form model at which the current OptionKeysModel is, as we want to check only on the same form model\r\n * @param option the option to check\r\n * @returns the form model to use. We want different form models for adding and editing to disable fields that should not be altered.\r\n */\r\nfunction getFormModelToUse(section: Section, indexFormElement: number, option: OptionKeysModel): Array<FormFieldsModel<OptionKeysModel>> {\r\n  if (!section || !section.formModel[indexFormElement] || !section.formModel[indexFormElement]['options'] || !section.formModel[indexFormElement]['options'].length)\r\n    return optionsBuilderForAdding;\r\n\r\n  const exists = section.formModel[indexFormElement]['options'].some((opt: OptionKeysModel) => opt.value === option.value);\r\n  return exists ? optionsBuilderForEditing : optionsBuilderForAdding;\r\n}\r\n\r\nexport const OptionsMaker = ({ formEle, element, handleOptionsChange, handleClickAddOption, handleClickDeleteOption, indexSection, indexFormElement }: ICommonFormEleProps<FormFieldsModel<OptionKeysModel>>) => {\r\n\r\n  const sections = useSelector((store: AnitaStore) => store.formProject.original[RESERVED_UDS_KEYS._sections]);\r\n\r\n  if (!element[formEle.fieldName] || typeof handleOptionsChange !== 'function')\r\n    return null;\r\n\r\n  return (\r\n    <div className=\"mt-6 pl-10 py-4 bg-gray-50 rounded-lg\">\r\n      <p className=\"-ml-5 font-semibold mb-1\">Choices</p>\r\n      <ol className=\"list-decimal\">\r\n        {element[formEle.fieldName].map((optionElement: OptionKeysModel, index) =>\r\n          <li key={index}>\r\n            <FormAutomator\r\n              formModel={getFormModelToUse(sections[indexSection], indexFormElement, optionElement) as Array<FormFieldsModel<any>>}\r\n              element={optionElement}\r\n              handleChange={handleOptionsChange.bind(undefined, index, optionElement)} />\r\n            {(typeof handleClickDeleteOption === 'function' && element[formEle.fieldName].length > 1) && <div className=\"inline-block w-full lg:w-1/12 px-2 lg:pl-1 lg:pr-3 lg:align-bottom mb-8\">\r\n              <button\r\n                onClick={handleClickDeleteOption.bind(undefined, index)}\r\n                data-tip data-for={`deleteOption-${index}`}\r\n                className={`w-full py-1 ${DANGER_BTN_OUTLINE}`}\r\n              ><i className=\"bi-trash hidden lg:block\"></i><span className=\"lg:hidden\">Delete option {index + 1}</span></button>\r\n              <ReactTooltip id={`deleteOption-${index}`} effect=\"solid\">\r\n                <span>Delete option {index + 1}</span>\r\n              </ReactTooltip>\r\n            </div>}\r\n          </li>\r\n        )}\r\n      </ol>\r\n      {(typeof handleClickAddOption === 'function') &&\r\n        <div className=\"flex items-end\">\r\n          <button\r\n            className={`ml-auto mr-4 mt-3 py-2 px-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddOption}\r\n          >\r\n            Add option\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport function findFirstUserDefinedField(sectionFormModel: FormModel): number {\r\n\r\n  let firstUserDefinedFieldInfo: number = undefined;\r\n\r\n  sectionFormModel.some((formEle, index) => {\r\n    if (RESERVED_FIELDS[formEle.fieldName])\r\n      return false;\r\n\r\n    firstUserDefinedFieldInfo = index;\r\n    return true;\r\n  });\r\n\r\n  return firstUserDefinedFieldInfo;\r\n}\r\n","/**\r\n * Asyncs forEach. Unlike native JS forEach, this one awaits each callback to resolve befofore iterating to the next element of the array\r\n * @param array the array to loop\r\n * @param callback the function to call on each element of the array\r\n */\r\nexport async function asyncForEach<T>(array: Array<T>, callback: (item: T, index: number, arr: Array<T>) => Promise<any>): Promise<void> {\r\n  const totalLength = array.length;\r\n  for (let index = 0; index < totalLength; index++)\r\n    await callback(array[index] as T, index, array);\r\n}\r\n\r\n/**\r\n * Gets the current utcdate and time as an ISO string\r\n */\r\nexport function getUTCDateTime(): string {\r\n  return new Date(new Date().toUTCString()).toISOString();\r\n}\r\n\r\n/**\r\n * Gets the current date and time as an ISO string\r\n */\r\nexport function getDateTime(): string {\r\n  return new Date(new Date()).toISOString();\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { OptionKeysModel, OptionKeysModelGroup } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, SectionElement, SystemData } from 'app/data/model/project-info';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class OptionsForParentsSelector {\r\n\r\n  private optionsGroups: Array<OptionKeysModelGroup> = [];\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private options: Array<OptionKeysModel>\r\n  ) {\r\n  }\r\n  public async buildOptions(): Promise<Array<OptionKeysModelGroup>> {\r\n    await asyncForEach(this.options, async group => {\r\n      const sectionEles = await dbInstances[this.project[RESERVED_UDS_KEYS._settings][0].id].callSelector<SectionElement>(group.value).multiple();\r\n      if (sectionEles.length)\r\n        this.createGroupOption(group.value as string, group.label, sectionEles);\r\n    });\r\n\r\n    return this.optionsGroups;\r\n  }\r\n\r\n  private createGroupOption(sectionId: string, sectionLabel: string, sectionEles: Array<SectionElement>): void {\r\n    const options: Array<OptionKeysModel> = [];\r\n    const section = findSectionById(this.project[RESERVED_UDS_KEYS._sections], sectionId);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    sectionEles.forEach(ele => options.push({\r\n      value: `${sectionId}|${ele.id}`,\r\n      label: ele[section.formModel[indexFirstUserFiield].fieldName]\r\n    }));\r\n    this.optionsGroups.push({\r\n      label: sectionLabel,\r\n      options\r\n    });\r\n  }\r\n}","import { OptionKeysModelGroup } from 'app/data/model/form-model-commons';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { OptionsForParentsSelector } from 'app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObjForOptionsGroup } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ParentsSelector = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [selectOptions, setSelectOptions] = useState<Array<OptionKeysModelGroup>>([]);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const getSelectOptions = async () => {\r\n      const options = await new OptionsForParentsSelector(project, formEle.options).buildOptions();\r\n\r\n      if (isMounted)\r\n        setSelectOptions(options);\r\n    };\r\n\r\n\r\n    if (isMounted)\r\n      getSelectOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [project, formEle.options]);\r\n\r\n  const handleChangeInParentsSelector = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObjForOptionsGroup(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInParentsSelector}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { Prerequisites } from 'app/data/model/form-model-commons';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class PrerequisitesChecker<ELEMENT extends Partial<SupportedFormsTypes>> {\r\n\r\n  private isIntegrated = false;\r\n\r\n  constructor(\r\n    private formEle: FormFieldsModel<Partial<SupportedFormsTypes>>,\r\n    private objValues: Partial<ELEMENT>\r\n  ) { }\r\n\r\n  public integrates(): boolean {\r\n    if (!this.formEle.prerequisites || !this.formEle.prerequisites.length)\r\n      return true;\r\n\r\n    this.loopPrerequisites();\r\n\r\n    return this.isIntegrated;\r\n  }\r\n\r\n  private loopPrerequisites(): void {\r\n    let counter = 0;\r\n    while (this.isIntegrated === false && counter < this.formEle.prerequisites.length) {\r\n      this.checkPrerequisites(this.formEle.prerequisites[counter]);\r\n      counter++;\r\n    }\r\n  }\r\n\r\n  private checkPrerequisites(prereq: Prerequisites): void {\r\n    for (const key in prereq)\r\n      // We use a relaxed equality check here, because the value can be a string or a number\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this.objValues[key] && (prereq[key].filter(prereqValue => prereqValue == this.objValues[key]).length > 0))\r\n        this.setIsIntegrated();\r\n  }\r\n\r\n  private setIsIntegrated(): void {\r\n    this.isIntegrated = true;\r\n  }\r\n\r\n}\r\n","import { formElesSwitcher } from 'app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function';\r\nimport { PrerequisitesChecker } from 'app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const FieldSelector = (props: ICommonFormEleProps) => {\r\n\r\n  const [shouldRender, setShouldRender] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const prerequisitesCheckerResult = new PrerequisitesChecker(props.formEle, props.element).integrates();\r\n    setShouldRender(prerequisitesCheckerResult);\r\n  }, [props.element, props.formEle]);\r\n\r\n  if (shouldRender)\r\n    return formElesSwitcher(props.formEle.fieldName, props.formEle.componentCode, props);\r\n\r\n  return null;\r\n\r\n}","import { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { BasicCheckbox } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component';\r\nimport { BasicInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component';\r\nimport { BasicRadio } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component';\r\nimport { BasicSelect } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component';\r\nimport { BasicTextarea } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component';\r\nimport { ChildOfSelectorForSection } from 'app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component';\r\nimport { DatePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component';\r\nimport { DateTimePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component';\r\nimport { IBasicRadio, IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { HiddenInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component';\r\nimport { OptionsMaker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component';\r\nimport { ParentsSelector } from 'app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component';\r\n\r\nexport function formElesSwitcher(key: string, componentCode: FORM_COMPONENTS_CODES, props: ICommonFormEleProps) {\r\n  switch (componentCode) {\r\n    case FORM_COMPONENTS_CODES.hiddenInput:\r\n      return <HiddenInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n      return <BasicInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n      return <BasicSelect key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return <BasicTextarea key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return <BasicCheckbox key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return <BasicRadio key={key} {...props as ICommonFormEleProps<IBasicRadio<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return <DatePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return <DateTimePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.optionsMaker:\r\n      return <OptionsMaker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.childOfSelectorForSection:\r\n      return <ChildOfSelectorForSection key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.parentsSelector:\r\n      return <ParentsSelector key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    default:\r\n      return <BasicInput key={key} {...props} />\r\n  }\r\n}","import { Section } from 'app/data/model/project-info';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { FieldSelector } from 'app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component';\r\n\r\nexport interface IFormAutomatorProps {\r\n  formModel: Section['formModel'];\r\n  element: { [key: string]: any };\r\n  handleChange: (...args: any) => void;\r\n  [customProps: string]: any;\r\n\r\n}\r\n\r\nexport const FormAutomator = (props: IFormAutomatorProps) => {\r\n\r\n  return (\r\n    <span>\r\n      {props.formModel.map((formEle) => {\r\n        const propsForFormElesSwitcher: ICommonFormEleProps = { formEle, ...props };\r\n        return <FieldSelector key={formEle.fieldName} {...propsForFormElesSwitcher} />;\r\n      })}\r\n    </span>\r\n  )\r\n\r\n}","import { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { ParentInfoFormEleBuilder } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const FormElementManager = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const sections = project[RESERVED_UDS_KEYS._sections];\r\n  const section = findSectionById(sections, sectionId);\r\n\r\n  const element = useSelector((store: AnitaStore) => store.formElement.element);\r\n\r\n  const handleChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: { ...element, [fieldName]: value } });\r\n  }\r\n\r\n  return (\r\n    <form name=\"element-form\">\r\n      {section.childOf && section.childOf.length > 0 && <FormAutomator\r\n        formModel={[new ParentInfoFormEleBuilder(section.childOf, sections).build()]}\r\n        element={element}\r\n        handleChange={handleChange} />\r\n      }\r\n      <FormAutomator formModel={section.formModel} element={element} handleChange={handleChange} />\r\n    </form>\r\n  )\r\n\r\n};","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\n/**\r\n * Saves a new element in a section of the project, stores the project on disk and dispatches the changes to the current state\r\n */\r\nexport class ElementSaver {\r\n\r\n  /**\r\n   * Reference to section model in DS for easier access in code\r\n   */\r\n  private sectionModelInDS: SectionModel<SectionElement>;\r\n\r\n  /**\r\n   * Creates an instance of element saver.\r\n   * @param projectData the unmodified project data\r\n   * @param sectionId the id of the section of the element to save\r\n   * @param element the element to save\r\n   */\r\n  constructor(\r\n    private projectId: string,\r\n    private sectionId: string,\r\n    private element: SectionElement,\r\n    private mode: EDITOR_MODE\r\n  ) { }\r\n\r\n  /**\r\n   * Deep clones the project, adds/updated the element in the project to save and finally save the project\r\n   */\r\n  public async save(): Promise<SectionElement> {\r\n    this.setSectionModel();\r\n    this.checkAndSetPk();\r\n    this.setDateCreation();\r\n    this.deleteEmptyProps();\r\n\r\n    if (this.mode === EDITOR_MODE.add)\r\n      await dbInstances[this.projectId].callInsertor(this.sectionId, this.element).autoInsert();\r\n    else {\r\n      this.setLastModifiedValueIfInEditMode();\r\n      await dbInstances[this.projectId].callUpdator(this.sectionId, this.element).autoUpdate();\r\n    }\r\n\r\n    return this.element;\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the section model from the DS stored in DbConnector\r\n   */\r\n  private setSectionModel(): void {\r\n    this.sectionModelInDS = dbInstances[this.projectId].DS[this.sectionId];\r\n  }\r\n\r\n  /**\r\n   * Checks if a `pk` value is set, if not one is created.\r\n   */\r\n  private checkAndSetPk(): void {\r\n    if (!this.element[this.sectionModelInDS.pk])\r\n      this.element[this.sectionModelInDS.pk] = IdCreator.make(this.sectionModelInDS.name);\r\n  }\r\n\r\n  /**\r\n   * Deletes all props from the element whose value is an empty string\r\n   */\r\n  private deleteEmptyProps(): void {\r\n    for (const prop in this.element)\r\n      if (this.element[prop] === '')\r\n        delete this.element[prop];\r\n  }\r\n\r\n  /**\r\n   * Checks if `dateCreation` value is set, if not one is created.\r\n   */\r\n  private setDateCreation(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.dateCreation) && !this.element[RESERVED_FIELDS.dateCreation])\r\n      this.element[RESERVED_FIELDS.dateCreation] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  /**\r\n   * Sets the lastModified value if in edit mode\r\n   */\r\n  private setLastModifiedValueIfInEditMode(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.lastModified))\r\n      this.element[RESERVED_FIELDS.lastModified] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n}\r\n","import { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { ElementSaver } from 'app/libs/project-helpers/section-elements-handlers/element-saver.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const SaveElement = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const element = useSelector((state: AnitaStore) => state.formElement.element);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const navigate = useNavigate();\r\n\r\n  const handleClick = async () => {\r\n    const mode = element.id ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n    await new ElementSaver(project[RESERVED_UDS_KEYS._settings][0].id, sectionId, element, mode).save();\r\n    navigate(-1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-6 mb-3 px-2 flex justify-end\">\r\n      <button\r\n        className=\"py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n        onClick={() => navigate(-1)}\r\n      >Cancel</button>\r\n      <button\r\n        disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n        className=\"py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500\"\r\n        onClick={handleClick}\r\n      >Save</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { ReactNode } from 'react';\r\nexport const MainContentContainer = ({ children, headerText }: { children: ReactNode, headerText?: string }) => (\r\n  <div className=\"p-4 bg-white rounded shadow\">\r\n    {headerText ? <div className=\"mt-3\">\r\n      <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n      <hr className=\"mt-4\" />\r\n    </div> : null}\r\n    <div className=\"pt-4\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n)","export const Loader = () => (\r\n  <svg className=\"absolute top-1/2 left-2/4 animate-spin -ml-1 mr-3 h-5 w-5 text-prussian-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n  </svg>\r\n\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormElementManager } from 'app/ui-react-components/project/add-edit-components/form-element-manager.component';\r\nimport { SaveElement } from 'app/ui-react-components/project/add-edit-components/save-element.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditSectionElement = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.elementId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = (mode === EDITOR_MODE.edit) ? params[URL_PARAMS.elementId] : null;\r\n\r\n  const [element, setElement] = useState<Partial<SectionElement> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (!isProjectLoaded(projectId) || !projectId || !sectionId)\r\n      return setElement(undefined);\r\n\r\n    if (mode === EDITOR_MODE.add)\r\n      return setElement({});\r\n\r\n    const fetchElement = async () => {\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n      if (isMounted)\r\n        setElement(element);\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchElement();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId, sectionId, elementId]);\r\n\r\n  if (element === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Element' : 'Edit Element';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: element });\r\n\r\n  return (\r\n    <MainContentContainer headerText={headerText}>\r\n      {element === null && <Loader />}\r\n      {element !== null && <FormElementManager sectionId={sectionId} />}\r\n      {element !== null && <SaveElement sectionId={sectionId} />}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings } from 'app/data/model/project-info';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Loads the list of projects on the current device\r\n */\r\nexport class ProjectsListLoader {\r\n\r\n  /**\r\n   * The list of projects to sore in the current state\r\n   */\r\n  private projectList: Array<LocalProjectSettings> = [];\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB and adds them to the current state\r\n   */\r\n  public async load(): Promise<void> {\r\n    await this.loadFromLocalDB();\r\n    this.dispatchProjectList(this.projectList);\r\n  }\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB with db-connector\r\n   */\r\n  private async loadFromLocalDB(): Promise<void> {\r\n    this.projectList = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects).multiple();\r\n  }\r\n\r\n  /**\r\n   * Dispatchs the project list to the current state\r\n   */\r\n  private dispatchProjectList(payload: Array<LocalProjectSettings>): void {\r\n    store.dispatch(({ type: REDUX_ACTIONS.setProjectList, payload }));\r\n  }\r\n\r\n}\r\n","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\n\r\n/**\r\n * Deletes a project from the current device\r\n */\r\nexport class ProjectDeletor {\r\n\r\n  /**\r\n   * Creates an instance of project deletor.\r\n   * @param project the settings of the project to delete\r\n   */\r\n  constructor(\r\n    private project: ProjectSettings\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes the project and reloads the list of projects\r\n   */\r\n  public async delete(): Promise<void> {\r\n    await this.doDelete();\r\n    this.reloadProjectList();\r\n  }\r\n\r\n  /**\r\n   * Performs the delete action on IndexedDB with db-connector\r\n   */\r\n  private async doDelete(): Promise<void> {\r\n    await dbInstances.system.callDeletor<ProjectSettings>(CLIENT_SECTIONS.projects, { id: this.project.id }).autoDelete();\r\n  }\r\n\r\n  /**\r\n   * Reloads the project list from scratch\r\n   */\r\n  private reloadProjectList(): void {\r\n    new ProjectsListLoader().load();\r\n  }\r\n\r\n}\r\n","import { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectDeletor } from 'app/libs/project-helpers/project-handlers/project-deletor.class';\r\nimport { useState } from 'react';\r\n\r\nexport const DeleteProjectButton = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  return (\r\n    <span>\r\n      <button onClick={() => setIsModalOpen(true)} className=\"px-4 py-2 text-red-700 inline-flex items-center md:mb-2 lg:mb-0 rounded bg-red-700 bg-opacity-10 hover:bg-opacity-20 text-sm\">\r\n        <i className=\"bi-trash\"></i><span className=\"ml-2 hidden lg:inline-block\">Delete project</span>\r\n      </button>\r\n      {isModalOpen && <DeleteProjectModal project={project} closeFn={() => setIsModalOpen(false)} />}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport const DeleteProjectModal = ({ project, closeFn }: { project: ProjectSettings, closeFn: () => void }) => (\r\n  <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n      <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\r\n\r\n      <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n      <div className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\r\n        <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n          <div className=\"sm:flex sm:items-start\">\r\n            <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\r\n              <i className=\" text-red-600 bi-exclamation-triangle text-xl -mt-1\"></i>\r\n\r\n            </div>\r\n            <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\r\n                Delete Project\r\n              </h3>\r\n              <div className=\"mt-2\">\r\n                <p className=\"text-sm text-gray-500\">\r\n                  Are you sure you want to delete this project?<br /><br />All project data will be permanently removed from this device. This action cannot be undone.<br /><br />Data stored on other devices will not be affected.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n          <button onClick={() => new ProjectDeletor(project).delete()} type=\"button\" className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm\">\r\n            Delete\r\n          </button>\r\n          <button onClick={closeFn} type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\n\r\n/**\r\n * Accepts a url and a param and replaces all the occurences of the url param with a given value\r\n */\r\nexport function urlParamFiller(url: string, paramsToFill: Array<{ name: URL_PARAMS; value: string }>): string {\r\n  let result = url;\r\n  paramsToFill.forEach(params => { result = result.replace(new RegExp(`:${params.name}`, 'g'), params.value) });\r\n  return result;\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const EditButton = ({ project }: { project: ProjectSettings }) => (\r\n  <Link to={urlParamFiller(ANITA_URLS.projectEdit, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-gray-800 mr-3 inline-flex items-center ml-auto leading-none text-sm bg-gray-100 hover:bg-gray-200 rounded\">\r\n    <i className=\"bi-pencil\"></i> <span className=\"ml-2 hidden sm:inline-block\">Edit Project</span>\r\n  </Link>\r\n)","import { ReactNode } from 'react';\r\n\r\nexport const CardFooterItemsEnd = ({ children }: { children: ReactNode }) => (\r\n  <div className=\"flex items-end flex-wrap mt-6\">\r\n    {children}\r\n  </div>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nconst LoadedProject = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"p-6\">\r\n    <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Description</p>\r\n    <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n    <p className=\"text-md\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.dateCreation))}</p>\r\n\r\n    <CardFooterItemsEnd>\r\n      <DeleteProjectButton project={project} />\r\n      <EditButton project={project} />\r\n    </CardFooterItemsEnd>\r\n\r\n  </div>\r\n)\r\n\r\nexport const ProjectDetails = () => {\r\n\r\n  const urlParams = useParams();\r\n  const projectId = urlParams[URL_PARAMS.projectId];\r\n  const [project, setElement] = useState<ProjectSettings>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadProject = async () => {\r\n\r\n      if (!isProjectLoaded(projectId))\r\n        return setElement(undefined);\r\n\r\n      const project = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_UDS_KEYS._settings).single();\r\n      if (isMounted)\r\n        setElement(project);\r\n    }\r\n\r\n    if (isMounted)\r\n      loadProject();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectId]);\r\n\r\n  // If there is no DB instance loaded, for now we just redirect to the project list\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  return (\r\n    <div className=\"relative border-2 border-gray-200 border-opacity-60 rounded bg-white\" style={{ minHeight: \"200px\" }}>\r\n      {(project === null) ? <Loader /> : <LoadedProject project={project} />}\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport {\r\n  ParentInfoForDetailsView,\r\n  RESERVED_UDS_KEYS,\r\n  SectionElement,\r\n  SystemData\r\n  } from 'app/data/model/project-info';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport class GetParentInfoForDetailsView {\r\n\r\n  private parentInfoForDetailsView: Array<ParentInfoForDetailsView> = [];\r\n\r\n  constructor(\r\n    private listOfParents: Array<string>,\r\n    private projectId: string,\r\n    private sections: SystemData[RESERVED_UDS_KEYS._sections]\r\n  ) { }\r\n\r\n  public async get(): Promise<Array<ParentInfoForDetailsView>> {\r\n    await asyncForEach(this.listOfParents, async sectionIdElementId => await this.processElement(sectionIdElementId));\r\n    return this.parentInfoForDetailsView;\r\n  }\r\n\r\n  private async processElement(sectionIdElementId: string): Promise<void> {\r\n    const arrInfo = sectionIdElementId.split('|');\r\n    const element = await dbInstances[this.projectId].callSelector<SectionElement>(arrInfo[0], { [RESERVED_FIELDS.id]: arrInfo[1] }).single();\r\n    const section = findSectionById(this.sections, arrInfo[0]);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    this.parentInfoForDetailsView.push({\r\n      sectionId: arrInfo[0],\r\n      element,\r\n      txt: element[section.formModel[indexFirstUserFiield].fieldName]\r\n    });\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ParentInfoForDetailsView, Section } from 'app/data/model/project-info';\r\nimport { GetParentInfoForDetailsView } from 'app/libs/project-helpers/get-parent-info-for-details-view.class';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ParentsLinkShower = ({ projectId, parentsInfo, sections }: { projectId: string, parentsInfo: Array<string>, sections: Array<Section> }) => {\r\n\r\n  const [parents, setParents] = useState<Array<ParentInfoForDetailsView>>([]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getParents = async () => {\r\n      const parents = await new GetParentInfoForDetailsView(parentsInfo, projectId, sections).get();\r\n      if (isMounted) {\r\n        setParents(parents);\r\n      }\r\n    }\r\n\r\n    if (isMounted)\r\n      getParents();\r\n\r\n    return (): void => { isMounted = false; };\r\n  }, [parentsInfo, projectId, sections]);\r\n\r\n  return (\r\n    <div className=\"p-3 pt-0\">\r\n      <p className=\"text-sm text-gray-500 mb-2\">Parent elements:</p>\r\n      {parents.map((parent, index) => (\r\n        <Link to={urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n          { name: URL_PARAMS.projectId, value: projectId },\r\n          { name: URL_PARAMS.sectionId, value: parent.sectionId },\r\n          { name: URL_PARAMS.elementId, value: parent.element.id }\r\n        ])} key={parent.element.id} className=\"mr-2 py-1 px-4 bg-gray-200 hover:bg-gray-300 bg-opacity-80 rounded-md text-sm font-semibold\">\r\n          {parent.txt}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n\r\n};","export const BasicText = ({ value }) => value || null;\r\n","export const CheckBoxAsCheck = ({ value }: { value: boolean }) => value ? '✓' : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDateTime = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd hh:mm', new Date(value)) : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDate = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd', new Date(value)) : null;\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { txtByFieldValue } from 'app/libs/project-helpers/txt-by-field-value.function';\r\n\r\nexport const TextFromOptionsByValue = (options: Array<OptionKeysModel>, { value }: { value: string | number }) => txtByFieldValue(options, value);\r\n","import { OptionKeysModel } from 'app/data/model/form-model-commons';\r\n/* eslint-disable eqeqeq */\r\n\r\n/**\r\n * Finds the text to be displayed for an option of a Radio or Select element based on the matching value\r\n */\r\nexport function txtByFieldValue(options: Array<OptionKeysModel>, toFindId: string | number): string | null {\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  const optionToReturn = options.find(option => option.value == toFindId);\r\n\r\n  if (typeof optionToReturn === 'undefined')\r\n    return null;\r\n\r\n  return optionToReturn.label;\r\n}\r\n\r\n","import { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { BasicText } from 'app/ui-react-components/project/values-renderers/basic-text.component';\r\nimport { CheckBoxAsCheck } from 'app/ui-react-components/project/values-renderers/check-box-as-check.component';\r\nimport { FormattedDateTime } from 'app/ui-react-components/project/values-renderers/formatted-date-time.component';\r\nimport { FormattedDate } from 'app/ui-react-components/project/values-renderers/formatted-date.component';\r\nimport { TextFromOptionsByValue } from 'app/ui-react-components/project/values-renderers/text-from-options-by-value.component';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const customRenderPicker = (formModel: FormFieldsModel<SupportedFormsTypes>) => {\r\n  switch (formModel.componentCode) {\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return BasicText;\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return TextFromOptionsByValue.bind(null, formModel.options);\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return CheckBoxAsCheck;\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return FormattedDate;\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return FormattedDateTime;\r\n    default:\r\n      return BasicText\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IAddElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  mode: EDITOR_MODE.add;\r\n  elementId?: never;\r\n}\r\n\r\ninterface IEditElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  elementId: string;\r\n  mode: EDITOR_MODE.edit;\r\n}\r\n\r\ntype IAddEditElementButtonProps = | IAddElementButtonProps | IEditElementButtonProps;\r\n\r\nexport const AddEditElementButton = ({ projectId, sectionId, mode, elementId }: IAddEditElementButtonProps) => {\r\n\r\n  const icon = mode === EDITOR_MODE.add ? 'bi-plus' : 'bi-pencil';\r\n  const urlParamsToFill = [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }];\r\n\r\n  if (mode === EDITOR_MODE.edit)\r\n    urlParamsToFill.push({ name: URL_PARAMS.elementId, value: elementId })\r\n\r\n  const urlToFill = mode === EDITOR_MODE.add ? ANITA_URLS.projectSectionAddEle : ANITA_URLS.projectSectionEditEle;\r\n\r\n  const url: string = urlParamFiller(urlToFill, urlParamsToFill);\r\n\r\n  return (\r\n    <Link to={url} className=\"absolute bottom-5 right-7 md:bottom-7 md:right-10 bg-prussian-blue-400 text-white text-xl shadow-xl rounded-3xl h-14 w-14 flex items-center justify-center\">\r\n      <i className={icon}></i>\r\n    </Link>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { ParentsLinkShower } from 'app/ui-react-components/project/details-components/parents-link-shower.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const SectionElementDetails = () => {\r\n\r\n  const [element, setElement] = useState<SectionElement>(null);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = params[URL_PARAMS.elementId];\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const fetchData = async () => {\r\n      if (!isProjectLoaded(projectId) || !projectId || !sectionId || !elementId || !project || project[RESERVED_UDS_KEYS._settings][0].id !== projectId)\r\n        return setElement(undefined);\r\n\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n\r\n      if (isMounted)\r\n        setElement(element);\r\n    }\r\n\r\n    if (isMounted)\r\n      fetchData();\r\n\r\n    return () => { isMounted = false };\r\n  }, [projectId, sectionId, elementId, project]);\r\n\r\n  if (element === undefined) {\r\n    if (projectId && sectionId)\r\n      return <Navigate to={urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])} />\r\n    else\r\n      return <Navigate to={ANITA_URLS.projectsList} />\r\n  }\r\n\r\n  return (\r\n    <MainContentContainer headerText=\"Details\">\r\n      {(element === null) ? <Loader /> : <ElementValuesViewer element={element} formModels={findSectionById(project[RESERVED_UDS_KEYS._sections], sectionId).formModel as Array<FormFieldsModel<SectionElement>>} />}\r\n      {(element !== null && element.parentsInfo && Array.isArray(element.parentsInfo) && element.parentsInfo.length > 0) && <ParentsLinkShower projectId={projectId} parentsInfo={element.parentsInfo} sections={project[RESERVED_UDS_KEYS._sections]} />}\r\n      {(element !== null && <AddEditElementButton projectId={projectId} sectionId={sectionId} elementId={elementId} mode={EDITOR_MODE.edit} />)}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}\r\n\r\nconst ElementValuesViewer = ({ element, formModels }: { element: SectionElement, formModels: Array<FormFieldsModel<SectionElement>> }) => {\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      {formModels.map((formModel) => {\r\n        if (!formModel.label)\r\n          return null;\r\n\r\n        return <ValueWithLabel key={formModel.fieldName} formModel={formModel} value={element[formModel.fieldName]} />\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ValueWithLabel = ({ formModel, value }: { formModel: FormFieldsModel<SectionElement>, value: any }) => {\r\n  if (typeof value === 'undefined')\r\n    return null;\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"text-sm text-gray-500\">{formModel.label}</p>\r\n      <p className=\"mb-3\">{customRenderPicker(formModel)({ value })}</p>\r\n    </div>\r\n  )\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ReactNode } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nexport const TdWithLinkToDetails = ({ children, tdProps, elementId }: { children: ReactNode, tdProps: {}, elementId: string }) => {\r\n\r\n  const navigation = useNavigate();\r\n  const params = useParams();\r\n\r\n  return (\r\n    <td\r\n      onClick={() => navigation(urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n        { name: URL_PARAMS.projectId, value: params.projectId },\r\n        { name: URL_PARAMS.sectionId, value: params.sectionId },\r\n        { name: URL_PARAMS.elementId, value: elementId }\r\n      ]))}\r\n      className=\"px-6 py-4 cursor-pointer\"\r\n      {...tdProps}\r\n    >\r\n      {children}\r\n    </td>\r\n  )\r\n\r\n}","import { SectionElement } from 'app/data/model/project-info';\r\nimport { Section } from 'app/data/model/project-info';\r\nimport { TdWithLinkToDetails } from 'app/ui-react-components/project/list-components/td-with-link-to-details.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { useMemo } from 'react';\r\nimport { useSortBy, useTable } from 'react-table';\r\n\r\n/**\r\n * Builds the columns for the table with react-table looping through sectionInfo\r\n */\r\nconst useSectionInfo = (sectionInfo: Section) => {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const colsToShoww = useMemo(() => [], [sectionInfo.id, sectionInfo.formModel]);\r\n  useMemo(\r\n    () => {\r\n      return sectionInfo.formModel.forEach(formModel => {\r\n        if (sectionInfo.id && formModel.label)\r\n          colsToShoww.push({\r\n            Header: formModel.label,\r\n            accessor: formModel.fieldName,\r\n            Cell: customRenderPicker(formModel),\r\n          });\r\n      }\r\n      )\r\n    },\r\n\r\n    [sectionInfo.id, sectionInfo.formModel, colsToShoww]\r\n  )\r\n  return colsToShoww;\r\n}\r\n\r\n\r\nexport const TableList = ({ sectionInfo, sectionData }: { sectionInfo: Section; sectionData: Array<SectionElement> }) => {\r\n  const columns = useSectionInfo(sectionInfo);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data: sectionData }, useSortBy);\r\n\r\n  return (\r\n    // apply the table props\r\n    <table className=\"table-auto w-full divide-y divide-gray-200\" {...getTableProps()}>\r\n      <thead className=\"bg-gray-50\">\r\n        {// Loop over the header rows\r\n          headerGroups.map(headerGroup => (\r\n            // Apply the header row props\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {// Loop over the headers in each row\r\n                headerGroup.headers.map(column => (\r\n                  // Apply the header cell props\r\n                  <th className=\"px-6 py-2 text-xs text-gray-500 text-left\" {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {// Render the header\r\n                      column.render('Header')}\r\n                  </th>\r\n                ))}\r\n            </tr>\r\n          ))}\r\n      </thead>\r\n      {/* Apply the table body props */}\r\n      <tbody className=\"divide-y divide-gray-200\" {...getTableBodyProps()}>\r\n        {// Loop over the table rows\r\n          rows.map(row => {\r\n            // Prepare the row for display\r\n            prepareRow(row)\r\n            return (\r\n              // Apply the row props\r\n              <tr className=\"whitespace-nowrap\" {...row.getRowProps()}>\r\n                {// Loop over the rows cells\r\n                  row.cells.map(cell => {\r\n                    // TODO No Link to details for checkbox\r\n                    // Apply the cell props\r\n                    return (\r\n                      <TdWithLinkToDetails key={`${cell.column.id}${cell.row.id}`} tdProps={cell.getCellProps()} elementId={cell.row.original.id}>\r\n                        {cell.render('Cell')}\r\n                      </TdWithLinkToDetails>\r\n                    )\r\n                  })}\r\n              </tr>\r\n            )\r\n          })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NoSectionData = ({ sectionTitle, sectionId, projectId }: { sectionTitle: string, sectionId: string, projectId: string }) => (\r\n  <div className=\"container px-5 py-24 mx-auto\">\r\n    <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n      <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n        <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">Nothing here yet</h2>\r\n        <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">There are no items in {sectionTitle}</h1>\r\n        <p className=\"leading-relaxed mb-3\">Create a new entry to populate this list</p>\r\n        <div className=\"flex flex-wrap mt-7\">\r\n          <Link\r\n            to={urlParamFiller(ANITA_URLS.projectSectionAddEle, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])}\r\n            className=\"flex-grow mx-2 mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n          >Create a new element\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SectionElement } from 'app/data/model/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { TableList } from 'app/ui-react-components/project/list-components/tableList.component';\r\nimport { NoSectionData } from 'app/ui-react-components/project/no-section-data.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nexport const SectionElementsList = () => {\r\n\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const [sectionData, setSectionData] = useState<Array<SectionElement>>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getSectionData = async () => {\r\n\r\n      if (!isProjectLoaded(projectId))\r\n        return;\r\n\r\n      const data = await dbInstances[projectId].callSelector<SectionElement>(sectionId).multiple();\r\n      if (isMounted)\r\n        setSectionData(data);\r\n    }\r\n\r\n    if (isMounted)\r\n      getSectionData();\r\n\r\n    return () => { isMounted = false; };\r\n  }, [sectionId, projectId]);\r\n\r\n  if (project === null)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  const sectionInfo = findSectionById(project[RESERVED_UDS_KEYS._sections], sectionId);\r\n\r\n  if (sectionData === null)\r\n    return <div>Loading...</div>;\r\n\r\n  if (sectionData.length === 0)\r\n    return <NoSectionData sectionId={sectionId} sectionTitle={sectionInfo.title} projectId={projectId} />;\r\n\r\n  return (\r\n    <MainContentContainer headerText={sectionInfo.title}>\r\n      <TableList sectionInfo={sectionInfo} sectionData={sectionData} />\r\n      <AddEditElementButton projectId={projectId} sectionId={sectionId} mode={EDITOR_MODE.add} />\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES } from 'app/data/model/form-model-commons';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\n/**\r\n * Defines the Form model to set the field properties of `ProjectSettings`.\r\n * Empty project template used when creating new projects.\r\n */\r\nexport const projectFormFieldsModel: Array<FormFieldsModel<ProjectSettings>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.dateCreation\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    value: '',\r\n    label: 'Project',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicTextarea,\r\n    fieldName: 'description',\r\n    value: '',\r\n    label: 'Description',\r\n    required: true\r\n  }\r\n];\r\n","import { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Sets the current project\r\n */\r\nexport class CurrentProjectSetter {\r\n\r\n  /**\r\n   * Creates an instance of current project setter.\r\n   * @param project the project to set as current project\r\n   */\r\n  constructor(\r\n    private projectSettings: SystemData[RESERVED_UDS_KEYS._settings],\r\n    private sectionsDefinitions: SystemData[RESERVED_UDS_KEYS._sections]\r\n  ) { }\r\n\r\n  /**\r\n   * Dispatches the action to set SystemData in state\r\n   */\r\n  public set(): void {\r\n    store.dispatch(({\r\n      type: REDUX_ACTIONS.setCurrentProject,\r\n      payload: { [RESERVED_UDS_KEYS._settings]: this.projectSettings.concat(), [RESERVED_UDS_KEYS._sections]: this.sectionsDefinitions.concat() }\r\n    }));\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\n\r\n/**\r\n * Implements deletor for MySql\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section on which to perform the query\r\n   * @param args the args of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes an element from the collection\r\n   */\r\n  public async autoDelete(): Promise<any> {\r\n\r\n    if (!Object.keys(this.args).length)\r\n      return 'Fatal error: trying to delete without any parameter';\r\n\r\n    // TODO\r\n\r\n    return;\r\n  }\r\n\r\n}\r\n","/**\r\n * Algorithm used for encryption.\r\n */\r\nexport const securePassEncrypter = '286b88f2ceb76ce1e7d28117bb2a7659';\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Encrypts a string\r\n *\r\n * @param value the value to encrypt\r\n * @param keyToUse the key to use for encryption\r\n * @return the encrypted string\r\n */\r\nexport function stringCrypter(value: string, keyToUse: string): string {\r\n  const encrypted = CryptoES.AES.encrypt(value, keyToUse);\r\n  return encrypted.toString();\r\n}\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Decrypts a string\r\n *\r\n * @param value the value to decrypt\r\n * @param keyToUse the key to use for decryption\r\n * @return the decrypted string\r\n */\r\nexport function stringDecrypter(value: string, keyToUse: string): string {\r\n  const decrypted = CryptoES.AES.decrypt(value, keyToUse);\r\n  return decrypted.toString();\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { securePassEncrypter } from 'app/libs/db-connector/crypter/options.constant';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Common methods needed to crypt and decrypt data, when data encryption in the DB is enabled.\r\n */\r\nexport class CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * User keys stored as static Object for fast retrieval from memory.\r\n   * The key of the Object is the string concatenation of the user and the undecrypted key to avoid collisions between projects/users.\r\n   */\r\n  private static userKeys: { [keyIdentifier: string]: string } = {};\r\n  private owner: string;\r\n  private undecryptedKey: string;\r\n  private keyIdentifier: string;\r\n\r\n  /**\r\n   * Encrypts the user key using the securePassEncrypter.\r\n   */\r\n  public static decryptUserKey(keyToEncrypt: string): string {\r\n    return stringCrypter(keyToEncrypt, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of Decrypter.\r\n   * @param dbConnector Instance of DbConnector.\r\n   * @param section the section definition, needed to know which fields should be decrypted.\r\n   * @param element the element to be decrypted.\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<DbTypes>,\r\n    protected section: keyof AbstractModel,\r\n    protected element: E\r\n  ) { }\r\n\r\n  /**\r\n   * Returns the unencrypted key of the owner of the element, if an emcrypted key for the user was provided when initializing DbInit.\r\n   */\r\n  protected getUserKey(): string {\r\n    this.setOwner();\r\n    this.setUndecryptedKey();\r\n\r\n    if (!this.undecryptedKey)\r\n      return undefined;\r\n\r\n    this.makeKeyIdentifier();\r\n\r\n    if (CryptHelper.userKeys[this.keyIdentifier])\r\n      return this.returnUserUnencryptedKey();\r\n\r\n    this.decryptUserKey();\r\n\r\n    return this.returnUserUnencryptedKey();\r\n  }\r\n\r\n  /**\r\n   * Logs no key error.\r\n   */\r\n  protected logNoKeyError(): void {\r\n    Logger.error(`ERROR: skipping encryption as no key was found for user ${this.owner}. Did you forget to pass the user key in the options when initializing DbInit?`);\r\n  }\r\n  /**\r\n   * Sets the id of the owner of the element being processed.\r\n   */\r\n  private setOwner(): void {\r\n    this.owner = this.element[this.dbConnector.DS[this.section].ownerIdentifier];\r\n  }\r\n\r\n  /**\r\n   * Sets the undecrypted key of the owner if one was found in dbConnector.options, otherwise `undefined`\r\n   */\r\n  private setUndecryptedKey(): void {\r\n    this.undecryptedKey = (typeof this.dbConnector.options.encryptionKeys === 'object' && this.dbConnector.options.encryptionKeys[this.owner]) ? this.dbConnector.options.encryptionKeys[this.owner] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Makes the identifier of the unencryyypted key by concatenating the `string` of the `owner` and the `string` of the encrypted key.\r\n   */\r\n  private makeKeyIdentifier(): void {\r\n    this.keyIdentifier = `${this.owner}${this.undecryptedKey}`;\r\n  }\r\n\r\n  /**\r\n   * Decrypts the user key using the securePassEncrypter.\r\n   */\r\n  private decryptUserKey(): void {\r\n    CryptHelper.userKeys[this.keyIdentifier] = stringDecrypter(this.undecryptedKey, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Returns the user unencrypted key retrieving it from the store in memory.\r\n   */\r\n  private returnUserUnencryptedKey(): string {\r\n    return CryptHelper.userKeys[this.keyIdentifier];\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\n\r\n/**\r\n * Encrypts one element at a time.\r\n */\r\nexport class Encrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to encrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.encrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Encrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for encryption.\r\n   * @param fieldName the key of the field to encrypt.\r\n   */\r\n  private encrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringCrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { FileSystemFileHandle, WindowFS } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\n\r\ndeclare const window: WindowFS;\r\n\r\n/**\r\n * Open a handle to an existing file on the local file system.\r\n */\r\nexport function getFileHandle(): Promise<Array<FileSystemFileHandle>> {\r\n  return window.showOpenFilePicker({ multiple: true }).then(handles => handles);\r\n}\r\n\r\n/**\r\n * Reads the file content from a fileHandle and returns it as a string.\r\n */\r\nexport async function readFileHandleAsText(fileHandle: FileSystemFileHandle): Promise<string> {\r\n  const file = await fileHandle.getFile() as any; // as any because .text not yet documented in TS\r\n  return file.text();\r\n}\r\n\r\n/**\r\n * Create a handle to a new (text) file on the local file system.\r\n */\r\nexport function getNewFileHandle(name: string = ''): Promise<FileSystemFileHandle> {\r\n  const opts = {\r\n    types: [{\r\n      name,\r\n      description: 'Anita project data file',\r\n      accept: { 'application/json': ['.json'] }\r\n    }]\r\n  };\r\n  return window.showSaveFilePicker(opts);\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nexport function readFile(file: any): Promise<string> {\r\n  // If the new .text() reader is available, use it.\r\n  if (file.text) {\r\n    return file.text();\r\n  }\r\n  // Otherwise use the traditional file reading technique.\r\n  return _readFileLegacy(file) as Promise<string>;\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nfunction _readFileLegacy(file: any): Promise<string> {\r\n  return new Promise(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', e => {\r\n      const text = e.target.result;\r\n      resolve(text as string);\r\n    });\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n\r\n/**\r\n * Writes the contents to disk.\r\n */\r\nexport async function writeFile(fileHandle: FileSystemFileHandle, contents: string): Promise<void> {\r\n  // For Chrome 83 and later.\r\n  // Create a FileSystemWritableFileStream to write to.\r\n  const writable = await fileHandle.createWritable();\r\n  // Write the contents of the file to the stream.\r\n  await writable.write(contents);\r\n  // Close the file and write the contents to disk.\r\n  await writable.close();\r\n}\r\n\r\n/**\r\n * Verify the user has granted permission to read or write to the file, if\r\n * permission hasn't been granted, request permission.\r\n */\r\nexport async function verifyPermission(fileHandle: FileSystemFileHandle, withWrite: boolean): Promise<boolean> {\r\n  const opts = {} as any;\r\n  if (withWrite) {\r\n    opts.writable = true;\r\n    opts.mode = 'readwrite';\r\n  }\r\n  // Check if we already have permission, if so, return true.\r\n  if (await fileHandle.queryPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // Request permission to the file, if the user grants permission, return true.\r\n  if (await fileHandle.requestPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // The user did nt grant permission, return false.\r\n  return false;\r\n}\r\n","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings, ProjectSettings } from 'app/data/model/project-info';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\n/**\r\n * Saves project's settings in IndexedDB.\r\n */\r\nexport class SaveProjectSettingsInIndexedDB {\r\n\r\n  /**\r\n   * Copy of the settings of the project to be saved in IndexedDB\r\n   */\r\n  private copyOfProjectSettings: LocalProjectSettings;\r\n\r\n  /**\r\n   * Creates an instance of save project settings in indexed db.\r\n   * @param projectSettings settings Object of the project to store\r\n   * @param fileHandle handle of the file on disk. Saved in the IndexedDB for future use\r\n   */\r\n  constructor(\r\n    private projectSettings: ProjectSettings,\r\n    private fileHandle: FileSystemFileHandle\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project settings in IndexedDB with its fileHandle\r\n   * @returns save \r\n   */\r\n  public async save(): Promise<LocalProjectSettings> {\r\n    this.setProjectSettingsClone();\r\n    this.setFileHandleOnProjectSettingsClone();\r\n    this.doStoreProjectSettings();\r\n\r\n    return this.copyOfProjectSettings;\r\n  }\r\n\r\n  /**\r\n   * Deep clonse settings and then adds the fileHandle to prevent setting the fileHandle on the project data object\r\n   */\r\n  private setProjectSettingsClone(): void {\r\n    this.copyOfProjectSettings = cloneDeep(this.projectSettings);\r\n  }\r\n\r\n  /**\r\n   * Sets the file handle on the project settings clone\r\n   */\r\n  private setFileHandleOnProjectSettingsClone(): void {\r\n    this.copyOfProjectSettings.fileHandle = this.fileHandle;\r\n  }\r\n\r\n  /**\r\n   * Stores the project settings with db-connector\r\n   */\r\n  private doStoreProjectSettings(): void {\r\n    dbInstances.system.callInsertor(CLIENT_SECTIONS.projects, this.copyOfProjectSettings).autoInsert();\r\n  }\r\n}\r\n","import { AnitaUniversalDataStorage, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { writeFile } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\n\r\n/**\r\n * Saves the `AnitaUniversalDataStorage` to the file a file on disk by using the fileHandle stored in the IndexedDB, if found, or asking the user to pick a new file.\r\n * It also calls `SaveProjectSettingsInIndexedDB` to store or overwrite the `LocalProjectSettings` in IndexedDB.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n */\r\nexport class ProjectFileHandleSaver {\r\n\r\n  /**\r\n   * The string data to sabe in the file on disk\r\n   */\r\n  private data: string;\r\n\r\n  /**\r\n   * Creates an instance of project file handle saver.\r\n   * @param projectData full data of the project to be saved\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project both on file and in IndexedDB\r\n   */\r\n  public async save(): Promise<void> {\r\n    this.setData();\r\n    this.saveDataToDisk();\r\n    await new SaveProjectSettingsInIndexedDB(this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._settings][0], this.dbConnector.options.projectInfo.fileHandle).save();\r\n    await new CurrentProjectSetter(this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._settings], this.dbConnector.dbStore.db[RESERVED_UDS_KEYS._sections]).set();\r\n    await new ProjectsListLoader().load();\r\n  }\r\n\r\n  /**\r\n   * Converts the project data to string\r\n   */\r\n  private setData(): void {\r\n    this.data = JSON.stringify(this.dbConnector.dbStore.db);\r\n  }\r\n\r\n  /**\r\n   * Actually saves the data to disk by calling writeFile\r\n   * \r\n   * @see writeFile\r\n   */\r\n  private saveDataToDisk(): void {\r\n    writeFile(this.dbConnector.options.projectInfo.fileHandle, this.data);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage, SectionElement } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { ProjectFileHandleSaver } from 'app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class';\r\n\r\nexport class ElementAdderToCollection<E> {\r\n\r\n  private index: number;\r\n\r\n  /**\r\n   * Creates an instance of db ElementAdderToCollection.\r\n   * @param dbConnector the instance of DbConnector from which ElementAdderToCollection is called\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    protected section: keyof AbstractModel,\r\n    protected element: Partial<E>\r\n  ) { }\r\n\r\n  protected async save(): Promise<void> {\r\n    this.setSectionStore();\r\n    this.checkIfElementInStoreAndSetIndex();\r\n    this.addToStore();\r\n    await new ProjectFileHandleSaver(this.dbConnector).save();\r\n  }\r\n\r\n  /**\r\n   * Sets the index of the element being saved if it was already in the store, else assigns the lenght of the array to push it at the end.\r\n   *\r\n   * @remarks The index is used by `addToStore` to replace the existing element with the new one when in edit mode.\r\n   */\r\n  protected checkIfElementInStoreAndSetIndex(): void {\r\n    const elements = this.dbConnector.dbStore.db[this.section] as Array<SectionElement>;\r\n    const check = elements.findIndex(ele => this.element[this.dbConnector.DS[this.section].pk] === ele[this.dbConnector.DS[this.section].pk]);\r\n    this.index = (check >= 0) ? check : elements.length;\r\n  }\r\n\r\n  /**\r\n   * Sets an ampty array is the project did not have one already\r\n   */\r\n  private setSectionStore(): void {\r\n    if (!this.dbConnector.dbStore.db[this.section])\r\n      this.dbConnector.dbStore.db[this.section] = [];\r\n  }\r\n\r\n  /**\r\n   * Adds the element to the end of the store if it's a new element, otherwise replaces the existing element.\r\n   */\r\n  private addToStore(): void {\r\n    this.dbConnector.dbStore.db[this.section][this.index] = this.element as unknown as SectionElement;\r\n  }\r\n\r\n}\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements insertor for MySql\r\n */\r\nexport class DbInsertor<E> extends ElementAdderToCollection<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Adds an element to the collection\r\n   */\r\n  public async autoInsert(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption with Encrypter\r\n   * \r\n   * @see Encrypter\r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    await new Encrypter(this.dbConnector, this.section, this.element).do();\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\n\r\n/**\r\n * Decrypts one element at a time.\r\n */\r\nexport class Decrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to decrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.decrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Decrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for decryption.\r\n   * @param fieldName the key of the field to decrypt.\r\n   */\r\n  private decrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringDecrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { Decrypter } from 'app/libs/db-connector/crypter/decrypter.class';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\n\r\nexport class DbSelector<E> implements Selector<E> {\r\n\r\n  private results: Array<any>;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E> = {}\r\n  ) { }\r\n\r\n  /**\r\n   * Gets one element with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async single(): Promise<E> {\r\n    await this.doSelect();\r\n\r\n    if (!this.results.length)\r\n      return;\r\n\r\n    return this.results.find(ele => this.filterKeys(ele));\r\n  }\r\n\r\n  private filterKeys(eleToCheck: E): boolean {\r\n    const keys = Object.keys(this.args);\r\n    let res = true;\r\n    let counter = 0;\r\n    while (res && counter < keys.length) {\r\n      res = eleToCheck[keys[counter]] === this.args[keys[counter]];\r\n      counter++;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Gets multiple elements in an Array with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    await this.doSelect();\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * Counts elements calling multiple and then calling `Array.lenght`\r\n   * @see multiple\r\n   */\r\n  public async count(): Promise<number> {\r\n    await this.multiple();\r\n    return this.results.length;\r\n  }\r\n\r\n  /**\r\n   * Builds the query with QueryMaker and runs it with executeQuery\r\n   * \r\n   * @see QueryMaker\r\n   * @see executeQuery\r\n   */\r\n  private async doSelect(): Promise<void> {\r\n    this.results = this.dbConnector.dbStore.db[this.section] && this.dbConnector.dbStore.db[this.section].length ? this.dbConnector.dbStore.db[this.section] : [];\r\n    await this.handleDecryption();\r\n  }\r\n\r\n  /**\r\n   * Handles decryption\r\n   * \r\n   * @see Decrypter \r\n   */\r\n  private async handleDecryption(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted && this.results.length)\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < this.results.length; i++)\r\n        await new Decrypter(this.dbConnector, this.section, this.results[i]).do();\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { Section, SectionElement } from 'app/data/model/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/constants/ds.constant';\r\nimport { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Converts the abstract definition of a Section into a complete datastructure that can be processed by FormDataParserService\r\n *\r\n * @see FormDataParserService\r\n */\r\nexport class DataStructureExtender {\r\n\r\n  /**\r\n   * Temporarly stores all the sections defined by `buildSectionDefinition`\r\n   *\r\n   * @see buildSectionDefinition\r\n   */\r\n  private allSez: Array<SectionDefinition<SectionElement>> = [];\r\n\r\n  private datastructure: AbstractModel = {};\r\n\r\n  constructor(\r\n    private sections: Array<Section>\r\n  ) { }\r\n\r\n  /**\r\n   * First calls `cleanDataStructure` if a previous project was set.\r\n   * Then builds all sections definitions with `buildSectionDefinition`.\r\n   * Finally calls `buildAndAddAllSections` to build the full section and add it to the datastructure.\r\n   */\r\n  public extend(): AbstractModel {\r\n    this.sections.forEach(section => this.buildSectionDefinition(section));\r\n    this.allSez.forEach(sezDefinition => this.buildAndAddAllSections(sezDefinition));\r\n    return this.datastructure;\r\n  }\r\n\r\n  /**\r\n   * Builds a contant with the specifications of a Section starting from the structure defined by the user.\r\n   */\r\n  private buildSectionDefinition(section: Section): void {\r\n    const sezDefinition: SectionDefinition<SectionElement> = {\r\n      name: section.id,\r\n      fields: Object.values(RESERVED_FIELDS)\r\n    };\r\n    section.formModel.forEach(field => {\r\n      sezDefinition.fields.push(field.fieldName);\r\n    });\r\n\r\n    this.allSez.push(sezDefinition);\r\n  }\r\n\r\n  /**\r\n   * Starting from the definition of the Section, builds a full model of the Section and adds it to the datastructure.\r\n   */\r\n  private buildAndAddAllSections(sezDefinition: SectionDefinition<SectionElement>): void {\r\n    const sez = new SezBuilder<SectionElement>(\r\n      this.allSez,\r\n      sezDefinition.name,\r\n      sezDefinition.fields\r\n    ).make();\r\n    this.addToTempTs(sez);\r\n  }\r\n\r\n  /**\r\n   * Creates a new key on the datastructure and sets on it the model of the section.\r\n   */\r\n  private addToTempTs(sez: SectionModel<SectionElement>): void {\r\n    this.datastructure[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getNewFileHandle, verifyPermission } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\n/**\r\n * Uses the fileHandle stored in IndexedDB, if any, or asks for a new one \r\n */\r\nexport async function fileHandleChecker(options: DsDbInitOptions): Promise<FileSystemFileHandle> {\r\n  if (!options.projectInfo.fileHandle)\r\n    return await getNewFileHandle(`anita-fh-${options.projectInfo.id}`);\r\n\r\n  await verifyPermission(options.projectInfo.fileHandle, true);\r\n  return options.projectInfo.fileHandle;\r\n\r\n}\r\n","import { DataStructureExtender } from 'app/data/data-structure-extender.class';\r\nimport { AnitaUniversalDataStorage, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnectorInstance, DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { fileHandleChecker } from 'app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function';\r\nimport { readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\nexport class DbStore implements DbStoreInterface<AnitaUniversalDataStorage> {\r\n\r\n  /**\r\n   * Project data\r\n   */\r\n  public db: AnitaUniversalDataStorage = {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  };\r\n\r\n  /**\r\n   * Contents of project file as string\r\n   */\r\n  private contents: string;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private options: DsDbInitOptions\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<AnitaUniversalDataStorage>> {\r\n\r\n    if (!this.options.projectInfo)\r\n      throw new Error('No projectInfo passed to DbConnector.\\nTo retrieve a project from a local file, pass the an Object of type LocalProjectSettings as value of projectInfo to the options of DbConnector');\r\n\r\n    const fileHandle = await fileHandleChecker(this.options);\r\n\r\n    // If the project already had a FileHandle, the data file already existed so we read it and load it\r\n    if (this.options.projectInfo.fileHandle)\r\n      await this.initializeExistingProject();\r\n    // Otherwise, we are inizializing a new project, so we store in memory the fileHandle, which will be sabed by ProjectFileHandleSaver when saving the project\r\n    else\r\n      this.options.projectInfo.fileHandle = fileHandle;\r\n\r\n    return this;\r\n  }\r\n\r\n  public close(): void {\r\n    // NOT NEEDED\r\n  }\r\n\r\n  public async initializeExistingProject(): Promise<void> {\r\n    await this.doReadFile();\r\n    this.parseFileContents();\r\n    this.makedDS();\r\n  }\r\n\r\n  /**\r\n   * Loads file from disk using the fileHandle retrieved from IndexedDB\r\n   */\r\n  private async doReadFile(): Promise<void> {\r\n    this.contents = await readFileHandleAsText(this.options.projectInfo.fileHandle);\r\n  }\r\n\r\n  /**\r\n   * Parses the string file content as data\r\n   */\r\n  private parseFileContents(): void {\r\n    this.db = JSON.parse(this.contents);\r\n  }\r\n\r\n  /**\r\n   * Extends DS (DataStructure) with the sections of the project so that FormDataParserService correctly pares FormData\r\n   *\r\n   * @see FormDataParserService\r\n   * @see DataStructureExtender\r\n   */\r\n  private makedDS(): void {\r\n    this.dbConnector.DS = Object.assign(this.dbConnector.DS, new DataStructureExtender(this.db[RESERVED_UDS_KEYS._sections]).extend());\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/model/project-info';\r\nimport { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbStore } from './db-store/dbstore.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use MySql as plugin\r\n */\r\nexport const FILE_HANDLES_PLUGIN: DbObjects<any, AnitaUniversalDataStorage> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Updator } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements updator for MySql\r\n */\r\nexport class DbUpdator<E> extends ElementAdderToCollection<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Updates an element in the collection\r\n   */\r\n  public async autoUpdate(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption\r\n   * \r\n   * @see Encrypter \r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    await new Encrypter(this.dbConnector, this.section, this.element).do();\r\n  }\r\n\r\n}\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport class ProjectSaver {\r\n\r\n  private projectDataToSave: SystemData = {\r\n    [RESERVED_UDS_KEYS._settings]: [],\r\n    [RESERVED_UDS_KEYS._sections]: []\r\n  };\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private mode: EDITOR_MODE\r\n\r\n  ) { }\r\n\r\n  public async save(): Promise<SystemData> {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings] = this.project[RESERVED_UDS_KEYS._settings].concat();\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._sections] = this.project[RESERVED_UDS_KEYS._sections].concat();\r\n\r\n    this.setDateCreation();\r\n\r\n    if (this.mode === EDITOR_MODE.edit)\r\n      this.setLastModified();\r\n\r\n    if (!dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id])\r\n      await this.initDbInstance();\r\n\r\n    await this.saveSettings();\r\n    await this.saveSections();\r\n\r\n    this.fileHandleOnlyActions();\r\n\r\n    return this.projectDataToSave;\r\n  }\r\n\r\n  private setDateCreation(): void {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].dateCreation = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private setLastModified(): void {\r\n    this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].lastModified = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private async initDbInstance(): Promise<void> {\r\n    dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.projectDataToSave[RESERVED_UDS_KEYS._settings][0] }).init();\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    await dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].callInsertor(RESERVED_UDS_KEYS._settings, this.projectDataToSave[RESERVED_UDS_KEYS._settings][0]).autoInsert();\r\n  }\r\n\r\n  private async saveSections(): Promise<void> {\r\n    await asyncForEach(this.projectDataToSave[RESERVED_UDS_KEYS._sections], async section => await dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].callInsertor(RESERVED_UDS_KEYS._sections, section).autoInsert());\r\n  }\r\n\r\n  private fileHandleOnlyActions(): Promise<void> {\r\n    if (this.mode === EDITOR_MODE.add)\r\n      return dbInstances[this.projectDataToSave[RESERVED_UDS_KEYS._settings][0].id].dbStore['initializeExistingProject']();\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { FORM_COMPONENTS_CODES, SELECTABLE_FORM_ELES } from 'app/data/model/form-model-commons';\r\nimport { SectionCustomFieldProperties, SectionDetailsDeclaration } from 'app/data/model/project-info';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\n\r\nexport const sectionDetailsFormFieldsModel: Array<FormFieldsModel<SectionDetailsDeclaration>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    label: 'Section name',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.childOfSelectorForSection,\r\n    fieldName: 'childOf',\r\n    label: 'Parent sections:',\r\n    options: []\r\n  }\r\n];\r\n\r\n/**\r\n * Defines common fields that are used both when creating and editing fields of a `Section`.\r\n */\r\nconst commonAddAndEditFields: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.optionsMaker,\r\n    fieldName: 'options',\r\n    type: 'text',\r\n    label: 'Possible values',\r\n    prerequisites: [{ componentCode: [FORM_COMPONENTS_CODES.basicSelect, FORM_COMPONENTS_CODES.basicRadio] }],\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    fieldName: 'required',\r\n    value: false,\r\n    label: 'Required'\r\n  }\r\n];\r\n\r\n/**\r\n * Defines the Form model to set the field properties of a `Section`.\r\n * All the values specified in each field of `sectionFieldForNewItem` are necessary for creating each field.\r\n *\r\n * @remarks\r\n * For new fields only. Existing items must use `sectionFieldForEditing` as some properties can't be changed after the filed has been created.\r\n */\r\nexport const sectionFieldForNewItem: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the properties of an existing field of a `Section`.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `sectionFieldForNewItem` instead.\r\n */\r\nexport const sectionFieldForEditing: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { sectionFieldForEditing, sectionFieldForNewItem } from 'app/data/form-models/section-builder.constant';\r\nimport { OptionKeysModel } from 'app/data/model/form-model-commons';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport {\r\n  IUpdateFormProjectUpdateFormModelAddOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelDeleteOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelOfSectionPayload,\r\n  IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n  } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\n\r\ninterface ISectionFormModelManagerProps {\r\n  indexSection: number;\r\n  indexFormElement: number;\r\n  element: FormFieldsModel<SupportedFormsTypes>;\r\n}\r\n\r\nconst alreadyExists = (section: Section, fieldName: string): boolean => {\r\n  if (!fieldName || !section) return false;\r\n  return section.formModel.some(formElement => formElement.fieldName === fieldName);\r\n}\r\n\r\nexport const SectionFormModelManager = (props: ISectionFormModelManagerProps) => {\r\n\r\n  const { indexSection, indexFormElement, element } = props;\r\n\r\n  const params = useParams();\r\n  const sections = useSelector((state: AnitaStore) => state.formProject.original[RESERVED_UDS_KEYS._sections]);\r\n  const mode = params[URL_PARAMS.projectId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n  const formModelToUse = mode === EDITOR_MODE.edit && alreadyExists(sections[indexSection], element.fieldName) ? sectionFieldForEditing : sectionFieldForNewItem;\r\n\r\n  const handleChange = (indexSection: number, indexFormElement: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        formElement: { ...element, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOfSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleOptionsChange = (indexSection: number, indexFormElement: number, indexOptions: number, optionElement: OptionKeysModel, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions,\r\n        formElement: { ...optionElement, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddOption = (indexSection: number, indexFormElement: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption, payload: {\r\n        indexSection,\r\n        indexFormElement\r\n      } as IUpdateFormProjectUpdateFormModelAddOptionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickDeleteOption = (indexSection: number, indexFormElement: number, indexOptions: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions\r\n      } as IUpdateFormProjectUpdateFormModelDeleteOptionPayload\r\n    });\r\n  }\r\n\r\n  return (\r\n    <FormAutomator\r\n      {\r\n      ...{\r\n        ...props,\r\n        formModel: formModelToUse as Array<FormFieldsModel<any>>,\r\n        handleChange: handleChange.bind(undefined, indexSection, indexFormElement),\r\n        handleOptionsChange: handleOptionsChange.bind(undefined, indexSection, indexFormElement),\r\n        handleClickAddOption: handleClickAddOption.bind(undefined, indexSection, indexFormElement),\r\n        handleClickDeleteOption: handleClickDeleteOption.bind(undefined, indexSection, indexFormElement)\r\n      }\r\n      }\r\n    />\r\n  )\r\n\r\n}","import { sectionDetailsFormFieldsModel } from 'app/data/form-models/section-builder.constant';\r\nimport { RESERVED_FIELDS } from 'app/data/form-models/system-fields-for-sections.constant';\r\nimport { RESERVED_UDS_KEYS, Section } from 'app/data/model/project-info';\r\nimport { IUpdateFormProjectRemoveFieldFromSectionPayload, IUpdateFormProjectUpdateSectionPayload } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { SectionFormModelManager } from 'app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component';\r\nimport { DANGER_BTN_OUTLINE, SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SectionManager = ({ section, sectionIndex }: { section: Section, sectionIndex: number }) => {\r\n\r\n  const sections = useSelector((store: AnitaStore) => store.formProject.project[RESERVED_UDS_KEYS._sections]);\r\n  const customFields: Array<string> = section.formModel\r\n    .map(formElement => Object.values(RESERVED_FIELDS).includes(formElement.fieldName) ? null : formElement.fieldName)\r\n    .filter(fieldName => fieldName !== null);\r\n\r\n  const handleChange = (index: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateSection, payload: {\r\n        section: { ...section, [fieldName]: value },\r\n        index\r\n      } as IUpdateFormProjectUpdateSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddField = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddFieldToSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteField = (fieldIndex: number) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection, payload: { sectionIndex, fieldIndex } as IUpdateFormProjectRemoveFieldFromSectionPayload });\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n      <div>\r\n        <h3 className=\"text-md font-bold\">{`Section # ${sectionIndex + 1}`}</h3>\r\n        <hr className=\"mt-4\" />\r\n      </div>\r\n      <div className=\"pt-4\">\r\n        <FormAutomator\r\n          formModel={sectionDetailsFormFieldsModel as Array<FormFieldsModel<any>>}\r\n          element={section}\r\n          handleChange={handleChange.bind(undefined, sectionIndex)}\r\n          sectionId={section.id}\r\n        />\r\n      </div>\r\n      <h4 className=\"pl-2 font-bold mb-2 mt-6\">Section element fields</h4>\r\n      {section.formModel.map((formElement, indexFormElement) =>\r\n        !customFields.includes(formElement.fieldName) ? null : (\r\n          <div key={`${section.id}-${indexFormElement}`} className=\"border border-transparent hover:border-prussian-blue-500 shadow rounded mb-3 p-4\">\r\n            <SectionFormModelManager\r\n              indexFormElement={indexFormElement}\r\n              indexSection={sectionIndex}\r\n              element={formElement}\r\n            />\r\n            {customFields.length < 2 ? null : (\r\n              <div className=\"flex justify-end\">\r\n                <button\r\n                  onClick={handleClickDeleteField.bind(undefined, indexFormElement)}\r\n                  className={`text-sm py-1 px-3 ${DANGER_BTN_OUTLINE}`}>\r\n                  Delete field\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      )}\r\n      <div className=\"flex items-end mt-10 mb-1\">\r\n        {(sections.length > 1) && <button onClick={handleClickDeleteSection}\r\n          className={`py-2 px-4 text-sm ${DANGER_BTN_OUTLINE}`}>\r\n          Delete section\r\n        </button>}\r\n        <button onClick={handleClickAddField}\r\n          className={`ml-auto py-2 px-4 text-sm ${SUCCESS_BTN_OUTLINE}`}>\r\n          Add field\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { projectFormFieldsModel } from 'app/data/form-models/project-form-fields-model.constant';\r\nimport { RESERVED_UDS_KEYS, SystemData } from 'app/data/model/project-info';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { ProjectSaver } from 'app/libs/project-helpers/project-handlers/project-saver.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { SectionManager } from 'app/ui-react-components/projects/add-edit-project-components/section-manager.component';\r\nimport { SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-fields/form-fields-model';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router';\r\n\r\nexport const FormProjectManager = () => {\r\n\r\n  const { projectId } = useParams<URL_PARAMS>();\r\n  const project = useSelector((state: AnitaStore) => state.formProject.project);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const navigate = useNavigate();\r\n\r\n  const handleProjectChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectSettings, payload: { ...project[RESERVED_UDS_KEYS._settings][0], [fieldName]: value } });\r\n  }\r\n\r\n  const handleClickSave = () => {\r\n    const mode: EDITOR_MODE = projectId ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n    new ProjectSaver(project as SystemData, mode).save();\r\n    new CurrentProjectSetter(project[RESERVED_UDS_KEYS._settings], project[RESERVED_UDS_KEYS._sections]).set();\r\n    navigate(urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project[RESERVED_UDS_KEYS._settings][0].id }]));\r\n  }\r\n\r\n  const handleClickAddSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddSection });\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <FormAutomator formModel={projectFormFieldsModel as any} element={project[RESERVED_UDS_KEYS._settings][0]} handleChange={handleProjectChange} />\r\n      </div>\r\n      <div className=\"px-3\">\r\n        {project[RESERVED_UDS_KEYS._sections].map((section, index) => <SectionManager key={section.id} section={section} sectionIndex={index} />)}\r\n      </div>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <div className=\"flex items-end flex-wrap\">\r\n          <button\r\n            className={`py-2 px-6 mr-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddSection}\r\n          >Add section</button>\r\n          <button\r\n            className=\"ml-auto py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n            onClick={() => navigate(-1)}\r\n          >Cancel</button>\r\n          <button\r\n            disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n            className=\"py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500 disabled:bg-gray-400 disabled:bg-opacity-40 disabled:cursor-not-allowed\"\r\n            onClick={handleClickSave}\r\n          >Save</button>\r\n        </div>\r\n      </div>\r\n    </span>\r\n  )\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport {\r\n  ProjectSettings,\r\n  RESERVED_UDS_KEYS,\r\n  Section,\r\n  SystemData\r\n  } from 'app/data/model/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormProjectManager } from 'app/ui-react-components/projects/add-edit-project-components/form-project-manager.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditProject = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.projectId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n\r\n  const [project, setProject] = useState<Partial<SystemData> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    // in add mode, sets a new project\r\n    if (mode === EDITOR_MODE.add)\r\n      return setProject({\r\n        [RESERVED_UDS_KEYS._settings]: [{ id: IdCreator.random(), title: '', description: '', dateCreation: '' }],\r\n        [RESERVED_UDS_KEYS._sections]: [{ id: IdCreator.random(), title: '', formModel: [{} as any] }],\r\n      });\r\n\r\n    if (!isProjectLoaded(projectId) || !projectId)\r\n      return setProject(undefined);\r\n\r\n    const fetchEProject = async () => {\r\n      const _settings = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_UDS_KEYS._settings).multiple();\r\n      const _sections = await dbInstances[projectId].callSelector<Section>(RESERVED_UDS_KEYS._sections).multiple();\r\n\r\n      if (isMounted)\r\n        setProject({ _settings, _sections });\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchEProject();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId]);\r\n\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Project' : 'Edit Project';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.setFormProject, payload: project });\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"p-4 bg-white rounded shadow\">\r\n        <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n      </div>\r\n      {project === null && <Loader />}\r\n      {project !== null && <FormProjectManager />}\r\n    </span>\r\n  )\r\n\r\n};\r\n\r\n// {project !== null && <SaveElement sectionId={sectionId} />}","import { dbInstances } from 'app/data/db-instances.const';\r\nimport {\r\n  AnitaUniversalDataStorage,\r\n  LocalProjectSettings,\r\n  ProjectSettings,\r\n  RESERVED_UDS_KEYS\r\n  } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getFileHandle, readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\n\r\n/**\r\n * Imports one or more existing project files, and then calls `SaveProjectSettingsInIndexedDB`.\r\n * Also sets the last imported project as the current one by calling `CurrentProjectSetter`.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n * @see CurrentProjectSetter\r\n */\r\nexport class ProjectFileImporter {\r\n\r\n  /**\r\n   * List of FileSystemFileHandle for each project to import\r\n   */\r\n  private fileHandles: Array<FileSystemFileHandle>;\r\n  /**\r\n   * The file contents of each project to import\r\n   */\r\n  private fileContents: string;\r\n  /**\r\n   * The project data of each project to import\r\n   */\r\n  private projectData: AnitaUniversalDataStorage;\r\n\r\n  private localProjectSettings: LocalProjectSettings;\r\n\r\n  /**\r\n   * Asks for the files to import and processes them, then sets the current project as the last one imported \r\n   */\r\n  public async import(): Promise<void> {\r\n    await this.askForFile();\r\n    await this.processFileHandles();\r\n    await this.initializeDb();\r\n    new CurrentProjectSetter(this.projectData[RESERVED_UDS_KEYS._settings], this.projectData[RESERVED_UDS_KEYS._sections]).set();\r\n  }\r\n\r\n  /**\r\n   * Asks for user permission to open a file\r\n   */\r\n  private async askForFile(): Promise<void> {\r\n    this.fileHandles = await getFileHandle();\r\n  }\r\n\r\n  /**\r\n   * For each file selected by the user, starts the import logic \r\n   */\r\n  private async processFileHandles(): Promise<void> {\r\n    await asyncForEach(this.fileHandles, async fileHandle => await this.processFileHandle(fileHandle));\r\n  }\r\n\r\n  /**\r\n   * Saves the project settings in IndexedDB and adds the project to the project list \r\n   */\r\n  private async processFileHandle(fileHandle: FileSystemFileHandle): Promise<void> {\r\n    this.fileContents = await readFileHandleAsText(fileHandle);\r\n    this.parseFileContents();\r\n    this.localProjectSettings = await new SaveProjectSettingsInIndexedDB(this.projectData[RESERVED_UDS_KEYS._settings][0], fileHandle).save();\r\n    this.dispatchProject(this.projectData[RESERVED_UDS_KEYS._settings][0]);\r\n  }\r\n\r\n  /**\r\n   * Converts the string of the project to the type `AnitaUniversalDataStorage`\r\n   */\r\n  private parseFileContents(): void {\r\n    this.projectData = JSON.parse(this.fileContents);\r\n  }\r\n\r\n  /**\r\n   * Initialize the DbConnector instance\r\n   */\r\n  private async initializeDb(): Promise<void> {\r\n    dbInstances[this.projectData[RESERVED_UDS_KEYS._settings][0].id] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.localProjectSettings }).init();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the action to add the project to the list of projects\r\n   */\r\n  private dispatchProject(payload: ProjectSettings): void {\r\n    store.dispatch({ type: REDUX_ACTIONS.addProjectToList, payload });\r\n  }\r\n\r\n}\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectFileImporter } from 'app/libs/projects-helpers/file-handle-helpers/project-file-importer.class';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nexport const ProjectsNone = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleClickImport = async () => {\r\n    await new ProjectFileImporter().import()\r\n    navigate(ANITA_URLS.projectsList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container px-5 py-24 mx-auto\">\r\n      <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n        <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n          <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">No projects found</h2>\r\n          <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">You do not have any Projects on this device yet</h1>\r\n          <p className=\"leading-relaxed mb-3\">You can create a new project or import one from an existing project file.</p>\r\n          <div className=\"flex flex-wrap mt-7\">\r\n            <a\r\n              href=\"#\"\r\n              onClick={handleClickImport}\r\n              className=\"flex-grow mx-2 mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n            >Import an existing project\r\n            </a>\r\n            <Link\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"flex-grow mx-2 mt-4 bg-gray-200 border-0 py-3 px-8 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            >Create a new project\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/model/project-info';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ProjectLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"ml-auto\">\r\n    <EditButton project={project} />\r\n    <Link to={urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-white inline-flex items-center leading-none text-sm bg-prussian-blue-400 hover:bg-prussian-blue-500 rounded\">\r\n      <i className=\"bi-info-circle mr-2\"></i>Project details\r\n    </Link>\r\n  </div>\r\n\r\n)","import { CLIENT_SECTIONS } from 'app/data/client-sections.enum';\r\nimport { dbInstances } from 'app/data/db-instances.const';\r\nimport { LocalProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\n\r\nexport class ProjectLoader {\r\n\r\n  /**\r\n   * The project info of the project to load\r\n   */\r\n  private projectInfo: LocalProjectSettings;\r\n\r\n  /**\r\n   * Creates an instance of ProjectLoader\r\n   * @param projectId the id of the projct to load\r\n   */\r\n  constructor(\r\n    private projectId: string\r\n  ) { }\r\n\r\n  public async loadProject(): Promise<void> {\r\n    await this.setProjectInfoFromIndexedDB();\r\n    await this.createNewInstanceOfDbConnectorForrProject();\r\n    this.callCurrentProjectSetter();\r\n  }\r\n\r\n  /**\r\n   * Loads project info from indexedDB\r\n   */\r\n  private async setProjectInfoFromIndexedDB() {\r\n    this.projectInfo = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects, { id: this.projectId }).single();\r\n  }\r\n\r\n  /**\r\n   * Creates new instance of dbConnector for the project so it can be used in the app\r\n   */\r\n  private async createNewInstanceOfDbConnectorForrProject() {\r\n    dbInstances[this.projectId] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.projectInfo }).init();\r\n  }\r\n\r\n  /**\r\n   * Calls current project setter to load the current project in the Redux store\r\n   */\r\n  private callCurrentProjectSetter() {\r\n    new CurrentProjectSetter(dbInstances[this.projectId].dbStore.db[RESERVED_UDS_KEYS._settings], dbInstances[this.projectId].dbStore.db[RESERVED_UDS_KEYS._sections]).set();\r\n  }\r\n\r\n}","import { ProjectSettings } from 'app/data/model/project-info';\r\nimport { ProjectLoader } from 'app/libs/project-helpers/project-handlers/project-loader.class';\r\n\r\nexport const ProjectNotLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <button onClick={() => new ProjectLoader(project.id).loadProject()} className=\"px-4 py-2 text-white ml-auto inline-flex items-center md:mb-2 lg:mb-0 rounded bg-green-500 hover:bg-green-600 text-sm\">\r\n    Load project\r\n  </button>\r\n)\r\n","import { dbInstances } from 'app/data/db-instances.const';\r\nimport { ProjectSettings, RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-loaded-footer.component';\r\nimport { ProjectNotLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const ProjectCard = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const projectState = useSelector((state: AnitaStore) => state.project);\r\n\r\n  return (\r\n    <div className=\" mt-4 h-full border-2 border-gray-200 border-opacity-60 rounded-lg bg-white\">\r\n      <div className=\"p-6\">\r\n        <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n        <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n        <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n        <p className=\"text-md\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.dateCreation))}</p>\r\n\r\n        <CardFooterItemsEnd>\r\n          <DeleteProjectButton project={project} />\r\n          {(\r\n            projectState === null ||\r\n            projectState[RESERVED_UDS_KEYS._settings][0].id !== project.id ||\r\n            dbInstances[project.id] === undefined\r\n          ) ? <ProjectNotLoadedFooter project={project} /> : <ProjectLoadedFooter project={project} />}\r\n        </CardFooterItemsEnd>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectFileImporter } from 'app/libs/projects-helpers/file-handle-helpers/project-file-importer.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectCard } from 'app/ui-react-components/projects/project-card.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n// Disabled rule as <a> and <button> would have different layouts\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nexport const ProjectsList = () => {\r\n\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n  const projects = useSelector((state: AnitaStore) => state.projects);\r\n  const projectsLenght = Array.isArray(projects) ? projects.length : 0;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const loadProjectsList = async () => {\r\n      await new ProjectsListLoader().load();\r\n      setHasLoaded(true);\r\n    }\r\n    if (isMounted)\r\n      loadProjectsList();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectsLenght]);\r\n\r\n  if (Array.isArray(projects) && projects.length === 0)\r\n    return <Navigate to={ANITA_URLS.projectsNone} />\r\n\r\n\r\n  if (!hasLoaded)\r\n    return <span></span>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"md:w-full bg-white border-b-2 rounded border-white\">\r\n        <div className=\"flex h-full border-t-2 border-prussian-blue-400 border-opacity-60 rounded justify-between\">\r\n          <div className=\"px-6 py-3\">\r\n            <h1 className=\"title-font text-md font-medium text-gray-900\">Projects on this device</h1>\r\n          </div>\r\n          <div className=\"my-2\">\r\n\r\n            <a data-tip data-for=\"importProject\"\r\n              href=\"#\"\r\n              onClick={() => new ProjectFileImporter().import()}\r\n              className=\"mx-2 my-2 text-white bg-prussian-blue-600 border-0 py-1 px-6 focus:outline-none hover:bg-prussian-blue-700 rounded font-bold text-sm\"\r\n            ><i className=\"bi bi-arrow-bar-down\"></i>\r\n            </a>\r\n            <ReactTooltip id=\"importProject\" effect=\"solid\">\r\n              <span>Import an existing project</span>\r\n            </ReactTooltip>\r\n\r\n\r\n            <Link data-tip data-for='createProject'\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"mx-2 my-2 text-white bg-prussian-blue-400 border-0 py-1 px-6 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            ><i className=\"bi bi-plus\"></i>\r\n            </Link>\r\n            <ReactTooltip id=\"createProject\" effect=\"solid\">\r\n              <span>Create a new project</span>\r\n            </ReactTooltip>\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"p-1 md:w-full\">\r\n        {projects.map((project, index) => (<ProjectCard key={project.id} project={project} />))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { AddEditSectionElement } from 'app/ui-react-components/project/add-edit-section-element.component';\r\nimport { ProjectDetails } from 'app/ui-react-components/project/project-details.component';\r\nimport { SectionElementDetails } from 'app/ui-react-components/project/section-element-details.component';\r\nimport { SectionElementsList } from 'app/ui-react-components/project/section-elements-list.component';\r\nimport { AddEditProject } from 'app/ui-react-components/projects/add-edit-project.component';\r\nimport { ProjectsNone } from 'app/ui-react-components/projects/no-projects.component';\r\nimport { ProjectsList } from 'app/ui-react-components/projects/projects-list.component';\r\nimport { Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nexport const AnitaRoutes = () => (\r\n  <Routes>\r\n    <Route path={ANITA_URLS.projectsList} element={<ProjectsList />} />\r\n    <Route path={ANITA_URLS.projectAdd} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectEdit} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectsNone} element={<ProjectsNone />} />\r\n    <Route path={ANITA_URLS.projectDetails} element={<ProjectDetails />} />\r\n\r\n    <Route path={ANITA_URLS.projectSectionElesList} element={<SectionElementsList />} />\r\n    <Route path={ANITA_URLS.projectSectionEleDetails} element={<SectionElementDetails />} />\r\n    <Route path={ANITA_URLS.projectSectionAddEle} element={<AddEditSectionElement />} />\r\n    <Route path={ANITA_URLS.projectSectionEditEle} element={<AddEditSectionElement />} />\r\n    <Route path=\"*\" element={<Navigate to={ANITA_URLS.projectsList} />}\r\n    />\r\n  </Routes>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { RESERVED_UDS_KEYS } from 'app/data/model/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst baseStyleOfSidebarLinks: string = \"block py-2.5 px-4 transition duration-200 border-l-2 hover:border-prussian-blue-700 hover:text-prussian-blue-500 text-sm font-semibold\";\r\n\r\nconst addActiveClassNameToBaseStyle = (currentPath: string, linkPath: string): string => {\r\n  if (currentPath === linkPath) {\r\n    return `${baseStyleOfSidebarLinks} border-prussian-blue-700`;\r\n  } else {\r\n    return `${baseStyleOfSidebarLinks} border-transparent`;\r\n  }\r\n}\r\n\r\nexport const nonProjectRoutes: Array<{ to: string; txt: string, icon: string }> = [\r\n  { to: ANITA_URLS.projectsList, txt: 'Projects', icon: 'bi-files' }\r\n];\r\n\r\nconst ProjectMenu = () => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const location = useLocation();\r\n\r\n\r\n  if (project === null)\r\n    return <span></span>\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n      <div className=\"block py-2.5 px-4\">\r\n        <p className=\"text-xs text-gray-600\">Current project:</p>\r\n        <p>{project[RESERVED_UDS_KEYS._settings][0].title}</p>\r\n      </div>\r\n      <div className=\"block py-2.5 px-4\">\r\n        <p className=\"text-xs text-gray-600\">Project sections:</p>\r\n      </div>\r\n      {project[RESERVED_UDS_KEYS._sections].map(section => {\r\n        const linkPath = urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: project[RESERVED_UDS_KEYS._settings][0].id }, { name: URL_PARAMS.sectionId, value: section.id }]);\r\n        return (<Link\r\n          key={section.id}\r\n          to={linkPath}\r\n          className={addActiveClassNameToBaseStyle(location.pathname, linkPath)}\r\n        ><i className=\"bi-chevron-compact-right\"></i><span className=\"ml-2\">{section.title}</span>\r\n        </Link>)\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport const SidebarMenu = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div>{\r\n      nonProjectRoutes.map(route => (<Link\r\n        key={route.to}\r\n        to={route.to}\r\n        className={addActiveClassNameToBaseStyle(location.pathname, route.to)}\r\n      ><i className={route.icon}></i><span className=\"ml-2\">{route.txt}</span>\r\n      </Link>)\r\n      )\r\n    }\r\n      < ProjectMenu />\r\n    </div>\r\n  );\r\n}","import { ReactNode } from 'react';\r\n\r\nexport const Content = (props: { children: ReactNode }) => (\r\n  <div className=\"flex-1 p-10 pt-5 overflow-auto\">\r\n    {props.children}\r\n  </div>\r\n);","import { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Header = () => {\r\n\r\n  const handleClickSidebar = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.toggleSidebar });\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white text-gray-700 flex h-14 shadow-md justify-between\">\r\n      <button className=\"mobile-menu-button p-4 focus:outline-none  md:hidden\" onClick={handleClickSidebar}>\r\n        <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div className=\"relative flex items-center lg:w-auto lg:static md:pl-5 -ml-7 md:ml-0\">\r\n        <Link to=\"/\" className=\"text-lg font-bold leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap uppercase\">\r\n          <img src={`${process.env.PUBLIC_URL}/assets/logo/logo_square.svg`} style={{ height: '30px', width: 'auto' }} alt=\"Anita\" />\r\n        </Link>\r\n        <Link to=\"/\" className=\"hidden md:inline-block mr-4 py-2 whitespace-no-wrap text-prussian-blue-400\">\r\n          <span className=\"text-md font-bold leading-relaxed uppercase\">Anita</span><sup style={{ fontVariant: 'small-caps' }}>Beta</sup>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"visible md:hidden\">&#160;</div>\r\n\r\n    </div>\r\n  )\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { appVersion } from 'app/version';\r\nimport { ReactNode } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const Sidebar = (props: { children: ReactNode }) => {\r\n\r\n  const toggledClass = useSelector((store: AnitaStore) => store.layout.sidebar)\r\n\r\n  return (\r\n    <div className=\"py-5\">\r\n      <div className={`${toggledClass} sidebar h-full bg-white shadow rounded-sm text-prussian-blue-500 w-64 space-y-6 py-7 px-2 absolute inset-y-0 left-0 transform md:relative md:translate-x-0 transition duration-200 ease-in-out`}>\r\n        <nav>\r\n          {props.children}\r\n        </nav>\r\n        <div className=\"absolute bottom-1 text-xs text-gray-400\">\r\n          <p className=\"inline-block mr-1\">v{appVersion}</p>|\r\n          <a className=\"ml-1\" href=\"https://github.com/anita-app/anita/issues\" target=\"_blank\" rel=\"noreferrer\">\r\n            <i className=\"bi-bug\" data-tip data-for=\"reportBug\"></i>\r\n            <ReactTooltip id=\"reportBug\" effect=\"solid\">\r\n              <span>Report a bug</span>\r\n            </ReactTooltip>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","/**\n * Auto generated file, do not edit.\n */\n\nexport const appVersion = '0.7.0';\n","import { AnitaRoutes } from 'app/anita-routes/anita-routes.component';\r\nimport { SidebarMenu } from 'app/ui-react-components/admin-layout/components/sidebar-menu.component';\r\nimport { Content } from 'app/ui-react-components/admin-layout/content.component';\r\nimport { Header } from 'app/ui-react-components/admin-layout/header.component';\r\nimport { Sidebar } from 'app/ui-react-components/admin-layout/sidebar.component';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nexport const AdminLayout = () => (\r\n  <Router>\r\n    <Header />\r\n    <div className=\"relative admin-container flex\">\r\n      <Sidebar>\r\n        <SidebarMenu />\r\n      </Sidebar>\r\n      <Content>\r\n        <AnitaRoutes />\r\n      </Content>\r\n    </div>\r\n  </Router>\r\n);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { store } from 'app/libs/redux/state.store';\nimport { Startupper } from 'app/libs/startupper/startupper.class';\nimport { AdminLayout } from 'app/ui-react-components/admin-layout/admin-layout.component';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nnew Startupper().init();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AdminLayout />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}