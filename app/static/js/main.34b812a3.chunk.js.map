{"version":3,"sources":["app/libs/redux/redux-actions.const.ts","app/libs/redux/reducers/form-element.reducer.ts","app/ui-react-components/shared-components/forms-automator/form-component-codes.enum.ts","app/libs/redux/reducers/form-eles-valid-state.reducer.ts","app/data/local-dbs/local-storage-systems.enum.ts","app/data/project-structure/reserved-fields.constant.ts","app/data/project-form-builder/options-builder.constant.ts","app/data/project-form-builder/project-info-builder.constant.ts","app/data/project-form-builder/project-editor-form-builder.const.ts","app/data/project-form-builder/section-fields-builder.constant.ts","app/data/project-form-builder/section-info-builder.constant.ts","app/data/project-structure/project-info.ts","app/data/system-local-db/sections/local-settings.const.ts","app/libs/id-creator/id-creator.class.ts","app/libs/redux/reducers/form-project.reducer.ts","app/libs/redux/reducers/layout.reducer.ts","app/libs/redux/reducers/sections-for-child-of-selector.reducer.ts","app/libs/redux/reducers.const.ts","app/libs/redux/reducers/project.reducer.ts","app/libs/redux/reducers/projects.reducer.ts","app/libs/redux/state.store.ts","app/data/local-dbs/db-instances.const.ts","app/data/system-local-db/sections/projects.const.ts","app/data/system-local-db/auds-system-sections.enum.ts","app/data/system-local-db/client-sections.enum.ts","app/data/system-local-db/sections/auds-sections.const.ts","app/data/system-local-db/sections/auds-settings.const.ts","app/libs/db-connector/db-builder/default-values.constant.ts","app/libs/logger/logger.class.ts","app/libs/db-connector/db-builder/sez-builder.class.ts","app/ui-react-components/editor-mode.enum.ts","app/anita-routes/anita-routes.constant.ts","app/libs/db-connector/db-builder/data-structure-builder.class.ts","app/libs/db-connector/db-connector.class.ts","app/data/system-local-db/data-structure-extender.class.ts","app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class.ts","app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class.ts","app/libs/db-connector/plugins/indexed-db/db-deletor/db-deletor.class.ts","app/libs/db-connector/plugins/indexed-db/exporter.constant.ts","app/libs/db-connector/plugins/indexed-db/db-insertor/db-insertor.class.ts","app/libs/db-connector/plugins/indexed-db/db-selector/db-selector.class.ts","app/libs/db-connector/plugins/indexed-db/db-updator/db-updator.class.ts","app/libs/projects-helpers/projects-handlers/projects-list-loader.class.ts","app/libs/startupper/startupper.class.ts","app/libs/db-connector/plugins/file-handles/helpers/fs-helper.ts","app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class.ts","app/libs/db-connector/plugins/file-handles/db-deletor/db-deletor.class.ts","app/libs/db-connector/crypter/options.constant.ts","app/libs/db-connector/crypter/string-crypter.function.ts","app/libs/db-connector/crypter/string-decrypter.function.ts","app/libs/db-connector/crypter/crypt-helper.class.ts","app/libs/db-connector/crypter/encrypter.class.ts","app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class.ts","app/libs/db-connector/plugins/file-handles/db-insertor/db-insertor.class.ts","app/libs/db-connector/crypter/decrypter.class.ts","app/libs/db-connector/plugins/file-handles/db-selector/db-selector.class.ts","app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function.ts","app/libs/db-connector/plugins/file-handles/db-store/dbstore.class.ts","app/libs/db-connector/plugins/file-handles/exporter.constant.ts","app/libs/db-connector/plugins/file-handles/db-updator/db-updator.class.ts","app/libs/db-connector/common-helpers/query-maker.class.ts","app/libs/db-connector/common-helpers/where-builder.class.ts","app/libs/db-connector/plugins/sqlite/helpers/execute-query-no-return.function.ts","app/libs/db-connector/plugins/sqlite/helpers/schema-exporter.function.ts","app/libs/db-connector/plugins/sqlite/db-deletor/db-deletor.class.ts","app/libs/db-connector/plugins/sqlite/db-insertor/db-insertor.class.ts","app/libs/db-connector/plugins/sqlite/helpers/execute-query-with-return.function.ts","app/libs/db-connector/plugins/sqlite/helpers/serializer.function.ts","app/libs/db-connector/plugins/sqlite/db-selector/db-selector.class.ts","app/libs/db-connector/plugins/sqlite/helpers/schema-creator.class.tsx","app/libs/db-connector/plugins/sqlite/db-store/dbstore.class.ts","app/libs/db-connector/plugins/sqlite/exporter.constant.ts","app/libs/db-connector/plugins/sqlite/db-updator/db-updator.class.ts","app/data/local-dbs/db-initializer.class.ts","app/libs/project-helpers/project-handlers/current-project-setter.class.ts","app/libs/project-helpers/project-handlers/project-loader.class.ts","app/libs/project-helpers/project-handlers/is-project-loaded.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class.ts","app/libs/tools/find-section-by-id.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/required-field.component.tsx","app/ui-react-components/shared-components/forms-automator/validators/validators-container.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function.ts","app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component.tsx","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function.ts","app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function.ts","app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component.tsx","app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const.ts","app/ui-react-components/shared-components/forms-automator/form-fields/options-maker-single-option.component.tsx","app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component.tsx","app/libs/tools/find-first-user-defined-field.function.ts","app/libs/tools/tools.ts","app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class.ts","app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class.ts","app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component.tsx","app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function.tsx","app/ui-react-components/shared-components/forms-automator/form-automator.component.tsx","app/ui-react-components/project/add-edit-components/form-element-manager.component.tsx","app/libs/project-helpers/section-elements-handlers/element-saver.class.ts","app/ui-react-components/project/add-edit-components/save-element.component.tsx","app/ui-react-components/shared-components/common-ui-eles/main-content-container.component.tsx","app/ui-react-components/shared-components/loader/loader.component.tsx","app/ui-react-components/project/add-edit-section-element.component.tsx","app/libs/project-helpers/txt-by-field-value.function.ts","app/libs/project-helpers/project-handlers/project-deletor.class.ts","app/ui-react-components/shared-components/modals/modal-body.component.tsx","app/ui-react-components/shared-components/modals/modal-content.component.tsx","app/ui-react-components/shared-components/modals/modal-footer.component.tsx","app/ui-react-components/shared-components/modals/modal-header.component.tsx","app/ui-react-components/shared-components/modals/modal.component.tsx","app/ui-react-components/shared-components/buttons/delete-project.component.tsx","app/anita-routes/url-param-fillers.function.ts","app/ui-react-components/shared-components/buttons/edit-project-button.component.tsx","app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component.tsx","app/ui-react-components/project/project-details.component.tsx","app/ui-react-components/project/details-components/delete-section-element-button.component.tsx","app/libs/project-helpers/get-parent-info-for-details-view.class.ts","app/ui-react-components/project/details-components/parents-link-shower.component.tsx","app/ui-react-components/project/values-renderers/basic-text.component.tsx","app/ui-react-components/project/values-renderers/check-box-as-check.component.tsx","app/ui-react-components/project/values-renderers/formatted-date-time.component.tsx","app/ui-react-components/project/values-renderers/formatted-date.component.tsx","app/ui-react-components/project/values-renderers/text-from-options-by-value.component.tsx","app/ui-react-components/project/values-renderers/custom-render-picker.component.tsx","app/ui-react-components/shared-components/buttons/add-edit-element-button.component.tsx","app/ui-react-components/project/section-element-details.component.tsx","app/ui-react-components/project/list-components/td-with-link-to-details.component.tsx","app/ui-react-components/project/list-components/tableList.component.tsx","app/ui-react-components/project/no-section-data.component.tsx","app/ui-react-components/project/section-elements-list.component.tsx","app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class.ts","app/libs/project-helpers/project-handlers/project-saver.class.ts","app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/section-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/form-project-manager.component.tsx","app/ui-react-components/projects/add-edit-project-components/project-editor-mode-toggle.component.tsx","app/ui-react-components/projects/add-edit-project.component.tsx","app/libs/projects-helpers/project-importers/project-data-importer.class.ts","app/libs/projects-helpers/project-importers/project-file-importer.class.ts","app/ui-react-components/projects/project-importer-components/import-project-button.component.tsx","app/ui-react-components/projects/no-projects.component.tsx","app/ui-react-components/projects/project-card-components/project-loaded-footer.component.tsx","app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component.tsx","app/ui-react-components/projects/project-card.component.tsx","app/ui-react-components/projects/projects-list.component.tsx","app/anita-routes/anita-routes.component.tsx","app/ui-react-components/admin-layout/components/project-picker.component.tsx","app/ui-react-components/hooks/click-outside.hook.tsx","app/ui-react-components/admin-layout/components/sidebar-menu.component.tsx","app/ui-react-components/admin-layout/content.component.tsx","app/ui-react-components/admin-layout/header.component.tsx","app/ui-react-components/admin-layout/sidebar.component.tsx","app/version.ts","app/ui-react-components/admin-layout/admin-layout.component.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["REDUX_ACTIONS","FORM_COMPONENTS_CODES","formElementState","element","initialState","LOCAL_STORAGE_SYSTEMS","RESERVED_FIELDS","SELECTABLE_FORM_ELES","value","basicInput","label","basicTextarea","basicCheckbox","basicSelect","basicRadio","datePicker","dateTimePicker","commonFieldsAdvanced","componentCode","fieldName","type","required","width","commonFieldsBasic","optionsBuilderForAddingAdvanced","optionsBuilderForAddingBasic","hiddenInput","optionsBuilderForEditingAdvanced","disabled","optionsBuilderForEditingBasic","PROJECT_EDITOR_MODE","hintFsNotSupported","commonFieldsForProjectInfo","id","createdAt","availableSystems","fileSystem","window","hint","IndexedDB","SQLite","projectInfoNewItem","options","projectInfoForEditing","commonAddAndEditFields","childOfSelectorForSection","optionsMaker","prerequisites","sectionElesNewItemAdvanced","sectionElesNewItemBasic","sectionElesForEditingAdvanced","sectionElesForEditingBasic","sectionDetailsFormFieldsModel","RESERVED_AUDS_KEYS","PROJECT_EDITOR_FORM_BUILDER","advanced","projectInfo","newItem","existingItem","sectionInfo","sectionEles","optionEles","basic","LOCAL_SETTINGS_KEYS","IdCreator","name","aliasDate","Date","toUTCString","toISOString","randNumber","Math","floor","random","CryptoES","SHA256","toString","original","_settings","_sections","project","mode","sidebar","sectionsForChildOfSelectorState","REDUCERS","state","action","setCurrentProject","payload","resetCurrentProject","projects","addProjectToList","concat","setProjectList","sectionsForChildOfSelector","addSectionForChildOfSelector","editableState","length","index","findIndex","sectionDeclaration","position","push","formElesValidState","setValidStateForEle","formEleId","valid","unsetValidStateForEle","copyState","Object","keys","forEach","key","startsWith","formElement","updateFormElement","formProject","setProjectEditorMode","setFormProject","cloneDeep","updateFormProjectSettings","updateFormProjectAddSection","title","formModel","updateFormProjectUpdateSection","copy3","section","updateFormProjectUpdateFormModelOfSection","copy4","indexSection","indexFormElement","updateFormProjectAddFieldToSection","copy5","updateFormProjectRemoveFieldFromSection","copy6","sectionIndex","splice","fieldIndex","updateFormProjectRemoveSection","copy7","updateFormProjectUpdateFormModelAddOption","copy8","defaultValue","updateFormProjectUpdateFormModelDeleteOption","copy9","indexOptions","updateFormProjectUpdateFormModelOptionValue","copy10","layout","toggleSidebar","newState","combinedReducers","combineReducers","store","createStore","dbInstances","system","undefined","localSettings","fields","AUDS_SYSTEM_SECTIONS","CLIENT_SECTIONS","previousVersions","CLIENT_SEZ_DEFINITIONS","auds_sections","pk","jsonFields","auds_settings","AUDS_SYSTEM_SECTIONS_DEFINITIONS","DEFAULT_PK","DEFAULT_PARENTS_IDENTIFIER","parentsInfo","DEFAULT_OWNER_IDENTIFIER","createdBy","Logger","desc","arrMsg","JSON","stringify","doLog","list","isEmptyList","stringList","Array","isArray","listFromArray","listFromObject","substring","line","spacesForListeles","formatValueForList","txt","extra","isPrimitiveValue","data","methodName","date","debug","console","join","EDITOR_MODE","URL_PARAMS","SezBuilder","allSez","indexes","orderBy","childOf","parentsIdentifiers","ownerIdentifier","this","addPkToFields","addPkToIndexes","addSpecialFieldsToFields","setOwnerIdentifier","checkOrderByExists","checkRelations","checkParentIdentifier","buildSez","includes","unshift","scope","loopAllRelations","sezName","checkRelationsExist","getSezByName","indexInScope","indexOf","error","foundIndex","counter","addChildOf","DataStructureBuilder","ds","sez","sezParams","make","addToTempDs","DbConnector","executers","addSystemSections","dbStore","DS","assign","initDB","Error","insertor","args","selector","updator","deletor","DataStructureExtender","sections","datastructure","buildSectionDefinition","sezDefinition","buildAndAddAllSections","values","field","addToTempTs","DbStore","db","deletedSections","indexedDbName","setDb","handlePreviousVersion","buildDb","makeDexieInfoForUpgrade","newSections","map","oldSections","sectionsToDelete","filter","sectionsToAdd","extend","close","log","open","delete","dexieInfoForUpgrade","Dexie","versionSezs","version","tables","stores","QueryHelper","arraysWhere","arraysWhereLen","dexieWhere","whereArr","objFieldsNValues","arrSearch","includeLower","includeUpper","lowerBound","upperBound","operator","item","where","logic","result","QueryMaker","dbConnector","table","collection","dexieFilters","arrWhere","new_where","order","complexSelect","methodToExecute","handleDebug","objSearch","get","res","eleToReturn","fieldNValues","buildArrayFildsNValues","toArray","betweenSearchParams","buildBetweenSearchParams","between","buildFilter4Dexie","all_records","toCollection","chainFilters","and","sortBy","put","update","count","promises","clear","Promise","all","typeToShow","toShow","raw","DbDeletor","aliasElementToDelete","addWhere","clearTable","INDEXEDDB_PLUGIN","insertMany","insertOne","bulkPut","insert","catch","err","qe","setUpSelect","setQuery","executeSelect","setOrder","setOrderBy","select","ProjectsListLoader","projectList","loadFromLocalDB","dispatchProjectList","callSelector","multiple","dispatch","Startupper","systemDbName","info","initSystemIndexedDb","setLoggerDebug","loadProjectList","init","React","createElement","isReactDev","load","ANITA_URLS","projectsNone","projectsList","projectAdd","add","projectEdit","edit","projectId","projectDetails","projectSectionElesList","sectionId","projectSectionAddEle","projectSectionEditEle","elementId","projectSectionEleDetails","getDirectoryHandle","showDirectoryPicker","readFileHandleAsText","fileHandle","a","getFile","file","text","readDirFileAsUint8Array","dirHandle","fileName","getFileHandle","create","arrayBuffer","Uint8Array","getNewFileHandle","description","accept","opts","types","showSaveFilePicker","contents","createWritable","writable","write","verifyPermission","withWrite","queryPermission","requestPermission","ProjectFileHandleSaver","setData","saveDataToDisk","writeFile","indexElement","ele","save","securePassEncrypter","stringCrypter","keyToUse","AES","encrypt","stringDecrypter","decrypt","CryptHelper","owner","undecryptedKey","keyIdentifier","setOwner","setUndecryptedKey","makeKeyIdentifier","userKeys","decryptUserKey","returnUserUnencryptedKey","encryptionKeys","keyToEncrypt","Encrypter","getUserKey","logNoKeyError","ElementAdderToCollection","elements","setSectionStore","processElement","checkIfElementInStoreAndSetIndex","addToStore","check","DbInsertor","encrypted","handleEncryption","do","Decrypter","DbSelector","results","doSelect","find","filterKeys","eleToCheck","handleDecryption","i","fileHandleChecker","dirHandleChecker","initializeExistingProject","doReadFile","parseFileContents","makedDS","parse","FILE_HANDLES_PLUGIN","whereArgs","obj","squel","autoQuoteTableNames","autoQuoteFieldNames","from","whereArg","prop","fieldsRemoverIfThereIsNoColumn","into","setFields","setFieldsRows","warn","WhereBuilder","addWhereFromObj","params","executeQueryNoReturn","query","run","schemaExporter","binaryArray","export","keepExistingData","handleJsonFields","handleJsonField","jsonField","executeQueryWithReturn","exec","serializer","columns","row","objData","cell","parseJsonFields","SchemaCreator","sql","handleTable","createFields","onProjectCreation","makeDSFromDB","loadDB","createSchema","initSqlJs","locateFile","process","SQL","Database","SQLITE_PLUGIN","buildQuery","copyEle","DbInitializer","projectSections","localStorage","doFileSystem","doSQLite","doIndexedDb","dsExpander","CurrentProjectSetter","projectSettings","sectionsDefinitions","ProjectLoader","setProject","setProjectInfoFromIndexedDB","createNewInstanceOfDbConnectorForrProject","loadProjectSettings","loadProjectSections","callCurrentProjectSetter","single","set","isProjectLoaded","loadProject","ParentInfoFormEleBuilder","parentInfoFormModel","setOptions","setParentSelector","sectionName","parentsSelector","findSectionById","toFindId","FormEleContainer","children","className","FormElementLabel","RequiredField","formEle","fieldId","touched","useEffect","ValidatorsContainer","props","validators","BasicCheckbox","handleChange","useState","setTouched","useRef","uniqueId","current","validStore","useSelector","isInValid","some","checked","Reflect","has","onChange","event","target","onBlur","calcWidth","FORM_ELEMENTS_CSS_CLASSES","FORM_ELEMENTS_CSS_CLASSES_ERR","BasicInput","placeholder","BasicRadio","option","indexOption","data-tip","data-for","effect","data-multiline","BasicSelect","BasicTextarea","parentInfoObjToString","parentInfoObj","parentInfo","parentInfoStringToObjForOptionsGroup","selectOptions","group","opt","parentInfoStringToObj","ChildOfSelectorForSection","currentEditedProjectSections","setSelectOptions","isMounted","selectableSections","sectionDec","buildOptions","isMulti","newValue","DatePicker","dateFormat","DateTimePicker","HiddenInput","SUCCESS_BTN_OUTLINE","DANGER_BTN_OUTLINE","OptionsMakerSingleOption","handleOptionsChange","handleClickDeleteOption","optionElement","projectEditorMode","formModelToUse","useMemo","getCanEdit","bind","onClick","OptionsMaker","handleClickAddOption","findFirstUserDefinedField","sectionFormModel","firstUserDefinedFieldInfo","cleanString","source","r","toLowerCase","non_asciis","ae","c","e","n","o","oe","u","y","replace","RegExp","asyncForEach","array","callback","totalLength","OptionsForParentsSelector","optionsGroups","createGroupOption","sectionLabel","indexFirstUserFiield","ParentsSelector","getSelectOptions","PrerequisitesChecker","objValues","isIntegrated","loopPrerequisites","checkPrerequisites","prereq","prereqValue","setIsIntegrated","FieldSelector","integrates","formElesSwitcher","FormAutomator","FormElementManager","build","ElementSaver","sectionModelInDS","setSectionModel","checkAndSetPk","setcreatedAt","deleteEmptyProps","callInsertor","autoInsert","setupdatedAtValueIfInEditMode","callUpdator","autoUpdate","updatedAt","SaveElement","validObj","navigate","useNavigate","handleClick","MainContentContainer","headerText","Loader","xmlns","fill","viewBox","cx","cy","stroke","strokeWidth","d","AddEditSectionElement","useParams","setElement","canProceed","fetchElement","to","txtByFieldValue","optionToReturn","ProjectDeletor","callOnProjectDeleted","doDelete","reloadProjectList","callDeletor","autoDelete","onProjectDeleted","ModalBody","ModalContent","icon","ModalFooter","ModalHeader","bgClasses","confirm","normal","hover","focus","alert","Modal","actionText","handleClickAction","closeFn","animationClass","disableAction","aria-labelledby","role","aria-modal","aria-hidden","DeleteProjectButton","isModalOpen","setIsModalOpen","setAnimationClass","currentProject","handleClickModal","setTimeout","urlParamFiller","url","paramsToFill","EditButton","CardFooterItemsEnd","LoadedProject","ProjectDetails","style","minHeight","DeleteSectionElementButton","GetParentInfoForDetailsView","listOfParents","parentInfoForDetailsView","sectionIdElementId","arrInfo","split","ParentsLinkShower","parents","setParents","getParents","parent","BasicText","CheckBoxAsCheck","FormattedDateTime","FormattedDate","TextFromOptionsByValue","customRenderPicker","AddEditElementButton","urlParamsToFill","SectionElementDetails","fetchData","formModels","ElementValuesViewer","ValueWithLabel","TdWithLinkToDetails","tdProps","navigation","TableList","sectionData","colsToShoww","Header","accessor","Cell","useSectionInfo","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","getRowProps","cells","getCellProps","NoSectionData","sectionTitle","SectionElementsList","setSectionData","getSectionData","SaveProjectSettingsInIndexedDB","localSettingAdditionalKeys","copyOfProjectSettings","setProjectSettingsCloneWithAdditionalKeys","doStoreProjectSettings","ProjectSaver","projectDataToSave","setupdatedAt","initDbInstance","saveSettings","saveSections","postSaveActions","clearSection","SectionFormModelManager","alreadyExists","getAlreadyExists","identifierAutoVal","SectionManager","customFields","handleClickDeleteField","FormProjectManager","handleClickSave","projectFormModel","ProjectEditorModeToggle","htmlFor","AddEditProject","fetchEProject","ProjectDataImporter","projectData","initializeDb","setLocalProjectSettings","dispatchProject","saveDataToDb","postProjectCreation","ProjectFileImporter","fileContents","askForFileHandle","importFromFile","showOpenFilePicker","fileHandles","fileDialog","files","ImportProjectButton","btnType","setProjectData","projectFileHandle","setProjectFileHandle","setProjectSettings","import","handleClickImport","ProjectsNone","ProjectLoadedFooter","ProjectNotLoadedFooter","ProjectCard","projectState","ProjectsList","hasLoaded","setHasLoaded","projectsLenght","loadProjectsList","AnitaRoutes","path","ProjectPicker","parentElement","dropdownOpen","setDropdownOpen","dropDownRef","onClickOutside","contains","document","addEventListener","removeEventListener","fn","goToDetails","ref","x-data","projectFromList","baseStyleOfSidebarLinks","addActiveClassNameToBaseStyle","currentPath","linkPath","nonProjectRoutes","ProjectMenu","location","useLocation","pathname","SidebarMenu","route","Content","sidebarHideClass","handleClickSidebar","strokeLinecap","strokeLinejoin","src","height","alt","fontVariant","Sidebar","toggledClass","href","rel","AdminLayout","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","StrictMode","getElementById","URL","origin","fetch","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.34b812a3.chunk.js","sourcesContent":["/**\r\n * Supported reducer actions\r\n */\r\nexport enum REDUX_ACTIONS {\r\n  // LAYOUT\r\n  toggleSidebar = 1,\r\n  // PROJECTS\r\n  addProjectToList,\r\n  setProjectList,\r\n  // PROJECT\r\n  setCurrentProject,\r\n  resetCurrentProject,\r\n  // SECTIONS_FOR_CHILD_OF_SELECTOR\r\n  addSectionForChildOfSelector,\r\n  resetSectionForChildOfSelector,\r\n  // FORMS\r\n  setValidStateForEle,\r\n  unsetValidStateForEle,\r\n  updateFormElement,\r\n  setFormProject,\r\n  setProjectEditorMode,\r\n  updateFormProjectSettings,\r\n  updateFormProjectAddSection,\r\n  updateFormProjectUpdateSection,\r\n  updateFormProjectUpdateFormModelOfSection,\r\n  updateFormProjectRemoveSection,\r\n  updateFormProjectAddFieldToSection,\r\n  updateFormProjectRemoveFieldFromSection,\r\n  updateFormProjectUpdateFormModelAddOption,\r\n  updateFormProjectUpdateFormModelDeleteOption,\r\n  updateFormProjectUpdateFormModelOptionValue\r\n};\r\n","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElementState {\r\n  element: SectionElement | undefined | null;\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormElementState = {\r\n  element: null\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formElementReducer = (state: IFormElementState = formElementState, action: Action<REDUX_ACTIONS>): IFormElementState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.updateFormElement:\r\n      return {\r\n        element: { ...action.payload }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\n/**\r\n * Values to identify the form component to dynamically load.\r\n *\r\n * @remarks\r\n * These values are stored in each `Section` in `AnitaUniversalDataStorage['sections']` so their number __must__ not be changed. Element can be added freely.\r\n */\r\nexport enum FORM_COMPONENTS_CODES {\r\n  basicInput = 1,\r\n  basicTextarea = 2,\r\n  basicCheckbox = 3,\r\n  basicSelect = 4,\r\n  basicRadio = 5,\r\n  hiddenInput = 6,\r\n  optionsMaker = 7,\r\n  datePicker = 8,\r\n  dateTimePicker = 9,\r\n  childOfSelectorForSection = 10,\r\n  parentsSelector = 11\r\n}\r\n\r\n\r\n/**\r\n * Defines the value of the Select element for picking the type of Component for a field.\r\n */\r\nexport const SELECTABLE_FORM_ELES: Array<OptionKeysModel> = [\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicInput,\r\n    label: 'Short text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicTextarea,\r\n    label: 'Long text'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    label: 'Check box'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicSelect,\r\n    label: 'Drop-down list'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.basicRadio,\r\n    label: 'Alternative choice'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.datePicker,\r\n    label: 'Date picker'\r\n  },\r\n  {\r\n    value: FORM_COMPONENTS_CODES.dateTimePicker,\r\n    label: 'Date & time picker'\r\n  }\r\n];\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface IFormElesValidState {\r\n  [formEleUniqueId: string]: boolean;\r\n}\r\n\r\n/**\r\n * The initial state of the form-eles-valid-state reducer\r\n */\r\nconst initialState: IFormElesValidState = {};\r\n\r\n/**\r\n * The reducer function that sets the valid state of the form elements\r\n */\r\nexport const formElesValidStateReducer = (state: IFormElesValidState = initialState, action: Action<REDUX_ACTIONS>): IFormElesValidState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setValidStateForEle:\r\n      return { ...state, [action.payload.formEleId]: action.payload.valid };\r\n    case REDUX_ACTIONS.unsetValidStateForEle:\r\n      const copyState = { ...state };\r\n      Object.keys(copyState).forEach(key => {\r\n        if (key.startsWith(action.payload))\r\n          delete copyState[key];\r\n      });\r\n      return copyState;\r\n    default:\r\n      return state;\r\n  }\r\n}","export enum LOCAL_STORAGE_SYSTEMS {\r\n  fileSystem = 1,\r\n  IndexedDB = 2,\r\n  SQLite = 3,\r\n}","/**\r\n * Defines the fields name that are reserved for the functioning of Anita.\r\n * These fields names cannot be assigned as the value of the `fieldName` of sections' fields.\r\n */\r\nexport enum RESERVED_FIELDS {\r\n  id = 'id',\r\n  createdAt = 'createdAt',\r\n  parentsInfo = 'parentsInfo',\r\n  updatedAt = 'updatedAt',\r\n  createdBy = 'createdBy'\r\n}\r\n","import { FormFieldsModel, OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\nconst commonFieldsAdvanced: FormFieldsModel<OptionKeysModel> = {\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'label',\r\n  type: 'text',\r\n  label: 'Label',\r\n  required: true,\r\n  width: \"8\"\r\n};\r\n\r\nconst commonFieldsBasic: FormFieldsModel<OptionKeysModel> = {\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'label',\r\n  type: 'text',\r\n  label: 'Label',\r\n  required: true,\r\n  width: \"11\"\r\n};\r\n\r\n/**\r\n * Defines the Form model to create the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For adding options only, some properties can't be changed after the filed has been created. Existing items must use `optionsBuilderForEditingAdvanced` instead.\r\n */\r\nexport const optionsBuilderForAddingAdvanced: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFieldsAdvanced\r\n];\r\n\r\nexport const optionsBuilderForAddingBasic: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'value'\r\n  },\r\n  commonFieldsBasic\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the options of a `select` or `radio` element.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `optionsBuilderForAddingAdvanced` instead.\r\n */\r\nexport const optionsBuilderForEditingAdvanced: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'value',\r\n    type: 'text',\r\n    label: 'Value',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  commonFieldsAdvanced\r\n\r\n];\r\nexport const optionsBuilderForEditingBasic: Array<FormFieldsModel<OptionKeysModel>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'value'\r\n  },\r\n  commonFieldsBasic\r\n\r\n];\r\n","import { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport { ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { FormFieldsModel, OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\n\r\nconst hintFileSystem = 'The Project is saved in a file on your computer in JSON. Data is updated automatically every time you make any change.\\nYou can chose the name and the location of the file when you click \"Save\" at the bottom of this form.';\r\nconst hintFsNotSupported = 'Not supported in this browser.\\nAvailable only on the Desktop version of Chrome, Edge and Opera.';\r\nconst indexedDB = 'The Project is saved on your computer in the IndexedDB database of your Browser.\\nYou can export data in a JSON file at any time.';\r\nconst sqLite = 'The Project is saved on your computer in a SQLite database.\\nThe database is stored in a file in your File System.';\r\n\r\nconst commonFieldsForProjectInfo: Array<FormFieldsModel<ProjectSettings>> = [{\r\n  componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n  fieldName: RESERVED_FIELDS.id\r\n},\r\n{\r\n  componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n  fieldName: RESERVED_FIELDS.createdAt\r\n},\r\n{\r\n  componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n  fieldName: 'title',\r\n  type: 'text',\r\n  value: '',\r\n  label: 'Project',\r\n  required: true\r\n},\r\n{\r\n  componentCode: FORM_COMPONENTS_CODES.basicTextarea,\r\n  fieldName: 'description',\r\n  value: '',\r\n  label: 'Description',\r\n  required: true\r\n}];\r\n\r\nexport const availableSystems: Array<OptionKeysModel> = [\r\n  {\r\n    label: 'File system',\r\n    value: LOCAL_STORAGE_SYSTEMS.fileSystem,\r\n    disabled: typeof window['showOpenFilePicker'] === 'undefined',\r\n    hint: typeof window['showOpenFilePicker'] === 'function' ? hintFileSystem : hintFsNotSupported\r\n  },\r\n  {\r\n    label: 'Local database (IndexedDB)',\r\n    value: LOCAL_STORAGE_SYSTEMS.IndexedDB,\r\n    hint: indexedDB\r\n  },\r\n  {\r\n    label: 'Local database (SQLite)',\r\n    value: LOCAL_STORAGE_SYSTEMS.SQLite,\r\n    disabled: typeof window['showOpenFilePicker'] === 'undefined',\r\n    hint: typeof window['showOpenFilePicker'] === 'function' ? sqLite : hintFsNotSupported\r\n  }\r\n]\r\n\r\n/**\r\n * Defines the Form model to set the field properties of `ProjectSettings`.\r\n * Empty project template used when creating new projects.\r\n */\r\nexport const projectInfoNewItem: Array<FormFieldsModel<ProjectSettings>> = [\r\n  ...commonFieldsForProjectInfo,\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicRadio,\r\n    fieldName: 'localStorage',\r\n    value: LOCAL_STORAGE_SYSTEMS.IndexedDB,\r\n    label: 'Local storage',\r\n    required: true,\r\n    options: availableSystems\r\n  }\r\n];\r\n\r\nexport const projectInfoForEditing: Array<FormFieldsModel<ProjectSettings>> = [\r\n  ...commonFieldsForProjectInfo,\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicRadio,\r\n    fieldName: 'localStorage',\r\n    value: LOCAL_STORAGE_SYSTEMS.IndexedDB,\r\n    label: 'Local storage',\r\n    required: true,\r\n    disabled: true,\r\n    options: availableSystems\r\n  }\r\n];\r\n","import {\r\n  optionsBuilderForAddingAdvanced,\r\n  optionsBuilderForAddingBasic,\r\n  optionsBuilderForEditingAdvanced,\r\n  optionsBuilderForEditingBasic\r\n  } from 'app/data/project-form-builder/options-builder.constant';\r\nimport { projectInfoForEditing, projectInfoNewItem } from 'app/data/project-form-builder/project-info-builder.constant';\r\nimport {\r\n  sectionElesForEditingAdvanced,\r\n  sectionElesForEditingBasic,\r\n  sectionElesNewItemAdvanced,\r\n  sectionElesNewItemBasic\r\n  } from 'app/data/project-form-builder/section-fields-builder.constant';\r\nimport { sectionDetailsFormFieldsModel } from 'app/data/project-form-builder/section-info-builder.constant';\r\n\r\nexport enum PROJECT_EDITOR_MODE {\r\n  advanced = 1,\r\n  basic\r\n};\r\n\r\nexport const PROJECT_EDITOR_FORM_BUILDER = {\r\n  [PROJECT_EDITOR_MODE.advanced]: {\r\n    projectInfo: {\r\n      newItem: projectInfoNewItem,\r\n      existingItem: projectInfoForEditing\r\n    },\r\n    sectionInfo: sectionDetailsFormFieldsModel,\r\n    sectionEles: {\r\n      newItem: sectionElesNewItemAdvanced,\r\n      existingItem: sectionElesForEditingAdvanced\r\n    },\r\n    optionEles: {\r\n      newItem: optionsBuilderForAddingAdvanced,\r\n      existingItem: optionsBuilderForEditingAdvanced\r\n    }\r\n  },\r\n  [PROJECT_EDITOR_MODE.basic]: {\r\n    projectInfo: {\r\n      newItem: projectInfoNewItem,\r\n      existingItem: projectInfoForEditing\r\n    },\r\n    sectionInfo: sectionDetailsFormFieldsModel,\r\n    sectionEles: {\r\n      newItem: sectionElesNewItemBasic,\r\n      existingItem: sectionElesForEditingBasic\r\n    },\r\n    optionEles: {\r\n      newItem: optionsBuilderForAddingBasic,\r\n      existingItem: optionsBuilderForEditingBasic\r\n    }\r\n  }\r\n};\r\n","import { SectionCustomFieldProperties, SectionDetailsDeclaration } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES, SELECTABLE_FORM_ELES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\nexport const sectionDetailsFormFieldsModel: Array<FormFieldsModel<SectionDetailsDeclaration>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    label: 'Section name',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.childOfSelectorForSection,\r\n    fieldName: 'childOf',\r\n    label: 'Parent sections:',\r\n    options: []\r\n  }\r\n];\r\n\r\n/**\r\n * Defines common fields that are used both when creating and editing fields of a `Section`.\r\n */\r\nconst commonAddAndEditFields: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.optionsMaker,\r\n    fieldName: 'options',\r\n    type: 'text',\r\n    label: 'Possible values',\r\n    prerequisites: [{ componentCode: [FORM_COMPONENTS_CODES.basicSelect, FORM_COMPONENTS_CODES.basicRadio] }],\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicCheckbox,\r\n    fieldName: 'required',\r\n    value: false,\r\n    label: 'Required'\r\n  }\r\n];\r\n\r\n/**\r\n * Defines the Form model to set the field properties of a `Section`.\r\n * All the values specified in each field of `sectionElesNewItemAdvanced` are necessary for creating each field.\r\n *\r\n * @remarks\r\n * For new fields only. Existing items must use `sectionElesForEditingAdvanced` as some properties can't be changed after the filed has been created.\r\n */\r\nexport const sectionElesNewItemAdvanced: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\nexport const sectionElesNewItemBasic: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"8\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"4\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'fieldName'\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\n/**\r\n * Defines the Form model to edit the properties of an existing field of a `Section`.\r\n *\r\n * @remarks\r\n * For existing fields only, some properties can't be changed after the filed has been created. New items must use `sectionElesNewItemAdvanced` instead.\r\n */\r\nexport const sectionElesForEditingAdvanced: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"7\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"3\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'fieldName',\r\n    type: 'text',\r\n    label: 'Identifier',\r\n    disabled: true,\r\n    required: true,\r\n    width: \"2\"\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n\r\nexport const sectionElesForEditingBasic: Array<FormFieldsModel<SectionCustomFieldProperties>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'label',\r\n    type: 'text',\r\n    label: 'Field label',\r\n    required: true,\r\n    width: \"8\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicSelect,\r\n    fieldName: 'componentCode',\r\n    options: SELECTABLE_FORM_ELES,\r\n    value: 1,\r\n    label: 'Data type',\r\n    required: true,\r\n    width: \"4\"\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: 'fieldName'\r\n  },\r\n  ...commonAddAndEditFields\r\n];\r\n","import { SectionDetailsDeclaration } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\nexport const sectionDetailsFormFieldsModel: Array<FormFieldsModel<SectionDetailsDeclaration>> = [\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.hiddenInput,\r\n    fieldName: RESERVED_FIELDS.id\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.basicInput,\r\n    fieldName: 'title',\r\n    type: 'text',\r\n    label: 'Section name',\r\n    required: true\r\n  },\r\n  {\r\n    componentCode: FORM_COMPONENTS_CODES.childOfSelectorForSection,\r\n    fieldName: 'childOf',\r\n    label: 'Parent sections:',\r\n    options: []\r\n  }\r\n];\r\n","import { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { FormFieldsModel, OptionKeysModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\n/**\r\n * Reserved keys are needed to store system required properties.\r\n *\r\n * @remarks\r\n * Users can still pick any of these as section names as sections are stored using their system-generated `id` as key.\r\n */\r\nexport enum RESERVED_AUDS_KEYS {\r\n  _settings = '_settings',\r\n  _sections = '_sections'\r\n}\r\n\r\n/**\r\n * Data structure of Anita, composed of both SystemData and UserData.\r\n */\r\nexport type AnitaUniversalDataStorage = SystemData & UserData;\r\n\r\n/**\r\n * Store for system required properties. Includes general settings and Sections declarations. The reserved keys define system required properties.\r\n */\r\nexport type SystemData = {\r\n  [RESERVED_AUDS_KEYS._settings]: Array<ProjectSettings>;\r\n  [RESERVED_AUDS_KEYS._sections]: Array<Section>;\r\n};\r\n\r\n/**\r\n * Sections' data, stored in a Object, where the key is the section `id` and the value is a `Array<SectionElement>`.\r\n */\r\nexport type UserData = {\r\n  [sectionId: string]: Array<SectionElement>;\r\n};\r\n\r\n/**\r\n * Defines the structure of the general information on a project.\r\n */\r\nexport interface ProjectSettings {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  createdAt: string;\r\n  localStorage: LOCAL_STORAGE_SYSTEMS;\r\n  updatedAt?: string;\r\n  encrypted?: boolean;\r\n}\r\n\r\nexport interface AdditionalInfoForLocalStorage {\r\n  fileHandle?: FileSystemFileHandle;\r\n  dexieInfoForUpgrade?: {\r\n    previousVersions: Array<Array<string>>;\r\n    DS: AbstractModel;\r\n  }\r\n}\r\n\r\n/**\r\n * Info on Projects saved locally to know what project are on the device.\r\n * \r\n * @property [fileHandle] - The file handle of the project file (only if the project is saved on the file system)\r\n * @property [sections] - The sections of the project to load the IndexedDB database with Dexie\r\n */\r\nexport interface LocalProjectSettings extends ProjectSettings, AdditionalInfoForLocalStorage {\r\n}\r\n\r\n/**\r\n * Defines the properties of user defined fields of a `Section`\r\n *\r\n * @remarks\r\n * These fields are for the object to be stored in `sections.formModel[]` of the `AnitaUniversalDataStorage` store.\r\n */\r\nexport interface SectionCustomFieldProperties {\r\n  componentCode: FORM_COMPONENTS_CODES;\r\n  fieldName: string;\r\n  label?: string;\r\n  options?: Array<OptionKeysModel>;\r\n  required?: boolean;\r\n  externalLabel?: boolean;\r\n  value?: any;\r\n  width?: number;\r\n  [RESERVED_FIELDS.id]?: never;\r\n  [RESERVED_FIELDS.createdAt]?: never;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum properties of a `Section` of a Project.\r\n */\r\nexport interface SectionDetailsDeclaration {\r\n  id: string;\r\n  title: string;\r\n  childOf?: Array<string>;\r\n  [RESERVED_FIELDS.createdAt]?: never;\r\n}\r\n\r\n/**\r\n * Defines the full properties of a Section.\r\n */\r\nexport interface Section extends SectionDetailsDeclaration {\r\n  formModel: Array<FormFieldsModel<SupportedFormsTypes>>;\r\n}\r\n\r\n/**\r\n * Defines the properties of each parent to which a element is connected.\r\n */\r\nexport interface ParentInfoForDetailsView {\r\n  txt: string;\r\n  sectionId: string;\r\n  element: SectionElement;\r\n}\r\n\r\n/**\r\n * Defines the bare minimum fields of an `Element` of a `Section`.\r\n */\r\nexport interface SectionElement {\r\n  [RESERVED_FIELDS.id]?: string;\r\n  [RESERVED_FIELDS.createdAt]?: string;\r\n  [RESERVED_FIELDS.createdBy]?: string;\r\n  [RESERVED_FIELDS.parentsInfo]?: Array<string>;\r\n  [RESERVED_FIELDS.updatedAt]?: string;\r\n  [key: string]: any;\r\n}\r\n","import { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table localSettings and its fields for the `indexedDb` plugin of `db-connector`\r\n */\r\nexport const localSettings: SectionDefinition<LocalSettingsData<LOCAL_SETTINGS_KEYS>> = {\r\n  name: 'localSettings',\r\n  fields: [\r\n    'data'\r\n  ]\r\n};\r\n\r\n/**\r\n * Constant to uniquely identify values of local settings.\r\n * As of now there are no settings yet to save, so we keep `testData`.\r\n */\r\nexport enum LOCAL_SETTINGS_KEYS {\r\n  testData = 1\r\n}\r\n\r\n/**\r\n * Defines the expected data structure to be saved in `localSettings`.\r\n */\r\nexport interface LocalSettingsData<T extends LOCAL_SETTINGS_KEYS> {\r\n  id: T;\r\n  data: DataByKey[T];\r\n}\r\n\r\n/**\r\n * Identifies the data type saved in `localSettings` by the enum value of `LOCAL_SETTINGS_KEYS`.\r\n */\r\ninterface DataByKey {\r\n  [LOCAL_SETTINGS_KEYS.testData]: unknown;\r\n}\r\n\r\n/**\r\n * Example of the method to store data in localSettings:\r\n *\r\n * private saveLocalSettings<T extends LOCAL_SETTINGS_KEYS>(id: T, data: DataByKey[T]): void {\r\n *   dbInsertor(CLIENT_SECTIONS.localSettings, { id, data }).autoInsert();\r\n * }\r\n */\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Randomly generated strings hasehd with sha256 to be used as unique identifiers\r\n */\r\nexport class IdCreator {\r\n\r\n  /**\r\n   * Makes a unique random string with the a name \r\n   */\r\n  public static make(name: string): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${name}${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n  /**\r\n   * Makes a unique completely random string\r\n   */\r\n  public static random(): string {\r\n\r\n    const aliasDate = new Date(new Date().toUTCString()).toISOString();\r\n    const randNumber = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000;\r\n\r\n    const id = `${aliasDate}${randNumber}`;\r\n\r\n    return CryptoES.SHA256(id).toString();\r\n  }\r\n\r\n}\r\n","import { PROJECT_EDITOR_MODE } from 'app/data/project-form-builder/project-editor-form-builder.const';\r\nimport { RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport interface IFormProjectState {\r\n  original: Partial<SystemData>;\r\n  project: Partial<SystemData>;\r\n  mode: PROJECT_EDITOR_MODE\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: IFormProjectState = {\r\n  original: {\r\n    [RESERVED_AUDS_KEYS._settings]: [],\r\n    [RESERVED_AUDS_KEYS._sections]: []\r\n  },\r\n  project: {\r\n    [RESERVED_AUDS_KEYS._settings]: [],\r\n    [RESERVED_AUDS_KEYS._sections]: []\r\n  },\r\n  mode: PROJECT_EDITOR_MODE.basic\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const formProjectReducer = (state: IFormProjectState = formElementState, action: Action<REDUX_ACTIONS>): IFormProjectState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setProjectEditorMode:\r\n      return {\r\n        original: state.original, project: state.project,\r\n        mode: state.mode === PROJECT_EDITOR_MODE.basic ? PROJECT_EDITOR_MODE.advanced : PROJECT_EDITOR_MODE.basic\r\n      };\r\n    case REDUX_ACTIONS.setFormProject:\r\n      // Here we need a deep copy of the project to leave the source unchanged in case the user cancel the edits, \r\n      // and to \"unlink\" the Object set on the `project` key from the one set on the `original` key.\r\n      return { original: cloneDeep(action.payload), mode: state.mode, project: cloneDeep(action.payload) };\r\n    case REDUX_ACTIONS.updateFormProjectSettings:\r\n      return {\r\n        original: state.original, mode: state.mode,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_AUDS_KEYS._settings]: [{ ...action.payload }]\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectAddSection:\r\n      return {\r\n        original: state.original, mode: state.mode,\r\n        project: {\r\n          ...state.project,\r\n          [RESERVED_AUDS_KEYS._sections]: state.project[RESERVED_AUDS_KEYS._sections].concat({\r\n            id: IdCreator.random(),\r\n            title: \"\",\r\n            formModel: [{} as any]\r\n          })\r\n        }\r\n      };\r\n    case REDUX_ACTIONS.updateFormProjectUpdateSection:\r\n      const copy3 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy3.project[RESERVED_AUDS_KEYS._sections][action.payload.index] = { ...action.payload.section };\r\n      return copy3;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection:\r\n      const copy4 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy4.project[RESERVED_AUDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement] = { ...action.payload.formElement };\r\n      return copy4;\r\n    case REDUX_ACTIONS.updateFormProjectAddFieldToSection:\r\n      const copy5 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy5.project[RESERVED_AUDS_KEYS._sections][action.payload].formModel.push({} as any);\r\n      return copy5;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection:\r\n      const copy6 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy6.project[RESERVED_AUDS_KEYS._sections][action.payload.sectionIndex].formModel.splice(action.payload.fieldIndex, 1);\r\n      return copy6;\r\n    case REDUX_ACTIONS.updateFormProjectRemoveSection:\r\n      const copy7 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy7.project[RESERVED_AUDS_KEYS._sections].splice(action.payload, 1);\r\n      return copy7;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption:\r\n      const copy8 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      const defaultValue = copy8.project[RESERVED_AUDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].length + 1;\r\n      copy8.project[RESERVED_AUDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].push({ label: \"\", value: defaultValue } as OptionKeysModel);\r\n      return copy8;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption:\r\n      const copy9 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy9.project[RESERVED_AUDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'].splice(action.payload.indexOptions, 1);\r\n      return copy9;\r\n    case REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue:\r\n      const copy10 = { original: state.original, mode: state.mode, project: { ...state.project } };\r\n      copy10.project[RESERVED_AUDS_KEYS._sections][action.payload.indexSection].formModel[action.payload.indexFormElement]['options'][action.payload.indexOptions] = action.payload.formElement;\r\n      return copy10;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\nexport interface ILayoutState {\r\n  sidebar: \"-translate-x-full\" | \"\";\r\n}\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst formElementState: ILayoutState = {\r\n  sidebar: '-translate-x-full'\r\n};\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const layoutReducer = (state: ILayoutState = formElementState, action: Action<REDUX_ACTIONS>): ILayoutState => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.toggleSidebar:\r\n      const newState = { ...state };\r\n      newState.sidebar = newState.sidebar === '-translate-x-full' ? '' : '-translate-x-full';\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SectionDetailsDeclaration } from 'app/data/project-structure/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the sections selectable by the child of selector\r\n */\r\nconst sectionsForChildOfSelectorState: Array<SectionDetailsDeclaration> = [];\r\n\r\n/**\r\n * Updates the sections selectable by the child of selector component\r\n * \r\n * @see ChildOfSelectorForSectionComponent\r\n */\r\nexport const sectionsForChildOfSelectorReducer = (state: Array<SectionDetailsDeclaration> = sectionsForChildOfSelectorState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addSectionForChildOfSelector:\r\n      const editableState = state.concat();\r\n\r\n      if (!editableState.length)\r\n        editableState.push(action.payload);\r\n      else {\r\n        const index = editableState.findIndex(sectionDeclaration => sectionDeclaration.id === action.payload.id);\r\n        const position = index >= 0 ? index : editableState.length;\r\n        editableState[position] = action.payload;\r\n      }\r\n      return editableState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings, SectionDetailsDeclaration, SystemData } from 'app/data/project-structure/project-info';\r\nimport { formElementReducer, IFormElementState } from 'app/libs/redux/reducers/form-element.reducer';\r\nimport { formElesValidStateReducer, IFormElesValidState } from 'app/libs/redux/reducers/form-eles-valid-state.reducer';\r\nimport { formProjectReducer, IFormProjectState } from 'app/libs/redux/reducers/form-project.reducer';\r\nimport { ILayoutState, layoutReducer } from 'app/libs/redux/reducers/layout.reducer';\r\nimport { projectReducer } from 'app/libs/redux/reducers/project.reducer';\r\nimport { projectsReducer } from 'app/libs/redux/reducers/projects.reducer';\r\nimport { sectionsForChildOfSelectorReducer } from 'app/libs/redux/reducers/sections-for-child-of-selector.reducer';\r\n\r\n/**\r\n * Supported reducers\r\n */\r\nexport const REDUCERS = {\r\n  project: projectReducer,\r\n  projects: projectsReducer,\r\n  sectionsForChildOfSelector: sectionsForChildOfSelectorReducer,\r\n  formElesValidState: formElesValidStateReducer,\r\n  formElement: formElementReducer,\r\n  formProject: formProjectReducer,\r\n  layout: layoutReducer\r\n};\r\n\r\n/**\r\n * Types managed by reducers\r\n */\r\nexport interface AnitaStore {\r\n  project: SystemData;\r\n  projects: Array<LocalProjectSettings>;\r\n  sectionsForChildOfSelector: Array<SectionDetailsDeclaration>;\r\n  formElesValidState: IFormElesValidState;\r\n  formElement: IFormElementState;\r\n  formProject: IFormProjectState;\r\n  layout: ILayoutState;\r\n}\r\n","import { SystemData } from 'app/data/project-structure/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nconst projectState: SystemData | void = null;\r\n\r\n/**\r\n * Updates the projectState\r\n */\r\nexport const projectReducer = (state: SystemData | void = projectState, action: Action<REDUX_ACTIONS>): SystemData | void => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.setCurrentProject:\r\n      return action.payload\r\n    case REDUX_ACTIONS.resetCurrentProject:\r\n      return null\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { LocalProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { Action } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\n\r\n/**\r\n * The initial state of the container of the current project\r\n */\r\nexport const projectsState: Array<LocalProjectSettings> | void = null;\r\n\r\n/**\r\n * Updates the projectsState\r\n */\r\nexport const projectsReducer = (state: Array<LocalProjectSettings> | void = projectsState, action: Action<REDUX_ACTIONS>) => {\r\n  switch (action.type) {\r\n    case REDUX_ACTIONS.addProjectToList:\r\n      return state ? state.concat(action.payload) : [action.payload];\r\n    case REDUX_ACTIONS.setProjectList:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { REDUCERS } from 'app/libs/redux/reducers.const';\r\nimport { combineReducers, createStore } from 'redux';\r\n\r\nconst combinedReducers = combineReducers(REDUCERS)\r\n\r\nexport const store = createStore(combinedReducers);","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport Dexie from 'dexie';\r\nimport { Db } from 'mongodb';\r\nimport * as mysql from 'mysql';\r\nimport { Database } from 'sql.js';\r\n\r\ninterface DbInstances {\r\n  system: DbConnectorInstance<Dexie>;\r\n  [projectIdentifier: string]: DbConnectorInstance<Dexie | Db | mysql.Connection | AnitaUniversalDataStorage | Database>;\r\n}\r\n\r\nexport const dbInstances: DbInstances = {\r\n  system: undefined\r\n};\r\n","import { LocalProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table projects and its fields for the `indexedDb` plugin of `db-connector`.\r\n * In the table `projects` are stored only the essential information needed to load the project from its data source.\r\n */\r\nexport const projects: SectionDefinition<LocalProjectSettings> = {\r\n  name: 'projects',\r\n  fields: [\r\n    'title',\r\n    'fileHandle',\r\n    'description',\r\n    RESERVED_FIELDS.createdAt\r\n  ]\r\n};\r\n","import { auds_sections } from 'app/data/system-local-db/sections/auds-sections.const';\r\nimport { auds_settings } from 'app/data/system-local-db/sections/auds-settings.const';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport enum AUDS_SYSTEM_SECTIONS {\r\n  auds_settings = 1,\r\n  auds_sections\r\n}\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const AUDS_SYSTEM_SECTIONS_DEFINITIONS = [auds_settings, auds_sections];\r\n","import { localSettings } from 'app/data/system-local-db/sections/local-settings.const';\r\nimport { projects } from 'app/data/system-local-db/sections/projects.const';\r\n\r\n/**\r\n * Identifies the table on which run the query with `db-connector`.\r\n */\r\nexport const CLIENT_SECTIONS = {\r\n  projects: projects.name,\r\n  localSettings: localSettings.name\r\n};\r\n\r\n/**\r\n * Optional on first version, required for changes to the structure of the DB\r\n * Must contain on Array for each previous version\r\n * Each array must contain the unaltered SezDefinitions of that version\r\n * \r\n * TODO with Dexie 3.x.x upgrading has been simplified, probably no longer needed.\r\n */\r\nexport const previousVersions: Array<Array<string>> = [\r\n  // insert here previous version on DB structure change\r\n];\r\n\r\n/**\r\n * Array to be passed to `db-connector` to initialize the DB with Dexie, via the IndexedDb plugin.\r\n */\r\nexport const CLIENT_SEZ_DEFINITIONS = [projects, localSettings];\r\n","import { RESERVED_AUDS_KEYS, Section } from 'app/data/project-structure/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _sections and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_sections: SectionDefinition<Section> = {\r\n  name: RESERVED_AUDS_KEYS._sections,\r\n  pk: 'id',\r\n  fields: ['title'],\r\n  jsonFields: ['childOf', 'formModel'],\r\n};\r\n","import { ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\n\r\n/**\r\n * Defines the table _settings and its fields for system data of the AnitaUniversalDataStorage structure.\r\n * This is needed to work on system sections with DbConnector.\r\n */\r\nexport const auds_settings: SectionDefinition<ProjectSettings> = {\r\n  name: RESERVED_AUDS_KEYS._settings,\r\n  pk: 'id',\r\n  fields: ['title', 'localStorage', 'createdAt', 'description']\r\n};\r\n","import { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\n\r\n/**\r\n * Default primary key if none is specified.\r\n */\r\nexport const DEFAULT_PK = RESERVED_FIELDS.id;\r\n\r\n/**\r\n * Default parent identifier if none is specified.\r\n */\r\nexport const DEFAULT_PARENTS_IDENTIFIER = RESERVED_FIELDS.parentsInfo;\r\n\r\n/**\r\n * Default owner identifier if none is specified.\r\n */\r\nexport const DEFAULT_OWNER_IDENTIFIER = RESERVED_FIELDS.createdBy;\r\n","export class Logger {\r\n\r\n  /**\r\n   * Whether to print to the console debug info\r\n   */\r\n  public static debug = true;\r\n\r\n  /**\r\n   * Spaces to format list elements\r\n   */\r\n  private static spacesForListeles = '\\n                            - ';\r\n\r\n  // INFO\r\n\r\n  /**\r\n   * Formats in one line a description and a value\r\n   */\r\n  public static info<T>(desc: string, value?: T): string {\r\n    const arrMsg = (value) ? [`${desc}: ${JSON.stringify(value)}`] : [desc];\r\n    return Logger.doLog(arrMsg);\r\n  }\r\n\r\n  // LIST\r\n\r\n  /**\r\n   * Generates a list in the console for an array of strings\r\n   */\r\n  public static list(desc: string, list: Array<string> | Object): string {\r\n\r\n    if (Logger.isEmptyList(list))\r\n      Logger.doLog([desc, 'none']);\r\n\r\n    let stringList = (Array.isArray(list)) ? Logger.listFromArray(list) : Logger.listFromObject(list);\r\n\r\n    stringList = stringList.substring(0, stringList.length - 1);\r\n    stringList += '.';\r\n\r\n    return Logger.doLog([`${desc} ${stringList}`]);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a list is empty\r\n   */\r\n  private static isEmptyList(list: Array<string> | Object): boolean {\r\n    return (Array.isArray(list) && !list.length) || (typeof list === 'object' && !Object.keys(list).length);\r\n  }\r\n\r\n  /**\r\n   * Creates a list from an array\r\n   */\r\n  private static listFromArray(list: Array<string>): string {\r\n    let stringList = '';\r\n    list.forEach(line => { stringList += `${Logger.spacesForListeles}${Logger.formatValueForList(line)};`; });\r\n    return stringList;\r\n  }\r\n\r\n  /**\r\n   * Creates a list from a object \r\n   */\r\n  private static listFromObject(list: Object): string {\r\n    let stringList = '';\r\n    for (const key in list)\r\n      stringList += `${Logger.spacesForListeles}${key}: ${Logger.formatValueForList(list[key])};`;\r\n    return stringList;\r\n  }\r\n\r\n  // RAW\r\n\r\n  /**\r\n   * Same as console.log\r\n   */\r\n  public static raw(desc: string, txt?: any): string {\r\n    return Logger.doLog([`${desc}: `, txt]);\r\n  }\r\n\r\n  // ERROR\r\n\r\n  /**\r\n   * Same as console.error\r\n   */\r\n  public static error(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'error');\r\n  }\r\n\r\n  /**\r\n   * Same as console.warn\r\n   */\r\n  public static warn(desc: string, txt?: string, extra?: any): string {\r\n    return Logger.doLog([desc, txt, extra], 'warn');\r\n  }\r\n\r\n  // COMMON\r\n\r\n  /**\r\n   * Converts non primitive values to string \r\n   */\r\n  private static formatValueForList<T>(value: T): T | string {\r\n    return (Logger.isPrimitiveValue(value) || value === null) ? value : JSON.stringify(value);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a value is a primitive\r\n   */\r\n  private static isPrimitiveValue<T>(value: T): boolean {\r\n    switch (typeof value) {\r\n      case 'string':\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'undefined':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logs text to the console if debug is `true`\r\n   */\r\n  private static doLog(data: Array<string | number>, methodName: 'log' | 'error' | 'warn' = 'log'): string {\r\n\r\n    const date = new Date().toISOString();\r\n    data[0] = `[${date}] ${data[0]}`;\r\n\r\n    if (Logger.debug === true)\r\n      console[methodName](...data);\r\n\r\n    return data.join('. ');\r\n  }\r\n\r\n}\r\n","import { DEFAULT_OWNER_IDENTIFIER, DEFAULT_PARENTS_IDENTIFIER, DEFAULT_PK } from 'app/libs/db-connector/db-builder/default-values.constant';\r\nimport { SectionDefinition, SectionModel, SectionName } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Builds a Section model\r\n */\r\nexport class SezBuilder<T> {\r\n\r\n  /**\r\n   * The section model\r\n   */\r\n  private section: SectionModel<T>;\r\n\r\n  /**\r\n   * Creates an instance of sez builder.\r\n   * @param allSez all the sections definitions of the data structure.\r\n   * @param name the section name to build.\r\n   * @param [fields] all fields. Optional as a section can have only the system fields.\r\n   * @param [pk] the primary key.\r\n   * @param [indexes] the indexes of the section (aka table).\r\n   * @param [orderBy] default sorting order.\r\n   * @param [childOf] list of sections of which the current section is child. Needed for the UI, to add the parent delector.\r\n   * @param [parentsIdentifiers] name of the field identifying the parent id value.\r\n   * @param [ownerIdentifier] name of the field identifying the id of the owner.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>,\r\n    private name: SectionName,\r\n    private fields: Array<keyof T & string> = [],\r\n    private jsonFields: Array<keyof T & string> = [],\r\n    private pk: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private indexes: Array<keyof T> = [DEFAULT_PK] as Array<keyof T>,\r\n    private orderBy: keyof T & string = DEFAULT_PK as keyof T & string,\r\n    private childOf?: Array<SectionName>,\r\n    private parentsIdentifiers?: keyof T,\r\n    private ownerIdentifier?: keyof T & string\r\n  ) { }\r\n\r\n  /**\r\n   * Makes the section and returns it.\r\n   */\r\n  public make(): SectionModel<T> {\r\n    this.addPkToFields();\r\n    this.addPkToIndexes();\r\n    this.addSpecialFieldsToFields('indexes');\r\n    this.addSpecialFieldsToFields('jsonFields');\r\n    this.setOwnerIdentifier();\r\n    this.checkOrderByExists();\r\n    this.checkRelations();\r\n    this.checkParentIdentifier();\r\n    this.buildSez();\r\n    return this.section;\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to fields if not already included.\r\n   */\r\n  private addPkToFields(): void {\r\n    if (!this.fields.includes(this.pk))\r\n      this.fields.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the pk field name to indexes if not already included.\r\n   */\r\n  private addPkToIndexes(): void {\r\n    if (!this.indexes.includes(this.pk))\r\n      this.indexes.unshift(this.pk);\r\n  }\r\n\r\n  /**\r\n   * Adds the fields specified in `indexes` to the fields, if not already included.\r\n   */\r\n  private addSpecialFieldsToFields(scope: 'indexes' | 'jsonFields'): void {\r\n    this[scope].forEach(fieldName => {\r\n      if (!this.fields.includes(fieldName))\r\n        this.fields.push(fieldName);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the owneridentifier value and adds it to the fields if not already included.\r\n   */\r\n  private setOwnerIdentifier(): void {\r\n    if (!this.ownerIdentifier)\r\n      this.ownerIdentifier = DEFAULT_OWNER_IDENTIFIER as keyof T & string;\r\n    if (!this.fields.includes(this.ownerIdentifier))\r\n      this.fields.push(this.ownerIdentifier);\r\n  }\r\n\r\n  /**\r\n   * Adds the orderBy value to fields if not already included.\r\n   */\r\n  private checkOrderByExists(): void {\r\n    if (!this.fields.includes(this.orderBy))\r\n      this.fields.push(this.orderBy);\r\n  }\r\n\r\n  /**\r\n   * Checks that the values of `childOf` correspond to valid section names.\r\n   */\r\n  private checkRelations(): void {\r\n    if (this.childOf)\r\n      this.loopAllRelations();\r\n  }\r\n\r\n  /**\r\n   * Loops all relations for a given scope and calls checkRelationsExist to check if the value is valid.\r\n   * Sets the scope to undefined if there are no valid relationships.\r\n   *\r\n   * @see checkRelationsExist\r\n   */\r\n  private loopAllRelations(): void {\r\n    this.childOf.forEach((sezName: SectionName) => this.checkRelationsExist(sezName));\r\n    if (!this.childOf.length)\r\n      this.childOf = undefined;\r\n  }\r\n\r\n  /**\r\n   * Checks that the section name found in `childOf` correponds to an actual section.\r\n   * If not, removes the section name from the list of sections in `childOf`.\r\n   * @param sezName the name of the section to look for\r\n   */\r\n  private checkRelationsExist(sezName: SectionName): void {\r\n    const indexSez = this.getSezByName(sezName);\r\n    if (indexSez >= 0)\r\n      return;\r\n\r\n    const indexInScope = this.childOf.indexOf(sezName as string);\r\n    this.childOf.splice(indexInScope, 1);\r\n\r\n    Logger.error(`Error in .childOf list`, `Section '${sezName}' does not exist in the sections list and has hence been removed from the .childOf list`);\r\n  }\r\n\r\n  /**\r\n   * Finds the section number by its name from the list of all the section definitions.\r\n   * @param sezName the name to look for\r\n   * @returns the section number\r\n   */\r\n  private getSezByName(sezName: SectionName): number {\r\n    let foundIndex = -1;\r\n    let counter = 0;\r\n    const length = this.allSez.length;\r\n    while (foundIndex === -1 && counter < length) {\r\n      if (this.allSez[counter].name === sezName)\r\n        foundIndex = counter;\r\n      counter++;\r\n    }\r\n    return foundIndex;\r\n  }\r\n\r\n  /**\r\n   * Checks that parentsIdentifiers is set if `childOf` has any section.\r\n   */\r\n  private checkParentIdentifier(): void {\r\n    if (this.childOf && !this.parentsIdentifiers)\r\n      this.parentsIdentifiers = DEFAULT_PARENTS_IDENTIFIER as keyof T;\r\n  }\r\n\r\n  /**\r\n   * Builds the section\r\n   */\r\n  private buildSez(): void {\r\n    this.section = {\r\n      name: this.name,\r\n      pk: this.pk,\r\n      indexes: this.indexes,\r\n      orderBy: this.orderBy,\r\n      fields: this.fields,\r\n      ownerIdentifier: this.ownerIdentifier,\r\n      jsonFields: this.jsonFields\r\n    };\r\n    this.addChildOf();\r\n  }\r\n\r\n  /**\r\n   * Adds the filed `childOf` if any\r\n   */\r\n  private addChildOf(): void {\r\n    if (!this.childOf)\r\n      return;\r\n\r\n    this.section.childOf = this.childOf;\r\n    this.section.parentsIdentifiers = this.parentsIdentifiers;\r\n  }\r\n\r\n}\r\n","export enum EDITOR_MODE {\r\n  add = \"add\",\r\n  edit = \"edit\"\r\n}\r\n","import { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport enum URL_PARAMS {\r\n  projectId = 'projectId',\r\n  sectionId = 'sectionId',\r\n  elementId = 'elementId',\r\n  parentId = 'parentId'\r\n}\r\n\r\n/**\r\n * Lists all the routes in the application\r\n * \r\n * @remarks We can't use the enum approach here because we need to concat strings.\r\n */\r\nexport const ANITA_URLS = {\r\n  // PROJECTS\r\n  projectsNone: '/projects/none',\r\n  projectsList: '/projects/list',\r\n  projectAdd: `/projects/${EDITOR_MODE.add}`,\r\n  projectEdit: `/projects/${EDITOR_MODE.edit}/:${URL_PARAMS.projectId}`,\r\n  // PROJECT\r\n  projectDetails: `/project/:${URL_PARAMS.projectId}/info`,\r\n  projectSectionElesList: `/project/:${URL_PARAMS.projectId}/list/:${URL_PARAMS.sectionId}`,\r\n  projectSectionAddEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.add}`,\r\n  projectSectionEditEle: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/${EDITOR_MODE.edit}/:${URL_PARAMS.elementId}`,\r\n  projectSectionEleDetails: `/project/:${URL_PARAMS.projectId}/:${URL_PARAMS.sectionId}/details/:${URL_PARAMS.elementId}`,\r\n}\r\n","import { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\n\r\n/**\r\n * Builds the data structure of the DB from the section definitions and returns it.\r\n */\r\nexport class DataStructureBuilder {\r\n\r\n  /**\r\n   * The data structure to be returned.\r\n   */\r\n  private ds: AbstractModel = {};\r\n\r\n  /**\r\n   * Creates an instance of DataStructureBuilder.\r\n   * @param allSez the `Array` of all the definitions of the Sections (aka tables) of the DB.\r\n   */\r\n  constructor(\r\n    private allSez: Array<SectionDefinition<any>>\r\n  ) { }\r\n\r\n  /**\r\n   * Loops all Sections and finally returns the data structure.\r\n   */\r\n  public make(): AbstractModel {\r\n    this.allSez.forEach(sez => this.buildSez<typeof sez>(sez));\r\n    return this.ds;\r\n  }\r\n\r\n  /**\r\n   * Builds the actual Section to be added to data structure.\r\n   */\r\n  private buildSez<T>(sezParams: SectionDefinition<T>): void {\r\n    const sez = new SezBuilder<T>(\r\n      this.allSez,\r\n      sezParams.name,\r\n      sezParams.fields,\r\n      sezParams.jsonFields,\r\n      sezParams.pk,\r\n      sezParams.indexes,\r\n      sezParams.orderBy,\r\n      sezParams.childOf,\r\n      sezParams.parentsIdentifiers,\r\n      sezParams.ownerIdentifier\r\n    ).make();\r\n    this.addToTempDs(sez);\r\n  }\r\n\r\n  /**\r\n   * Adds a Section to the class property `ds` using `name` as key.\r\n   */\r\n  private addToTempDs<T>(sez: SectionModel<T>): void {\r\n    this.ds[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { AUDS_SYSTEM_SECTIONS_DEFINITIONS } from 'app/data/system-local-db/auds-system-sections.enum';\r\nimport { DataStructureBuilder } from 'app/libs/db-connector/db-builder/data-structure-builder.class';\r\nimport { SectionDefinition } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport {\r\n  DbConnectorInstance,\r\n  DbObjects,\r\n  DbStoreInterface,\r\n  Deletor,\r\n  DsDbInitOptions,\r\n  Insertor,\r\n  Selector,\r\n  Updator\r\n  } from 'app/libs/db-connector/models/executers';\r\n\r\n/**\r\n *  Initialize `db-connector` for the given storage (MySQL, IndexedDB, etc.)\r\n *\r\n * @param executers The plugin implementing the read/write operations on the DB\r\n * @param [options={}] Initialization options of the DB. These very depending on the plugin requirements (e.g. connection parameters)\r\n * @param [allSez] section definitions defining the data structure of the DB\r\n * @param [addSystemSections=true] whether to automatically build the data structure for system sections (`_settings` and `_sections`)\r\n */\r\nexport class DbConnector<DbTypes> implements DbConnectorInstance<DbTypes> {\r\n\r\n  public dbStore: DbStoreInterface<DbTypes>;\r\n  public DS: AbstractModel = {};\r\n\r\n  constructor(\r\n    private executers: DbObjects<unknown, DbTypes>,\r\n    public options: DsDbInitOptions = {},\r\n    private allSez: Array<SectionDefinition<any>> = [],\r\n    private addSystemSections: boolean = true\r\n  ) { }\r\n\r\n  public async init(): Promise<DbConnectorInstance<DbTypes>> {\r\n\r\n    if (this.addSystemSections)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(AUDS_SYSTEM_SECTIONS_DEFINITIONS).make());\r\n\r\n    if (this.allSez.length)\r\n      this.DS = Object.assign(this.DS, new DataStructureBuilder(this.allSez).make());\r\n\r\n    if (this.options.DS)\r\n      this.DS = Object.assign(this.DS, this.options.DS);\r\n\r\n    if (this.executers.dbStore)\r\n      this.dbStore = await new this.executers.dbStore(this.options, this.DS).initDB();\r\n    else\r\n      throw new Error('No dbStore passed to DbConnector. To initialize DbConnector, you must pass a valid dbStore');\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the insertor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param element the alement to insert in the DB.\r\n   * @returns an instance of insertor (don't forget to call `autoInsert`)\r\n   */\r\n  public callInsertor<E>(section: keyof AbstractModel, element: E): Insertor<E> {\r\n    return new this.executers.insertor(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the selector of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of selector (don't forget to call `single` or `multiple` or `count`)\r\n   */\r\n  public callSelector<E>(section: keyof AbstractModel, args?: Partial<E>): Selector<E> {\r\n    return new this.executers.selector(this, section, args) as Selector<E>;\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the updator of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the element to update in the DB.\r\n   * @returns an instance of updator (don't forget to call `autoUpdate`)\r\n   */\r\n  public callUpdator<E>(section: keyof AbstractModel, element: Partial<E>): Updator<E> {\r\n    return new this.executers.updator(this, section, element);\r\n  }\r\n\r\n  /**\r\n   * Ready to call function that returns an instance of the deletor of the plugin passed to DbInit.\r\n   * @param section the section on which to perform the query.\r\n   * @param args the arguments to build the query.\r\n   * @returns an instance of deletor (don't forget to call `autoDelete`)\r\n   */\r\n  public callDeletor<E>(section: keyof AbstractModel, args: Partial<E>): Deletor<E> {\r\n    return new this.executers.deletor(this, section, args);\r\n  }\r\n\r\n}\r\n","import { Section, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { SezBuilder } from 'app/libs/db-connector/db-builder/sez-builder.class';\r\nimport { SectionDefinition, SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\n\r\n/**\r\n * Converts the abstract definition of a Section into a complete datastructure that can be processed by FormDataParserService\r\n *\r\n * @see FormDataParserService\r\n */\r\nexport class DataStructureExtender {\r\n\r\n  /**\r\n   * Temporarly stores all the sections defined by `buildSectionDefinition`\r\n   *\r\n   * @see buildSectionDefinition\r\n   */\r\n  public allSez: Array<SectionDefinition<SectionElement>> = [];\r\n\r\n  private datastructure: AbstractModel = {};\r\n\r\n  constructor(\r\n    private sections: Array<Section>\r\n  ) { }\r\n\r\n  /**\r\n   * First calls `cleanDataStructure` if a previous project was set.\r\n   * Then builds all sections definitions with `buildSectionDefinition`.\r\n   * Finally calls `buildAndAddAllSections` to build the full section and add it to the datastructure.\r\n   */\r\n  public extend(): AbstractModel {\r\n    this.sections.forEach(section => this.buildSectionDefinition(section));\r\n    this.allSez.forEach(sezDefinition => this.buildAndAddAllSections(sezDefinition));\r\n    return this.datastructure;\r\n  }\r\n\r\n  /**\r\n   * Builds a contant with the specifications of a Section starting from the structure defined by the user.\r\n   */\r\n  private buildSectionDefinition(section: Section): void {\r\n    const sezDefinition: SectionDefinition<SectionElement> = {\r\n      name: section.id,\r\n      fields: Object.values(RESERVED_FIELDS),\r\n      jsonFields: [RESERVED_FIELDS.parentsInfo]\r\n    };\r\n    section.formModel.forEach(field => {\r\n      sezDefinition.fields.push(field.fieldName);\r\n    });\r\n\r\n    this.allSez.push(sezDefinition);\r\n  }\r\n\r\n  /**\r\n   * Starting from the definition of the Section, builds a full model of the Section and adds it to the datastructure.\r\n   */\r\n  private buildAndAddAllSections(sezDefinition: SectionDefinition<SectionElement>): void {\r\n    const sez = new SezBuilder<SectionElement>(\r\n      this.allSez,\r\n      sezDefinition.name,\r\n      sezDefinition.fields\r\n    ).make();\r\n    this.addToTempTs(sez);\r\n  }\r\n\r\n  /**\r\n   * Creates a new key on the datastructure and sets on it the model of the section.\r\n   */\r\n  private addToTempTs(sez: SectionModel<SectionElement>): void {\r\n    this.datastructure[sez.name] = sez;\r\n  }\r\n\r\n}\r\n","import { AdditionalInfoForLocalStorage, RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info';\r\nimport { DataStructureExtender } from 'app/data/system-local-db/data-structure-extender.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport Dexie, { Version } from 'dexie';\r\n\r\n/**\r\n * Implementation of DbStore for IndexedDB with Dexie.\r\n */\r\nexport class DbStore implements DbStoreInterface<Dexie> {\r\n\r\n  public db: Dexie;\r\n  private deletedSections: Array<string> = [];\r\n\r\n  constructor(\r\n    private options: DsDbInitOptions,\r\n    private DS: AbstractModel\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<Dexie>> {\r\n\r\n    if (!this.options.indexedDbName)\r\n      throw Error('No name found in DsDbInitOptions. Please provide a name for the database by setting the name on the property indexedDbName in the options passed to DbConnector.');\r\n\r\n    this.setDb();\r\n\r\n    if (!this.options.previousVersions)\r\n      this.options.previousVersions = [];\r\n\r\n    this.handlePreviousVersion();\r\n\r\n    this.buildDb();\r\n\r\n    return this;\r\n  }\r\n\r\n  public async postProjectCreation(): Promise<AdditionalInfoForLocalStorage> {\r\n    return this.makeDexieInfoForUpgrade();\r\n  }\r\n\r\n  public async postProjectUpdate(project: SystemData): Promise<AdditionalInfoForLocalStorage> {\r\n    const newSections = Object.keys(project).concat(project[RESERVED_AUDS_KEYS._sections].map(section => section.id));\r\n    const oldSections = Object.keys(this.DS);\r\n\r\n    // Check if any section in oldSections has been deleted, or if any section in newSections has been added\r\n    const sectionsToDelete = oldSections.filter(section => !newSections.includes(section));\r\n    const sectionsToAdd = newSections.filter(section => !oldSections.includes(section));\r\n\r\n    // If there are sections to delete or to add, we push a new array to previousVersions\r\n    // We don't need to store the new sections as Dexie from v.3.0.0 on, will automatically create the new tables\r\n    if (sectionsToDelete.length > 0 || sectionsToAdd.length > 0) {\r\n\r\n      this.options.previousVersions.push(sectionsToDelete.concat());\r\n\r\n      // We need to delete the sections that are not in the DS anymore\r\n      sectionsToDelete.forEach(section => {\r\n        delete this.DS[section];\r\n      });\r\n\r\n      // We need to add the sections that have been added to the DS\r\n      if (sectionsToAdd.length > 0) {\r\n        const newSections = project[RESERVED_AUDS_KEYS._sections].filter(section => sectionsToAdd.includes(section.id));\r\n        Object.assign(this.DS, new DataStructureExtender(newSections).extend());\r\n      }\r\n\r\n      // We need to rebuild the database, see https://dexie.org/docs/Dexie/Dexie.close()\r\n      this.close();\r\n      console.log('1');\r\n      this.handlePreviousVersion();\r\n      console.log('2');\r\n      this.buildDb();\r\n      console.log('3');\r\n      await this.db.open()\r\n      console.log('4');\r\n    }\r\n\r\n    return this.makeDexieInfoForUpgrade();\r\n  }\r\n\r\n  public close(): void {\r\n    return this.db.close()\r\n  }\r\n\r\n  public onProjectDeleted(): Promise<void> {\r\n    return this.db.delete();\r\n  }\r\n\r\n  private makeDexieInfoForUpgrade(): AdditionalInfoForLocalStorage {\r\n    return { dexieInfoForUpgrade: { previousVersions: this.options.previousVersions, DS: this.DS } };\r\n  }\r\n\r\n\r\n  private setDb(): void {\r\n    this.db = new Dexie(this.options.indexedDbName);\r\n  }\r\n\r\n  // Adds to deletedSections the sections that are not in the DS anymore\r\n  // In buildDb we will delete the sections that are not in the DS anymore\r\n  private handlePreviousVersion(): void {\r\n    this.deletedSections = [];\r\n    this.options.previousVersions.forEach(versionSezs =>\r\n      versionSezs.forEach(section => {\r\n        if (!this.DS[section])\r\n          this.deletedSections.push(section);\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildDb(): Version {\r\n    const version = this.options.previousVersions?.length + 1 || 1;\r\n    const tables = {};\r\n\r\n    for (const section in this.DS)\r\n      tables[this.DS[section].name] = this.DS[section].indexes.join();\r\n\r\n    // Removes the sections that are not in the DS anymore\r\n    // See https://dexie.org/docs/Tutorial/Understanding-the-basics#deleting-tables\r\n    this.deletedSections.forEach(section => tables[section] = null);\r\n\r\n    return this.db.version(version).stores(tables);\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { NewWhere } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\n\r\nexport interface BetweenSearchParams {\r\n  field: string;\r\n  lowerBound: string | number;\r\n  upperBound: string | number;\r\n  includeLower: boolean;\r\n  includeUpper: boolean;\r\n}\r\n\r\nexport type SuppoertedOperators = '===' | '!=' | '>' | '>=' | '<' | '<=' | '=';\r\n\r\nexport interface FieldNValues {\r\n  [index: string]: string | number;\r\n}\r\n\r\nexport type Filter4Dexie = (item: Object) => boolean;\r\n\r\n/**\r\n * Support methods to build queries with `QueryMaker` on IndexedDB with Dexie\r\n * \r\n * @see QueryMaker\r\n */\r\nexport class QueryHelper {\r\n\r\n  /**\r\n   * Determines the methods to execute for the select query based on the number of arguments.\r\n   */\r\n  public static methodToExecute(DS: AbstractModel, arraysWhere: Array<NewWhere>, section: keyof AbstractModel): 'dexieFullCollection' | 'dexieBetween' | 'dexieGet' | 'dexieWhere' | 'complexSelect' {\r\n\r\n    const arraysWhereLen = arraysWhere.length;\r\n\r\n    if (!arraysWhereLen)\r\n      return 'dexieFullCollection';\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    if (arraysWhereLen === 2 && (arraysWhere[0][1] === '>=' || arraysWhere[0][1] === '>') && (arraysWhere[1][1] === '<=' || arraysWhere[1][1] === '<'))\r\n      return 'dexieBetween';\r\n\r\n    if (arraysWhere[0][1] !== '=')\r\n      return 'complexSelect';\r\n\r\n    if (arraysWhereLen === 1 && arraysWhere[0][0] === DS[section].pk)\r\n      return 'dexieGet';\r\n\r\n    if (DS[section].indexes.indexOf(arraysWhere[0][0]) > -1)\r\n      return 'dexieGet';\r\n\r\n    let dexieWhere = true;\r\n\r\n    arraysWhere.forEach(whereArr => {\r\n      if (whereArr[1] !== '=')\r\n        dexieWhere = false;\r\n      if (DS[section].indexes.indexOf(whereArr[0]) < 0)\r\n        dexieWhere = false;\r\n    });\r\n\r\n    if (dexieWhere)\r\n      return 'dexieWhere';\r\n\r\n    return 'complexSelect';\r\n\r\n  }\r\n\r\n  /**\r\n   * Converts an Array of where arguments (field, operator, value) to an object with field and value\r\n   */\r\n  public static buildArrayFildsNValues(arraysWhere: Array<NewWhere>): FieldNValues {\r\n    const objFieldsNValues: FieldNValues = {};\r\n\r\n    arraysWhere.forEach(arrSearch => {\r\n      objFieldsNValues[arrSearch[0]] = arrSearch[2];\r\n    });\r\n\r\n    return objFieldsNValues;\r\n\r\n  }\r\n\r\n  /**\r\n   * Builds between search params, optionally including upper or lower boundary\r\n   */\r\n  public static buildBetweenSearchParams(arraysWhere: Array<NewWhere>): BetweenSearchParams {\r\n    const includeLower = (arraysWhere[0][1] === '>=') ? true : false;\r\n    const includeUpper = (arraysWhere[1][1] === '<=') ? true : false;\r\n    return {\r\n      field: arraysWhere[0][0],\r\n      lowerBound: arraysWhere[0][2],\r\n      upperBound: arraysWhere[1][2],\r\n      includeLower: includeLower,\r\n      includeUpper: includeUpper\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Builds the filter to select elements for complex queries not supported by Dexie due to IndexedDB limits\r\n   */\r\n  public static buildFilter4Dexie(filter: NewWhere): Filter4Dexie {\r\n    const field = filter[0];\r\n    const operator = filter[1];\r\n    const value = filter[2];\r\n    return (item): boolean => {\r\n      switch (operator) {\r\n        case '===':\r\n          return item[field] === value;\r\n        case '!=':\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] != value;\r\n        case '>':\r\n          return item[field] > value;\r\n        case '>=':\r\n          return item[field] >= value;\r\n        case '<':\r\n          return item[field] > value;\r\n        case '<=':\r\n          return item[field] <= value;\r\n        default:\r\n          // eslint-disable-next-line eqeqeq\r\n          return item[field] == value;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Chains filters\r\n   */\r\n  public static chainFilters(where: Array<Filter4Dexie>, logic: 'AND' | 'OR'): Filter4Dexie {\r\n    return (item): boolean => {\r\n      if (!where.length)\r\n        return true;\r\n\r\n      let result: boolean = where[0](item);\r\n\r\n      for (const filter of where)\r\n        switch (logic) {\r\n          case 'OR':\r\n            result = result || filter(item);\r\n            break;\r\n          default:\r\n            result = result && filter(item);\r\n        }\r\n\r\n      return result;\r\n    };\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Filter4Dexie, QueryHelper, SuppoertedOperators } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-helper.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\nexport type NewWhere = [string, SuppoertedOperators, string | number];\r\n\r\n/**\r\n * Builds queries to be executed with Dexie\r\n */\r\nexport class QueryMaker<E> {\r\n\r\n  private logic: 'AND' | 'OR' = 'AND';\r\n  private table: string;\r\n  private collection;\r\n  private dexieFilters: Array<Filter4Dexie> = [];\r\n  private arrWhere: Array<NewWhere> = [];\r\n  private orderBy: string;\r\n  private debug = false;\r\n\r\n  /**\r\n   * Creates an instance of query maker.\r\n   * @param section the section name (aka table) on which to run the query\r\n   * @param [element] optional element on which to perform the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element?: E\r\n  ) {\r\n    this.table = this.dbConnector.DS[this.section].name;\r\n    this.collection = this.dbConnector.dbStore.db[this.table];\r\n  }\r\n\r\n  /**\r\n   * Adds a where clause to `arrWhere`\r\n   */\r\n  public addWhere(new_where: NewWhere): QueryMaker<E> {\r\n    this.arrWhere.push(new_where);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the logic to OR\r\n   */\r\n  public setOrLogic(): QueryMaker<E> {\r\n    this.logic = 'OR';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the orderBy property\r\n   */\r\n  public setOrderBy(order: string): void {\r\n    this.orderBy = order;\r\n  }\r\n\r\n  // SELECT\r\n\r\n  /**\r\n   * Determines which method to execute and then performs the select operation \r\n   */\r\n  public async select(): Promise<Array<E>> {\r\n\r\n    if (this.logic !== 'AND')\r\n      return this.complexSelect();\r\n\r\n    const methodToExecute = QueryHelper.methodToExecute(this.dbConnector.DS, this.arrWhere, this.section);\r\n\r\n    this.handleDebug('SELECT', 'methodToExecute', methodToExecute);\r\n\r\n    return this[methodToExecute]();\r\n  }\r\n\r\n  /**\r\n   * Select with Dexie.get\r\n   */\r\n  private async dexieGet(): Promise<Array<E>> {\r\n    const objSearch = {};\r\n    objSearch[this.arrWhere[0][0]] = this.arrWhere[0][2];\r\n    const res = await this.dbConnector.dbStore.db[this.table].get(objSearch);\r\n    const eleToReturn = res ? [res] : [];\r\n    return eleToReturn;\r\n  }\r\n\r\n  /**\r\n   * Selects using the where method of Dexie\r\n   */\r\n  private async dexieWhere(): Promise<Array<E>> {\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(fieldNValues).toArray();\r\n  }\r\n\r\n  /**\r\n   * Select between two values with Dexie\r\n   */\r\n  private async dexieBetween(): Promise<Array<E>> {\r\n    const betweenSearchParams = QueryHelper.buildBetweenSearchParams(this.arrWhere);\r\n    return this.dbConnector.dbStore.db[this.table].where(betweenSearchParams.field)\r\n      .between(betweenSearchParams.lowerBound, betweenSearchParams.upperBound, betweenSearchParams.includeLower, betweenSearchParams.includeUpper)\r\n      .toArray();\r\n  }\r\n\r\n  /**\r\n   * Gets entire collection with Dexie\r\n   */\r\n  private async dexieFullCollection(): Promise<Array<E>> {\r\n    return this.dbConnector.dbStore.db[this.table].toArray();\r\n  }\r\n\r\n  /**\r\n   * Performs a comples select action that is not supported natively by IndexedDB (and so Dexie)\r\n   */\r\n  private complexSelect(): Promise<Array<E>> {\r\n\r\n    this.arrWhere.forEach(arrWhere =>\r\n      this.dexieFilters.push(QueryHelper.buildFilter4Dexie(arrWhere))\r\n    );\r\n\r\n    let all_records = this.dbConnector.dbStore.db[this.table].toCollection();\r\n    const filter = QueryHelper.chainFilters(this.dexieFilters, this.logic);\r\n    all_records = all_records.and(filter);\r\n\r\n    this.handleDebug('SELECT', 'WHERE', this.arrWhere);\r\n\r\n    if (this.orderBy)\r\n      return all_records.sortBy(this.orderBy);\r\n\r\n    return all_records.toArray();\r\n  }\r\n\r\n  // INSERT\r\n\r\n  /**\r\n   * Inserts a new element using `put` method of Dexie\r\n   */\r\n  public async insert(): Promise<void> {\r\n    this.handleDebug('INSERT', 'WITH OBJECT', this.element);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].put(this.element);\r\n  }\r\n\r\n  // UPDATE\r\n\r\n  /**\r\n   * Updates and element using the `update` method of Dexie\r\n   */\r\n  public async update(): Promise<void> {\r\n\r\n    this.handleDebug('UPDATE', 'WITH OBJECT', this.element);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].update(this.element[this.dbConnector.DS[this.section].pk], this.element);\r\n  }\r\n\r\n  // COUNT\r\n\r\n  /**\r\n   * Counts the number of items in a collection with Dexie\r\n   */\r\n  public count(): Promise<number> {\r\n    return this.collection.count();\r\n  }\r\n\r\n  // DELETE\r\n\r\n  /**\r\n   * Deletes one or more elements with the `where` clause of Dexie\r\n   */\r\n  public async delete(): Promise<void> {\r\n\r\n    const fieldNValues = QueryHelper.buildArrayFildsNValues(this.arrWhere);\r\n\r\n    this.handleDebug('DELETE', 'WHERE', this.arrWhere);\r\n\r\n    await this.dbConnector.dbStore.db[this.table].where(fieldNValues).delete();\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears the entire db!!!\r\n   */\r\n  public async clearDb(): Promise<void> {\r\n    const promises = [];\r\n    for (const section in this.dbConnector.DS)\r\n      if (this.dbConnector.DS[section].name) promises.push(this.dbConnector.dbStore.db[this.dbConnector.DS[section].name].clear());\r\n\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /**\r\n   * Clears an entire table!!!\r\n   */\r\n  public async clearTable(): Promise<void> {\r\n    await this.dbConnector.dbStore.db[this.table].clear();\r\n  }\r\n\r\n  /**\r\n   * Logs useful information in the console if `debug` is true\r\n   */\r\n  private handleDebug<T>(action: string, typeToShow: string, toShow: T): void {\r\n    if (this.debug)\r\n      Logger.raw(`EXECUTING ${action} FOR TABLE ${this.table} ${typeToShow} `, toShow);\r\n  }\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements the deletor for IndexedDB\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section of the element to delete\r\n   * @param args the arguments for the query, must include the primary key (`pk`) value\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Perform the delete action on the given element.\r\n   */\r\n  public async autoDelete(): Promise<void> {\r\n    if (this.args[this.dbConnector.DS[this.section].pk]) {\r\n      const aliasElementToDelete = this.args[this.dbConnector.DS[this.section].pk];\r\n      await new QueryMaker(this.dbConnector, this.section)\r\n        .addWhere([this.dbConnector.DS[this.section].pk as string, '=', aliasElementToDelete])\r\n        .delete();\r\n    } else\r\n      Logger.error('Error in autoDelete', 'No PK value was found on the element');\r\n  }\r\n\r\n  public async clearSection(): Promise<void> {\r\n    await new QueryMaker(this.dbConnector, this.section)\r\n      .clearTable();\r\n  }\r\n\r\n}\r\n","import { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbStore } from 'app/libs/db-connector/plugins/indexed-db/db-store/dbstore.class';\r\nimport Dexie from 'dexie';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use IndexedDB as plugin\r\n */\r\nexport const INDEXEDDB_PLUGIN: DbObjects<any, Dexie> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements insertor for IndexedDB\r\n */\r\nexport class DbInsertor<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db insertor.\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: Array<E> | E\r\n  ) { }\r\n\r\n  /**\r\n   * Makes sure that all necessary fields are set and performs the insert\r\n   */\r\n  public autoInsert(): Promise<void> {\r\n    if (this.element instanceof Array) {\r\n      return this.insertMany();\r\n    } else {\r\n      return this.insertOne();\r\n    }\r\n  }\r\n\r\n  private insertMany(): Promise<void> {\r\n    const table = this.dbConnector.DS[this.section].name;\r\n    return this.dbConnector.dbStore.db[table].bulkPut(this.element);\r\n  }\r\n\r\n\r\n  private insertOne(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .insert()\r\n      .catch(err => { Logger.error('Error in autoinsert: ', err); });\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements selector for IndexedDB\r\n */\r\nexport class DbSelector<E> implements Selector<E> {\r\n  private data: Array<E> = [];\r\n  private qe: QueryMaker<E>;\r\n\r\n  /**\r\n   * Creates an instance of db selector.\r\n   * @param section the section from which to query data\r\n   * @param [args] the optional arguments of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private args?: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Retrieves only one element\r\n   */\r\n  public async single(): Promise<E> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    await this.executeSelect();\r\n\r\n    return this.data[0];\r\n  }\r\n\r\n  /**\r\n   * Retrieves multiple elements, returns them in an `Array`\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    this.setUpSelect();\r\n    this.setQuery();\r\n    this.setOrder();\r\n\r\n    await this.executeSelect();\r\n\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Counts all elements in the section\r\n   * \r\n   * @remarks does not take into consideration argumeents\r\n   */\r\n  public async count(): Promise<number> {\r\n    return new QueryMaker(this.dbConnector, this.section).count();\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of `QueryMaker`\r\n   * \r\n   * @see QueryMaker\r\n   */\r\n  private setUpSelect(): void {\r\n    this.qe = new QueryMaker(this.dbConnector, this.section);\r\n  }\r\n\r\n  /**\r\n   * If the `pk` value is set, it is added as a query argument\r\n   */\r\n  private setQuery(): void {\r\n    if (!this.args)\r\n      return;\r\n\r\n    if (this.args[this.dbConnector.DS[this.section].pk])\r\n      this.qe.addWhere([this.dbConnector.DS[this.section].pk, '=', this.args[this.dbConnector.DS[this.section].pk]]);\r\n  }\r\n\r\n  /**\r\n   * Sets the order of the results\r\n   */\r\n  private setOrder(): void {\r\n    this.qe.setOrderBy(this.dbConnector.DS[this.section].orderBy);\r\n  }\r\n\r\n  /**\r\n   * Executes the select command\r\n   */\r\n  private async executeSelect(): Promise<void> {\r\n    this.data = await this.qe.select();\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Updator } from 'app/libs/db-connector/models/executers';\r\nimport { QueryMaker } from 'app/libs/db-connector/plugins/indexed-db/query-makers/query-maker.class';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport Dexie from 'dexie';\r\n\r\n/**\r\n * Implements updator for IndexedDb\r\n */\r\nexport class DbUpdator<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Creates an instance of db updator.\r\n   * @param section the section of the element to update\r\n   * @param element the full element updated\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Dexie>,\r\n    private section: keyof AbstractModel,\r\n    private element: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Calls `QueryMaker` and updates the element\r\n   */\r\n  public autoUpdate(): Promise<void> {\r\n    return new QueryMaker(this.dbConnector, this.section, this.element)\r\n      .update()\r\n      .catch(err => { Logger.error('Error in autoUpdate', err); });\r\n  }\r\n\r\n}\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { LocalProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { CLIENT_SECTIONS } from 'app/data/system-local-db/client-sections.enum';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Loads the list of projects on the current device\r\n */\r\nexport class ProjectsListLoader {\r\n\r\n  /**\r\n   * The list of projects to sore in the current state\r\n   */\r\n  private projectList: Array<LocalProjectSettings> = [];\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB and adds them to the current state\r\n   */\r\n  public async load(): Promise<void> {\r\n    await this.loadFromLocalDB();\r\n    this.dispatchProjectList(this.projectList);\r\n  }\r\n\r\n  /**\r\n   * Loads the projects from IndexedDB with db-connector\r\n   */\r\n  private async loadFromLocalDB(): Promise<void> {\r\n    this.projectList = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects).multiple();\r\n  }\r\n\r\n  /**\r\n   * Dispatchs the project list to the current state\r\n   */\r\n  private dispatchProjectList(payload: Array<LocalProjectSettings>): void {\r\n    store.dispatch(({ type: REDUX_ACTIONS.setProjectList, payload }));\r\n  }\r\n\r\n}\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { CLIENT_SEZ_DEFINITIONS, previousVersions } from 'app/data/system-local-db/client-sections.enum';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { INDEXEDDB_PLUGIN } from 'app/libs/db-connector/plugins/indexed-db/exporter.constant';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\nimport React from 'react';\r\n\r\nexport class Startupper {\r\n\r\n  /**\r\n   * The name of the IndexedDB for system data\r\n   */\r\n  private systemDbName = 'anitaDB';\r\n\r\n  public async init(): Promise<void> {\r\n    Logger.info('Anita web app.');\r\n    await this.initSystemIndexedDb(this.systemDbName);\r\n    this.setLoggerDebug();\r\n    this.loadProjectList();\r\n  }\r\n\r\n  /**\r\n   * Inits IndexedDB for system data\r\n   */\r\n  private async initSystemIndexedDb(indexedDbName: string): Promise<void> {\r\n    dbInstances.system = await new DbConnector(INDEXEDDB_PLUGIN, { previousVersions, indexedDbName }, CLIENT_SEZ_DEFINITIONS, false).init();\r\n  }\r\n\r\n  /**\r\n   * Detect if React is in development mode\r\n   */\r\n  private isReactDev(): boolean {\r\n    return '_self' in React.createElement('div');\r\n  }\r\n\r\n  /**\r\n   * Sets logger debug\r\n   */\r\n  private setLoggerDebug(): void {\r\n    Logger.debug = this.isReactDev();\r\n  }\r\n\r\n  /**\r\n   * We need to load the project list for the project selector\r\n   */\r\n  private loadProjectList(): void {\r\n    new ProjectsListLoader().load();\r\n  }\r\n\r\n}","import {\r\n  FileSystemDirectoryHandle,\r\n  FileSystemFileHandle,\r\n  FileSystemWriteChunkType,\r\n  WindowFS\r\n  } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\n\r\ndeclare const window: WindowFS;\r\n\r\n/**\r\n * Open a handle to an existing file on the local file system.\r\n */\r\nexport function getFileHandle(): Promise<Array<FileSystemFileHandle>> {\r\n  return window.showOpenFilePicker({ multiple: false });\r\n}\r\n\r\n/**\r\n * Open a handle to an existing file on the local file system.\r\n */\r\nexport function getDirectoryHandle(): Promise<FileSystemDirectoryHandle> {\r\n  return window.showDirectoryPicker();\r\n}\r\n\r\n/**\r\n * Reads the file content from a fileHandle and returns it as a string.\r\n */\r\nexport async function readFileHandleAsText(fileHandle: FileSystemFileHandle): Promise<string> {\r\n  const file = await fileHandle.getFile() as any; // as any because .text not yet documented in TS\r\n  return file.text();\r\n}\r\n\r\n/**\r\n * Reads the file content from a fileHandle and returns it as a Uint8Array.\r\n */\r\nexport async function readDirFileAsUint8Array(dirHandle: FileSystemDirectoryHandle, fileName: string): Promise<Uint8Array> {\r\n  const fileHandle = await dirHandle.getFileHandle(fileName, { create: true });\r\n  const file = await fileHandle.getFile();\r\n  const arrayBuffer = await file.arrayBuffer();\r\n  return new Uint8Array(arrayBuffer);\r\n}\r\n\r\n/**\r\n * Create a handle to a new (text) file on the local file system.\r\n */\r\nexport function getNewFileHandle(\r\n  name: string = '',\r\n  description: string = 'Anita project data file',\r\n  accept: { [mimeType: string]: Array<string> } = { 'application/json': ['.json'] }\r\n): Promise<FileSystemFileHandle> {\r\n  const opts = {\r\n    types: [{\r\n      name,\r\n      description,\r\n      accept\r\n    }]\r\n  };\r\n  return window.showSaveFilePicker(opts);\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nexport function readFile(file: any): Promise<string> {\r\n  // If the new .text() reader is available, use it.\r\n  if (file.text) {\r\n    return file.text();\r\n  }\r\n  // Otherwise use the traditional file reading technique.\r\n  return _readFileLegacy(file) as Promise<string>;\r\n}\r\n\r\n/**\r\n * Reads the raw text from a file.\r\n */\r\nfunction _readFileLegacy(file: any): Promise<string> {\r\n  return new Promise(resolve => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('loadend', e => {\r\n      const text = e.target.result;\r\n      resolve(text as string);\r\n    });\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n\r\n/**\r\n * Writes the contents to disk.\r\n */\r\nexport async function writeFile(fileHandle: FileSystemFileHandle, contents: FileSystemWriteChunkType): Promise<void> {\r\n  // For Chrome 83 and later.\r\n  // Create a FileSystemWritableFileStream to write to.\r\n  const writable = await fileHandle.createWritable();\r\n  // Write the contents of the file to the stream.\r\n  await writable.write(contents);\r\n  // Close the file and write the contents to disk.\r\n  await writable.close();\r\n}\r\n\r\n/**\r\n * Verify the user has granted permission to read or write to the file, if\r\n * permission hasn't been granted, request permission.\r\n */\r\nexport async function verifyPermission(fileHandle: FileSystemFileHandle, withWrite: boolean): Promise<boolean> {\r\n  const opts = {} as any;\r\n  if (withWrite) {\r\n    opts.writable = true;\r\n    opts.mode = 'readwrite';\r\n  }\r\n  // Check if we already have permission, if so, return true.\r\n  if (await fileHandle.queryPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // Request permission to the file, if the user grants permission, return true.\r\n  if (await fileHandle.requestPermission(opts) === 'granted') {\r\n    return true;\r\n  }\r\n  // The user did nt grant permission, return false.\r\n  return false;\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { writeFile } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\n/**\r\n * Saves the `AnitaUniversalDataStorage` to the file a file on disk by using the fileHandle stored in this.dbConnector.options.projectInfo.fileHandle.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n */\r\nexport class ProjectFileHandleSaver {\r\n\r\n  /**\r\n   * The string data to sabe in the file on disk\r\n   */\r\n  private data: string;\r\n\r\n  /**\r\n   * Creates an instance of project file handle saver.\r\n   * @param projectData full data of the project to be saved\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project both on file and in IndexedDB\r\n   */\r\n  public async save(): Promise<void> {\r\n    this.setData();\r\n    await this.saveDataToDisk();\r\n  }\r\n\r\n  /**\r\n   * Converts the project data to string\r\n   */\r\n  private setData(): void {\r\n    this.data = JSON.stringify(this.dbConnector.dbStore.db);\r\n  }\r\n\r\n  /**\r\n   * Actually saves the data to disk by calling writeFile\r\n   * \r\n   * @see writeFile\r\n   */\r\n  private saveDataToDisk(): Promise<void> {\r\n    return writeFile(this.dbConnector.options.projectInfo.fileHandle, this.data);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\nimport { ProjectFileHandleSaver } from 'app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class';\r\n\r\n/**\r\n * Implements deletor for MySql\r\n */\r\nexport class DbDeletor<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section on which to perform the query\r\n   * @param args the args of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E>\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes an element from the collection\r\n   */\r\n  public async autoDelete(): Promise<any> {\r\n\r\n    if (!Object.keys(this.args).length)\r\n      return 'Fatal error: trying to delete without any parameter';\r\n\r\n    const indexElement = this.dbConnector.dbStore.db[this.section].findIndex(ele => ele.id === this.args['id']);\r\n    // Remove the element from the collection\r\n    this.dbConnector.dbStore.db[this.section].splice(indexElement, 1);\r\n    await new ProjectFileHandleSaver(this.dbConnector).save();\r\n  }\r\n\r\n  public async clearSection(): Promise<void> {\r\n    this.dbConnector.dbStore.db[this.section].length = 0;\r\n    await new ProjectFileHandleSaver(this.dbConnector).save();\r\n  }\r\n\r\n}\r\n","/**\r\n * Algorithm used for encryption.\r\n */\r\nexport const securePassEncrypter = '286b88f2ceb76ce1e7d28117bb2a7659';\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Encrypts a string\r\n *\r\n * @param value the value to encrypt\r\n * @param keyToUse the key to use for encryption\r\n * @return the encrypted string\r\n */\r\nexport function stringCrypter(value: string, keyToUse: string): string {\r\n  const encrypted = CryptoES.AES.encrypt(value, keyToUse);\r\n  return encrypted.toString();\r\n}\r\n","import CryptoES from 'crypto-es';\r\n\r\n/**\r\n * Decrypts a string\r\n *\r\n * @param value the value to decrypt\r\n * @param keyToUse the key to use for decryption\r\n * @return the decrypted string\r\n */\r\nexport function stringDecrypter(value: string, keyToUse: string): string {\r\n  const decrypted = CryptoES.AES.decrypt(value, keyToUse);\r\n  return decrypted.toString();\r\n}\r\n","import { securePassEncrypter } from 'app/libs/db-connector/crypter/options.constant';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\n\r\n/**\r\n * Common methods needed to crypt and decrypt data, when data encryption in the DB is enabled.\r\n */\r\nexport class CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * User keys stored as static Object for fast retrieval from memory.\r\n   * The key of the Object is the string concatenation of the user and the undecrypted key to avoid collisions between projects/users.\r\n   */\r\n  private static userKeys: { [keyIdentifier: string]: string } = {};\r\n  private owner: string;\r\n  private undecryptedKey: string;\r\n  private keyIdentifier: string;\r\n\r\n  /**\r\n   * Encrypts the user key using the securePassEncrypter.\r\n   */\r\n  public static decryptUserKey(keyToEncrypt: string): string {\r\n    return stringCrypter(keyToEncrypt, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of Decrypter.\r\n   * @param dbConnector Instance of DbConnector.\r\n   * @param section the section definition, needed to know which fields should be decrypted.\r\n   * @param element the element to be decrypted.\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<DbTypes>,\r\n    protected section: keyof AbstractModel,\r\n    protected element: E\r\n  ) { }\r\n\r\n  /**\r\n   * Returns the unencrypted key of the owner of the element, if an emcrypted key for the user was provided when initializing DbInit.\r\n   */\r\n  protected getUserKey(): string {\r\n    this.setOwner();\r\n    this.setUndecryptedKey();\r\n\r\n    if (!this.undecryptedKey)\r\n      return undefined;\r\n\r\n    this.makeKeyIdentifier();\r\n\r\n    if (CryptHelper.userKeys[this.keyIdentifier])\r\n      return this.returnUserUnencryptedKey();\r\n\r\n    this.decryptUserKey();\r\n\r\n    return this.returnUserUnencryptedKey();\r\n  }\r\n\r\n  /**\r\n   * Logs no key error.\r\n   */\r\n  protected logNoKeyError(): void {\r\n    Logger.error(`ERROR: skipping encryption as no key was found for user ${this.owner}. Did you forget to pass the user key in the options when initializing DbInit?`);\r\n  }\r\n  /**\r\n   * Sets the id of the owner of the element being processed.\r\n   */\r\n  private setOwner(): void {\r\n    this.owner = this.element[this.dbConnector.DS[this.section].ownerIdentifier];\r\n  }\r\n\r\n  /**\r\n   * Sets the undecrypted key of the owner if one was found in dbConnector.options, otherwise `undefined`\r\n   */\r\n  private setUndecryptedKey(): void {\r\n    this.undecryptedKey = (typeof this.dbConnector.options.encryptionKeys === 'object' && this.dbConnector.options.encryptionKeys[this.owner]) ? this.dbConnector.options.encryptionKeys[this.owner] : undefined;\r\n  }\r\n\r\n  /**\r\n   * Makes the identifier of the unencryyypted key by concatenating the `string` of the `owner` and the `string` of the encrypted key.\r\n   */\r\n  private makeKeyIdentifier(): void {\r\n    this.keyIdentifier = `${this.owner}${this.undecryptedKey}`;\r\n  }\r\n\r\n  /**\r\n   * Decrypts the user key using the securePassEncrypter.\r\n   */\r\n  private decryptUserKey(): void {\r\n    CryptHelper.userKeys[this.keyIdentifier] = stringDecrypter(this.undecryptedKey, securePassEncrypter);\r\n  }\r\n\r\n  /**\r\n   * Returns the user unencrypted key retrieving it from the store in memory.\r\n   */\r\n  private returnUserUnencryptedKey(): string {\r\n    return CryptHelper.userKeys[this.keyIdentifier];\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringCrypter } from 'app/libs/db-connector/crypter/string-crypter.function';\r\n\r\n/**\r\n * Encrypts one element at a time.\r\n */\r\nexport class Encrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to encrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.encrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Encrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for encryption.\r\n   * @param fieldName the key of the field to encrypt.\r\n   */\r\n  private encrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringCrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { ProjectFileHandleSaver } from 'app/libs/db-connector/plugins/file-handles/helpers/project-file-handle-saver.class';\r\n\r\nexport class ElementAdderToCollection<E> {\r\n\r\n  private index: number;\r\n  protected element: Partial<E>;\r\n  /**\r\n   * Creates an instance of db ElementAdderToCollection.\r\n   * @param dbConnector the instance of DbConnector from which ElementAdderToCollection is called\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    protected section: keyof AbstractModel,\r\n    protected elements: Array<Partial<E>> | Partial<E>\r\n  ) { }\r\n\r\n  protected async save(): Promise<void> {\r\n    this.setSectionStore();\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        this.processElement(element);\r\n    } else {\r\n      this.processElement(this.elements);\r\n    }\r\n    await new ProjectFileHandleSaver(this.dbConnector).save();\r\n  }\r\n\r\n  /**\r\n   * Sets an ampty array is the project did not have one already\r\n   */\r\n  private setSectionStore(): void {\r\n    if (!this.dbConnector.dbStore.db[this.section])\r\n      this.dbConnector.dbStore.db[this.section] = [];\r\n  }\r\n\r\n  private processElement(element: Partial<E>): void {\r\n    this.element = element;\r\n    this.checkIfElementInStoreAndSetIndex();\r\n    this.addToStore();\r\n  }\r\n\r\n  /**\r\n   * Sets the index of the element being saved if it was already in the store, else assigns the lenght of the array to push it at the end.\r\n   *\r\n   * @remarks The index is used by `addToStore` to replace the existing element with the new one when in edit mode.\r\n   */\r\n  protected checkIfElementInStoreAndSetIndex(): void {\r\n    const elements = this.dbConnector.dbStore.db[this.section] as Array<SectionElement>;\r\n    const check = elements.findIndex(ele => this.element[this.dbConnector.DS[this.section].pk] === ele[this.dbConnector.DS[this.section].pk]);\r\n    this.index = (check >= 0) ? check : elements.length;\r\n  }\r\n\r\n  /**\r\n   * Adds the element to the end of the store if it's a new element, otherwise replaces the existing element.\r\n   */\r\n  private addToStore(): void {\r\n    this.dbConnector.dbStore.db[this.section][this.index] = this.element as unknown as SectionElement;\r\n  }\r\n\r\n}\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements insertor for MySql\r\n */\r\nexport class DbInsertor<E> extends ElementAdderToCollection<E> implements Insertor<E> {\r\n\r\n  /**\r\n   * Adds an element to the collection\r\n   */\r\n  public async autoInsert(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption with Encrypter\r\n   * \r\n   * @see Encrypter\r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        await new Encrypter(this.dbConnector, this.section, element).do();\r\n    } else {\r\n      await new Encrypter(this.dbConnector, this.section, this.elements).do();\r\n    }\r\n  }\r\n\r\n}\r\n","import { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { CryptHelper } from 'app/libs/db-connector/crypter/crypt-helper.class';\r\nimport { stringDecrypter } from 'app/libs/db-connector/crypter/string-decrypter.function';\r\n\r\n/**\r\n * Decrypts one element at a time.\r\n */\r\nexport class Decrypter<E, DbTypes> extends CryptHelper<E, DbTypes> {\r\n\r\n  /**\r\n   * Retrieves the key to decrypt and loops over all fields to decrypt.\r\n   */\r\n  public async do(): Promise<void> {\r\n    const keyToUse = this.getUserKey();\r\n\r\n    if (keyToUse === undefined)\r\n      return this.logNoKeyError();\r\n\r\n    for (const fieldName in this.element)\r\n      if (!Object.values(RESERVED_FIELDS).includes(fieldName as any))\r\n        this.decrypt(keyToUse, fieldName);\r\n  }\r\n\r\n  /**\r\n   * Decrypts the value of the given key.\r\n   *\r\n   * @param keyToUse the key to be used for decryption.\r\n   * @param fieldName the key of the field to decrypt.\r\n   */\r\n  private decrypt(keyToUse: string, fieldName: string): void {\r\n    if (this.element[fieldName])\r\n      this.element[fieldName] = stringDecrypter(this.element[fieldName], keyToUse);\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { Decrypter } from 'app/libs/db-connector/crypter/decrypter.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\n\r\nexport class DbSelector<E> implements Selector<E> {\r\n\r\n  private results: Array<any>;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<AnitaUniversalDataStorage>,\r\n    private section: keyof AbstractModel,\r\n    private args: Partial<E> = {}\r\n  ) { }\r\n\r\n  /**\r\n   * Gets one element with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async single(): Promise<E> {\r\n    await this.doSelect();\r\n\r\n    if (!this.results.length)\r\n      return;\r\n\r\n    return this.results.find(ele => this.filterKeys(ele));\r\n  }\r\n\r\n  private filterKeys(eleToCheck: E): boolean {\r\n    const keys = Object.keys(this.args);\r\n    let res = true;\r\n    let counter = 0;\r\n    while (res && counter < keys.length) {\r\n      res = eleToCheck[keys[counter]] === this.args[keys[counter]];\r\n      counter++;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Gets multiple elements in an Array with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    await this.doSelect();\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * Counts elements calling multiple and then calling `Array.lenght`\r\n   * @see multiple\r\n   */\r\n  public async count(): Promise<number> {\r\n    await this.multiple();\r\n    return this.results.length;\r\n  }\r\n\r\n  /**\r\n   * Builds the query with QueryMaker and runs it with executeQuery\r\n   * \r\n   * @see QueryMaker\r\n   * @see executeQuery\r\n   */\r\n  private async doSelect(): Promise<void> {\r\n    this.results = this.dbConnector.dbStore.db[this.section] && this.dbConnector.dbStore.db[this.section].length ? this.dbConnector.dbStore.db[this.section] : [];\r\n    await this.handleDecryption();\r\n  }\r\n\r\n  /**\r\n   * Handles decryption\r\n   * \r\n   * @see Decrypter \r\n   */\r\n  private async handleDecryption(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted && this.results.length)\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < this.results.length; i++)\r\n        await new Decrypter(this.dbConnector, this.section, this.results[i]).do();\r\n  }\r\n\r\n}\r\n","import { DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemDirectoryHandle, FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getDirectoryHandle, getNewFileHandle, verifyPermission } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\n/**\r\n * Uses the fileHandle stored in IndexedDB, if any, or asks for a new one \r\n */\r\nexport async function fileHandleChecker(\r\n  options: DsDbInitOptions,\r\n  description?: string,\r\n  accept?: { [mimeType: string]: Array<string> }\r\n): Promise<FileSystemFileHandle> {\r\n  if (!options.projectInfo.fileHandle)\r\n    return await getNewFileHandle(`anita-fh-${options.projectInfo.id}`, description, accept);\r\n\r\n  await verifyPermission(options.projectInfo.fileHandle, true);\r\n  return options.projectInfo.fileHandle;\r\n\r\n}\r\n\r\nexport async function dirHandleChecker(\r\n  options: DsDbInitOptions,\r\n  description?: string,\r\n  accept?: { [mimeType: string]: Array<string> }\r\n): Promise<FileSystemDirectoryHandle> {\r\n  if (!options.projectInfo.fileHandle)\r\n    return await getDirectoryHandle();\r\n\r\n  await verifyPermission(options.projectInfo.fileHandle, true);\r\n  return options.projectInfo.fileHandle as any as FileSystemDirectoryHandle;\r\n\r\n}\r\n","import { AdditionalInfoForLocalStorage, AnitaUniversalDataStorage, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { DataStructureExtender } from 'app/data/system-local-db/data-structure-extender.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { fileHandleChecker } from 'app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function';\r\nimport { readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\n\r\nexport class DbStore implements DbStoreInterface<AnitaUniversalDataStorage> {\r\n\r\n  /**\r\n   * Project data\r\n   */\r\n  public db: AnitaUniversalDataStorage = {\r\n    [RESERVED_AUDS_KEYS._settings]: [],\r\n    [RESERVED_AUDS_KEYS._sections]: []\r\n  };\r\n\r\n  /**\r\n   * Contents of project file as string\r\n   */\r\n  private contents: string;\r\n\r\n  constructor(\r\n    private options: DsDbInitOptions,\r\n    private DS: AbstractModel\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<AnitaUniversalDataStorage>> {\r\n\r\n    if (!this.options.projectInfo)\r\n      throw new Error('No projectInfo passed to DbConnector.\\nTo retrieve a project from a local file, pass the an Object of type LocalProjectSettings as value of projectInfo to the options of DbConnector');\r\n\r\n    const fileHandle = await fileHandleChecker(this.options);\r\n\r\n    // If the project already had a FileHandle, the data file already existed so we read it and load it\r\n    if (this.options.projectInfo.fileHandle)\r\n      await this.initializeExistingProject();\r\n    // Otherwise, we are inizializing a new project, so we store in memory the fileHandle, which will be saved by postProjectCreation when saving the project\r\n    else\r\n      this.options.projectInfo.fileHandle = fileHandle;\r\n\r\n    return this;\r\n  }\r\n\r\n  public async postProjectCreation(): Promise<AdditionalInfoForLocalStorage> {\r\n    await this.initializeExistingProject();\r\n    return { fileHandle: this.options.projectInfo.fileHandle };\r\n  }\r\n\r\n  public async postProjectUpdate(): Promise<AdditionalInfoForLocalStorage> {\r\n    return { fileHandle: this.options.projectInfo.fileHandle };\r\n  }\r\n\r\n  public close(): void {\r\n    // NOT NEEDED\r\n  }\r\n\r\n  public async initializeExistingProject(): Promise<void> {\r\n    await this.doReadFile();\r\n    this.parseFileContents();\r\n    this.makedDS();\r\n  }\r\n\r\n  /**\r\n   * Loads file from disk using the fileHandle retrieved from IndexedDB\r\n   */\r\n  private async doReadFile(): Promise<void> {\r\n    this.contents = await readFileHandleAsText(this.options.projectInfo.fileHandle);\r\n  }\r\n\r\n  /**\r\n   * Parses the string file content as data\r\n   */\r\n  private parseFileContents(): void {\r\n    this.db = JSON.parse(this.contents);\r\n  }\r\n\r\n  /**\r\n   * Extends DS (DataStructure) with the sections of the project so that FormDataParserService correctly pares FormData\r\n   *\r\n   * @see FormDataParserService\r\n   * @see DataStructureExtender\r\n   */\r\n  private makedDS(): void {\r\n    Object.assign(this.DS, new DataStructureExtender(this.db[RESERVED_AUDS_KEYS._sections]).extend());\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbStore } from './db-store/dbstore.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use MySql as plugin\r\n */\r\nexport const FILE_HANDLES_PLUGIN: DbObjects<any, AnitaUniversalDataStorage> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { Updator } from 'app/libs/db-connector/models/executers';\r\nimport { ElementAdderToCollection } from 'app/libs/db-connector/plugins/file-handles/helpers/element-adder-to-collection.class';\r\n\r\n/**\r\n * Implements updator for MySql\r\n */\r\nexport class DbUpdator<E> extends ElementAdderToCollection<E> implements Updator<E> {\r\n\r\n  /**\r\n   * Updates an element in the collection\r\n   */\r\n  public async autoUpdate(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    await this.save();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption\r\n   * \r\n   * @see Encrypter \r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        await new Encrypter(this.dbConnector, this.section, element).do();\r\n    } else {\r\n      await new Encrypter(this.dbConnector, this.section, this.elements).do();\r\n    }\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport { cloneDeep } from 'lodash';\r\nimport * as mysql from 'mysql';\r\nimport { Database } from 'sql.js';\r\nimport squel from 'squel';\r\n\r\nexport interface WhereArgs {\r\n  field: string;\r\n  operator: string;\r\n  value: number | string;\r\n}\r\n\r\n/**\r\n * Prepares queries to be executed on a MySql DB\r\n */\r\nexport class QueryMaker {\r\n\r\n  /**\r\n   * Creates an instance of query maker.\r\n   * @param section the section on which to run the qeury\r\n   * @param [element] optional element on which to run the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<mysql.Connection | Database>,\r\n    private section: keyof AbstractModel,\r\n    private element?: Object | Array<Object>\r\n  ) { }\r\n\r\n  /**\r\n   * Builds the `SELECT` query\r\n   */\r\n  public select(whereArgs: Array<WhereArgs> = []): string {\r\n    const obj = squel.select({ autoQuoteTableNames: true, autoQuoteFieldNames: true }).from(this.dbConnector.DS[this.section].name);\r\n    if (whereArgs.length)\r\n      whereArgs.forEach(whereArg => obj.where(`${whereArg.field} ${whereArg.operator} ?`, whereArg.value));\r\n    return obj.toString();\r\n  }\r\n\r\n  public count(whereArgs: Array<WhereArgs> = []): string {\r\n    const obj = squel\r\n      .select({ autoQuoteTableNames: true, autoQuoteFieldNames: false })\r\n      .field('COUNT(*) as count')\r\n      .from(this.dbConnector.DS[this.section].name);\r\n    if (whereArgs.length)\r\n      whereArgs.forEach(whereArg => obj.where(`${whereArg.field} ${whereArg.operator} ?`, whereArg.value));\r\n    return obj.toString();\r\n  }\r\n\r\n  /**\r\n   * Builds the `INSERT` query\r\n   */\r\n  public insert(): string {\r\n    if (this.element instanceof Array)\r\n      return this.insertMany();\r\n    else\r\n      return this.insertOne();\r\n  }\r\n\r\n  private insertOne(): string {\r\n    const element = { ...this.element };\r\n    for (const prop in element)\r\n      this.fieldsRemoverIfThereIsNoColumn(element, prop);\r\n\r\n    return squel.insert({ autoQuoteTableNames: true, autoQuoteFieldNames: true })\r\n      .into(this.dbConnector.DS[this.section].name)\r\n      .setFields(element)\r\n      .toString();\r\n  }\r\n\r\n  private insertMany(): string {\r\n    const elements = cloneDeep(this.element) as Array<Object>;\r\n    elements.forEach(element => {\r\n      for (const prop in element)\r\n        this.fieldsRemoverIfThereIsNoColumn(element, prop);\r\n    });\r\n\r\n    return squel.insert({ autoQuoteTableNames: true, autoQuoteFieldNames: true })\r\n      .into(this.dbConnector.DS[this.section].name)\r\n      .setFieldsRows(elements)\r\n      .toString();\r\n  }\r\n\r\n  /**\r\n   * Builds the `UPDATE` query\r\n   */\r\n  public update(): string {\r\n    const element = { ...this.element };\r\n\r\n    for (const prop in element)\r\n      if (prop !== this.dbConnector.DS[this.section].pk) {\r\n        this.fieldsRemoverIfThereIsNoColumn(element, prop);\r\n      }\r\n    const obj = squel\r\n      .update({ autoQuoteTableNames: true, autoQuoteFieldNames: true })\r\n      .table(this.dbConnector.DS[this.section].name)\r\n      .setFields(element);\r\n    const pk = this.dbConnector.DS[this.section].pk as string;\r\n    obj.where(`${pk} = ?`, element[this.dbConnector.DS[this.section].pk]);\r\n\r\n    return obj.toString();\r\n  }\r\n\r\n  /**\r\n   * Builds the `DELETE` query\r\n   */\r\n  public delete(whereArgs: Array<WhereArgs> = []): string {\r\n    const obj = squel.delete({ autoQuoteTableNames: true, autoQuoteFieldNames: true }).from(this.dbConnector.DS[this.section].name);\r\n    if (whereArgs.length)\r\n      whereArgs.forEach(whereArg => obj.where(`${whereArg.field} ${whereArg.operator} ?`, whereArg.value));\r\n    return obj.toString();\r\n  }\r\n\r\n  /**\r\n   * Removes properties for which there is not a column in DB\r\n   */\r\n  private fieldsRemoverIfThereIsNoColumn(element: Object, prop: string): void {\r\n    if (!this.dbConnector.DS[this.section].fields.includes(prop)) {\r\n      delete element[prop];\r\n      Logger.warn(`WARNING: field ${prop} removed because no corresponding column was found in the schema.`);\r\n    }\r\n  }\r\n\r\n}\r\n","import { WhereArgs } from 'app/libs/db-connector/common-helpers/query-maker.class';\r\n\r\n\r\n/**\r\n * Builds where clauses for MySql query string\r\n */\r\nexport class WhereBuilder<E> {\r\n\r\n  /**\r\n   * The where arguments as an Array of WhereArgs { field: string, operator: string, value: string | number }\r\n   */\r\n  protected whereArgs: Array<WhereArgs> = [];\r\n\r\n  /**\r\n   * Creates an instance of where builder.\r\n   * @param args the arguments to use to build the where clauses\r\n   */\r\n  constructor(\r\n    protected args: Partial<E>\r\n  ) {\r\n    this.addWhereFromObj();\r\n  }\r\n\r\n  /**\r\n   * Builds where clauses from an Object. The equals operator `=` is used\r\n   */\r\n  protected addWhereFromObj(): void {\r\n    if (!this.args)\r\n      return;\r\n\r\n    for (const key in this.args)\r\n      this.addWhere(key, this.args[key]);\r\n  }\r\n\r\n  /**\r\n   * Builds the where arguments for the given field, value and oeprator\r\n   */\r\n  private addWhere(field: string, value: any, operator: string = '='): any {\r\n    const params: WhereArgs = {\r\n      field: field,\r\n      operator: operator,\r\n      value: value\r\n    };\r\n    this.whereArgs.push(params);\r\n    return this;\r\n  }\r\n\r\n}\r\n","import { DbConnectorInstance } from 'app/libs/db-connector/models/executers';\r\nimport { Database } from 'sql.js';\r\n\r\nexport async function executeQueryNoReturn(dbConnector: DbConnectorInstance<Database>, query: string): Promise<void> {\r\n  await dbConnector.dbStore.db.run(query);\r\n}","import { FileSystemDirectoryHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { Logger } from 'app/libs/logger/logger.class';\r\nimport { Database } from 'sql.js';\r\n\r\n// We can't write in place to the db, see https://wicg.github.io/file-system-access/#api-filesystemdirectoryhandle-removeentry ISSUE 6\r\nexport async function schemaExporter(db: Database, dirHandle: FileSystemDirectoryHandle, projectId: string): Promise<void> {\r\n  Logger.info('Exporting schema...');\r\n  const binaryArray = db.export();\r\n  const fileHandle = await dirHandle.getFileHandle(`${projectId}.db`, { create: true })\r\n  const writable = await fileHandle.createWritable({ keepExistingData: true });\r\n  await writable.write(binaryArray);\r\n  await writable.close();\r\n}\r\n","import { QueryMaker } from 'app/libs/db-connector/common-helpers/query-maker.class';\r\nimport { WhereBuilder } from 'app/libs/db-connector/common-helpers/where-builder.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Deletor } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemDirectoryHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { executeQueryNoReturn } from 'app/libs/db-connector/plugins/sqlite/helpers/execute-query-no-return.function';\r\nimport { schemaExporter } from 'app/libs/db-connector/plugins/sqlite/helpers/schema-exporter.function';\r\nimport { Database } from 'sql.js';\r\n\r\n/**\r\n * Implements deletor for MySql\r\n */\r\nexport class DbDeletor<E> extends WhereBuilder<E> implements Deletor<E> {\r\n\r\n  /**\r\n   * Creates an instance of db deletor.\r\n   * @param section the section on which to perform the query\r\n   * @param args the args of the query\r\n   */\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Database>,\r\n    private section: keyof AbstractModel,\r\n    args: Partial<E>\r\n  ) {\r\n    super(args);\r\n  }\r\n\r\n  /**\r\n   * Deletes an element from the collection\r\n   */\r\n  public async autoDelete(): Promise<any> {\r\n\r\n    if (!Object.keys(this.args).length)\r\n      return 'Fatal error: trying to delete without any parameter';\r\n\r\n    const query: string = new QueryMaker(this.dbConnector, this.section).delete(this.whereArgs);\r\n    await executeQueryNoReturn(this.dbConnector, query);\r\n\r\n    await schemaExporter(\r\n      this.dbConnector.dbStore.db,\r\n      this.dbConnector.options.projectInfo.fileHandle as any as FileSystemDirectoryHandle,\r\n      this.dbConnector.options.projectInfo.id);\r\n\r\n  }\r\n\r\n  public async clearSection(): Promise<void> {\r\n    // TODO\r\n  }\r\n\r\n}\r\n","import { QueryMaker } from 'app/libs/db-connector/common-helpers/query-maker.class';\r\nimport { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Insertor } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemDirectoryHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { executeQueryNoReturn } from 'app/libs/db-connector/plugins/sqlite/helpers/execute-query-no-return.function';\r\nimport { schemaExporter } from 'app/libs/db-connector/plugins/sqlite/helpers/schema-exporter.function';\r\nimport { cloneDeep } from 'lodash';\r\nimport { Database } from 'sql.js';\r\n\r\n/**\r\n * Implements insertor for MySql\r\n */\r\nexport class DbInsertor<E> implements Insertor<E> {\r\n  protected elements: Array<Partial<E>> | Partial<E>\r\n\r\n  /**\r\n   * Creates an instance of db ElementAdderToCollection.\r\n   * @param dbConnector the instance of DbConnector from which ElementAdderToCollection is called\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<Database>,\r\n    protected section: keyof AbstractModel,\r\n    elements: Array<Partial<E>> | Partial<E>\r\n  ) {\r\n    // We need to cloneDeep as we don't want to modify the original elements when converting props to json\r\n    this.elements = cloneDeep(elements);\r\n  }\r\n\r\n  /**\r\n   * Adds an element to the collection\r\n   */\r\n  public async autoInsert(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    if (this.dbConnector.DS[this.section].jsonFields?.length)\r\n      this.handleJsonFields();\r\n\r\n    const query: string = new QueryMaker(this.dbConnector, this.section, this.elements).insert();\r\n    await executeQueryNoReturn(this.dbConnector, query);\r\n\r\n    await schemaExporter(\r\n      this.dbConnector.dbStore.db,\r\n      this.dbConnector.options.projectInfo.fileHandle as any as FileSystemDirectoryHandle,\r\n      this.dbConnector.options.projectInfo.id);\r\n  }\r\n\r\n  private handleJsonFields(): void {\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        this.handleJsonField(element);\r\n    } else {\r\n      this.handleJsonField(this.elements);\r\n    }\r\n  }\r\n\r\n  private handleJsonField(element: Partial<E>): void {\r\n    for (const jsonField of this.dbConnector.DS[this.section].jsonFields) {\r\n      if (element[jsonField])\r\n        element[jsonField] = JSON.stringify(element[jsonField]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles encryption with Encrypter\r\n   * \r\n   * @see Encrypter\r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        await new Encrypter(this.dbConnector, this.section, element).do();\r\n    } else {\r\n      await new Encrypter(this.dbConnector, this.section, this.elements).do();\r\n    }\r\n  }\r\n\r\n}\r\n","import { Database } from 'sql.js';\r\n\r\nexport async function executeQueryWithReturn(db: Database, query: string): Promise<any> {\r\n  return db.exec(query);\r\n}","import { SqlValue } from 'sql.js';\r\n\r\nexport function serializer<E>(columns: Array<string>, values: Array<Array<SqlValue>>): Array<E> {\r\n  return values.map(row => {\r\n    const objData = {} as E;\r\n    row.forEach((cell, index) => objData[columns[index]] = cell);\r\n    return objData;\r\n  });\r\n}","import { QueryMaker } from 'app/libs/db-connector/common-helpers/query-maker.class';\r\nimport { WhereBuilder } from 'app/libs/db-connector/common-helpers/where-builder.class';\r\nimport { Decrypter } from 'app/libs/db-connector/crypter/decrypter.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Selector } from 'app/libs/db-connector/models/executers';\r\nimport { executeQueryWithReturn } from 'app/libs/db-connector/plugins/sqlite/helpers/execute-query-with-return.function';\r\nimport { serializer } from 'app/libs/db-connector/plugins/sqlite/helpers/serializer.function';\r\nimport { Database } from 'sql.js';\r\n\r\nexport class DbSelector<E> extends WhereBuilder<E> implements Selector<E> {\r\n\r\n  private results: Array<any>;\r\n\r\n  constructor(\r\n    private dbConnector: DbConnectorInstance<Database>,\r\n    private section: keyof AbstractModel,\r\n    args: Partial<E> = {}\r\n  ) {\r\n    super(args);\r\n  }\r\n\r\n  /**\r\n   * Gets one element with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async single(): Promise<E> {\r\n    await this.doSelect();\r\n\r\n    if (this.results.length)\r\n      return this.results[0];\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Gets multiple elements in an Array with doSelect\r\n   * \r\n   * @see doSelect\r\n   */\r\n  public async multiple(): Promise<Array<E>> {\r\n    await this.doSelect();\r\n    return this.results;\r\n  }\r\n\r\n  /**\r\n   * Counts elements calling multiple and then calling `Array.lenght`\r\n   * @see multiple\r\n   */\r\n  public async count(): Promise<number> {\r\n    const query: string = new QueryMaker(this.dbConnector, this.section).count(this.whereArgs);\r\n    const res = await executeQueryWithReturn(this.dbConnector.dbStore.db, query);\r\n\r\n    if (!res.length)\r\n      return 0;\r\n\r\n    return res[0].values[0][0];\r\n  }\r\n\r\n  private async doSelect(): Promise<void> {\r\n    this.count();\r\n    const query: string = new QueryMaker(this.dbConnector, this.section).select(this.whereArgs);\r\n    const res = await executeQueryWithReturn(this.dbConnector.dbStore.db, query);\r\n\r\n    if (!res.length) {\r\n      this.results = [];\r\n      return;\r\n    }\r\n\r\n    this.results = serializer<E>(res[0].columns, res[0].values);\r\n\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleDecryption();\r\n    if (this.dbConnector.DS[this.section].jsonFields?.length)\r\n      this.parseJsonFields();\r\n  }\r\n\r\n  private parseJsonFields(): void {\r\n    this.results.forEach((element: Object) => {\r\n      for (const prop in element)\r\n        if (this.dbConnector.DS[this.section].jsonFields.includes(prop))\r\n          element[prop] = JSON.parse(element[prop]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles decryption\r\n   * \r\n   * @see Decrypter \r\n   */\r\n  private async handleDecryption(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted && this.results.length)\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < this.results.length; i++)\r\n        await new Decrypter(this.dbConnector, this.section, this.results[i]).do();\r\n  }\r\n\r\n}\r\n","import { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbStore } from 'app/libs/db-connector/plugins/sqlite/db-store/dbstore.class';\r\n\r\nexport class SchemaCreator {\r\n\r\n  private sql: string = \"\";\r\n\r\n  constructor(\r\n    private dbStore: DbStore,\r\n    private DS: AbstractModel\r\n  ) { }\r\n\r\n  public async createSchema() {\r\n    for (const table in this.DS)\r\n      this.handleTable(this.DS[table].name, this.DS[table].fields);\r\n    await this.dbStore.db.run(this.sql);\r\n  }\r\n\r\n  public handleTable(table: string, fields: Array<string>): void {\r\n    this.sql += `DROP TABLE IF EXISTS '${table}'; CREATE TABLE '${table}' (${this.createFields(fields)});`;\r\n  }\r\n\r\n  private createFields(fields: Array<string>): string {\r\n    let sql = \"\";\r\n    for (const field of fields) {\r\n      sql += `${field} TEXT,`;\r\n    }\r\n    return sql.substring(0, sql.length - 1);\r\n  }\r\n\r\n}\r\n","import { AdditionalInfoForLocalStorage, Section } from 'app/data/project-structure/project-info';\r\nimport { DataStructureExtender } from 'app/data/system-local-db/data-structure-extender.class';\r\nimport { auds_sections } from 'app/data/system-local-db/sections/auds-sections.const';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbStoreInterface, DsDbInitOptions } from 'app/libs/db-connector/models/executers';\r\nimport { dirHandleChecker } from 'app/libs/db-connector/plugins/file-handles/helpers/file-handle-checker.function';\r\nimport { FileSystemDirectoryHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { readDirFileAsUint8Array } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport { executeQueryWithReturn } from 'app/libs/db-connector/plugins/sqlite/helpers/execute-query-with-return.function';\r\nimport { SchemaCreator } from 'app/libs/db-connector/plugins/sqlite/helpers/schema-creator.class';\r\nimport { schemaExporter } from 'app/libs/db-connector/plugins/sqlite/helpers/schema-exporter.function';\r\nimport { serializer } from 'app/libs/db-connector/plugins/sqlite/helpers/serializer.function';\r\nimport { Database } from 'sql.js';\r\nimport initSqlJs from 'sql.js';\r\n\r\n/** \r\n * With sqlite we need to use the FileSystemDirectoryHandle to create the database file\r\n * Using the FileSystemFileHandle would result in the following error when updating the DB file after the first time:\r\n * \"An operation that depends on state cached in an interface object was made but the state had changed since it was read from disk.\"\r\n */\r\nexport class DbStore implements DbStoreInterface<Database> {\r\n\r\n  /**\r\n   * Project data\r\n   */\r\n  public db: Database;\r\n\r\n  /**\r\n   * Contents of project file as string\r\n   */\r\n  private contents: Uint8Array;\r\n\r\n  constructor(\r\n    private options: DsDbInitOptions,\r\n    private DS: AbstractModel\r\n  ) { }\r\n\r\n  public async initDB(): Promise<DbStoreInterface<Database>> {\r\n\r\n    if (!this.options.projectInfo)\r\n      throw new Error('No projectInfo passed to DbConnector.\\nTo retrieve a project from a local file, pass the an Object of type LocalProjectSettings as value of projectInfo to the options of DbConnector');\r\n\r\n    const fileHandle = await dirHandleChecker(this.options, 'SQLite Project Database', { 'application/x-sqlite3': ['.db'] });\r\n\r\n    // If the project already had a FileHandle, the data file already existed so we read it and load it\r\n    if (this.options.projectInfo.fileHandle)\r\n      await this.initializeExistingProject();\r\n    // Otherwise, we are inizializing a new project, so we store in memory the fileHandle, which will be saved by postProjectCreation when saving the project\r\n    else\r\n      await this.onProjectCreation(fileHandle);\r\n\r\n    return this;\r\n  }\r\n\r\n  public async postProjectCreation(): Promise<AdditionalInfoForLocalStorage> {\r\n    await this.makeDSFromDB();\r\n    return { fileHandle: this.options.projectInfo.fileHandle };\r\n  }\r\n\r\n  public async postProjectUpdate(): Promise<AdditionalInfoForLocalStorage> {\r\n    return { fileHandle: this.options.projectInfo.fileHandle };\r\n  }\r\n\r\n  public close(): void {\r\n    // NOT NEEDED\r\n  }\r\n\r\n  public async initializeExistingProject(): Promise<void> {\r\n    await this.doReadFile();\r\n    await this.loadDB(this.contents);\r\n    await this.makeDSFromDB();\r\n  }\r\n\r\n  private async onProjectCreation(fileHandle: FileSystemDirectoryHandle): Promise<void> {\r\n    Object.assign(this.options.projectInfo, { fileHandle });\r\n    await this.loadDB();\r\n    await new SchemaCreator(this, this.DS).createSchema();\r\n    await schemaExporter(\r\n      this.db,\r\n      this.options.projectInfo.fileHandle as any as FileSystemDirectoryHandle,\r\n      this.options.projectInfo.id\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Loads file from disk using the fileHandle retrieved from IndexedDB\r\n   */\r\n  private async doReadFile(): Promise<void> {\r\n    const fileName = `${this.options.projectInfo.id}.db`;\r\n    this.contents = await readDirFileAsUint8Array(this.options.projectInfo.fileHandle as any as FileSystemDirectoryHandle, fileName);\r\n  }\r\n\r\n  /**\r\n   * Extends DS (DataStructure) with the sections of the project so that FormDataParserService correctly pares FormData\r\n   *\r\n   * @see FormDataParserService\r\n   * @see DataStructureExtender\r\n   */\r\n  private async makeDSFromDB(): Promise<void> {\r\n    const res = await executeQueryWithReturn(this.db, \"SELECT * FROM _sections\");\r\n    const sections = serializer<Section>(res[0].columns, res[0].values);\r\n    sections.forEach((section: any) => {\r\n      auds_sections.jsonFields.forEach((field: string) => {\r\n        section[field] = JSON.parse(section[field]);\r\n      });\r\n    });\r\n    Object.assign(this.DS, new DataStructureExtender(sections).extend());\r\n  }\r\n\r\n  private async loadDB(contents?: Uint8Array): Promise<void> {\r\n    const SQL = await initSqlJs({\r\n      locateFile: () => `${process.env.PUBLIC_URL}/assets/sql-wasm.wasm`\r\n    });\r\n    this.db = new SQL.Database(contents);\r\n  }\r\n\r\n}\r\n","import { DbObjects } from 'app/libs/db-connector/models/executers';\r\nimport { Database } from 'sql.js';\r\nimport { DbDeletor } from './db-deletor/db-deletor.class';\r\nimport { DbInsertor } from './db-insertor/db-insertor.class';\r\nimport { DbSelector } from './db-selector/db-selector.class';\r\nimport { DbStore } from './db-store/dbstore.class';\r\nimport { DbUpdator } from './db-updator/db-updator.class';\r\n\r\n/**\r\n * Constant to be passed to DbInit to use MySql as plugin\r\n */\r\nexport const SQLITE_PLUGIN: DbObjects<any, Database> = {\r\n  insertor: DbInsertor,\r\n  selector: DbSelector,\r\n  updator: DbUpdator,\r\n  deletor: DbDeletor,\r\n  dbStore: DbStore\r\n};\r\n","import { QueryMaker } from 'app/libs/db-connector/common-helpers/query-maker.class';\r\nimport { Encrypter } from 'app/libs/db-connector/crypter/encrypter.class';\r\nimport { AbstractModel } from 'app/libs/db-connector/models/abstract-model';\r\nimport { DbConnectorInstance, Updator } from 'app/libs/db-connector/models/executers';\r\nimport { FileSystemDirectoryHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { executeQueryNoReturn } from 'app/libs/db-connector/plugins/sqlite/helpers/execute-query-no-return.function';\r\nimport { schemaExporter } from 'app/libs/db-connector/plugins/sqlite/helpers/schema-exporter.function';\r\nimport { cloneDeep } from 'lodash';\r\nimport { Database } from 'sql.js';\r\n\r\n/**\r\n * Implements updator for MySql\r\n */\r\nexport class DbUpdator<E> implements Updator<E> {\r\n\r\n\r\n  /**\r\n   * Creates an instance of db ElementAdderToCollection.\r\n   * @param dbConnector the instance of DbConnector from which ElementAdderToCollection is called\r\n   * @param section the section in which to insert the new element\r\n   * @param element the element to insert\r\n   */\r\n  constructor(\r\n    protected dbConnector: DbConnectorInstance<Database>,\r\n    protected section: keyof AbstractModel,\r\n    protected elements: Array<Partial<E>> | Partial<E>\r\n  ) { }\r\n  /**\r\n   * Updates an element in the collection\r\n   */\r\n  public async autoUpdate(): Promise<void> {\r\n    if (this.dbConnector.options.encrypted)\r\n      await this.handleEncryption();\r\n\r\n    const query: Array<string> = [];\r\n\r\n    if (this.elements instanceof Array)\r\n      for (const element of this.elements) {\r\n        query.push(this.buildQuery(element));\r\n      }\r\n    else\r\n      query.push(this.buildQuery(this.elements));\r\n\r\n    executeQueryNoReturn(this.dbConnector, query.join(';'));\r\n\r\n    await schemaExporter(\r\n      this.dbConnector.dbStore.db,\r\n      this.dbConnector.options.projectInfo.fileHandle as any as FileSystemDirectoryHandle,\r\n      this.dbConnector.options.projectInfo.id\r\n    );\r\n\r\n  }\r\n\r\n  private buildQuery(element: Partial<E>): string {\r\n    const copyEle = { ...element };\r\n\r\n    if (this.dbConnector.DS[this.section].jsonFields?.length)\r\n      for (const field of this.dbConnector.DS[this.section].jsonFields)\r\n        copyEle[field] = JSON.stringify(copyEle[field]);\r\n\r\n    return new QueryMaker(this.dbConnector, this.section, copyEle).update();\r\n  }\r\n\r\n  /**\r\n   * Handles encryption\r\n   * \r\n   * Since cloneDeep is used, the original object is not modified\r\n   * We use cloneDeep only here as it's slower and an overkill if there is no encryption\r\n   * @see Encrypter \r\n   */\r\n  private async handleEncryption(): Promise<void> {\r\n    this.elements = cloneDeep(this.elements);\r\n    if (this.elements instanceof Array) {\r\n      for (const element of this.elements)\r\n        await new Encrypter(this.dbConnector, this.section, element).do();\r\n    } else {\r\n      await new Encrypter(this.dbConnector, this.section, this.elements).do();\r\n    }\r\n  }\r\n\r\n}\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport { LocalProjectSettings, Section } from 'app/data/project-structure/project-info';\r\nimport { DataStructureExtender } from 'app/data/system-local-db/data-structure-extender.class';\r\nimport { DbConnector } from 'app/libs/db-connector/db-connector.class';\r\nimport { FILE_HANDLES_PLUGIN } from 'app/libs/db-connector/plugins/file-handles/exporter.constant';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { INDEXEDDB_PLUGIN } from 'app/libs/db-connector/plugins/indexed-db/exporter.constant';\r\nimport { SQLITE_PLUGIN } from 'app/libs/db-connector/plugins/sqlite/exporter.constant';\r\n\r\nexport class DbInitializer {\r\n\r\n  private projectId: string;\r\n\r\n  constructor(\r\n    private projectInfo: LocalProjectSettings,\r\n    private projectSections?: Array<Section>,\r\n    private fileHandle?: FileSystemFileHandle\r\n\r\n  ) {\r\n    this.projectId = projectInfo.id;\r\n  }\r\n\r\n  public async init(): Promise<void> {\r\n    // Relaxed equality check, because localStorage prop might be a string in some storage systems\r\n    // eslint-disable-next-line eqeqeq\r\n    if (this.projectInfo.localStorage == LOCAL_STORAGE_SYSTEMS.fileSystem)\r\n      await this.doFileSystem();\r\n    // eslint-disable-next-line eqeqeq\r\n    else if (this.projectInfo.localStorage == LOCAL_STORAGE_SYSTEMS.SQLite)\r\n      await this.doSQLite();\r\n    else\r\n      await this.doIndexedDb();\r\n  }\r\n\r\n  private async doFileSystem(): Promise<void> {\r\n    if (this.fileHandle)\r\n      this.projectInfo = { ...this.projectInfo, fileHandle: this.fileHandle };\r\n    dbInstances[this.projectId] = await new DbConnector(FILE_HANDLES_PLUGIN, { projectInfo: this.projectInfo }).init();\r\n  }\r\n\r\n  private async doSQLite(): Promise<void> {\r\n    if (this.fileHandle)\r\n      this.projectInfo = { ...this.projectInfo, fileHandle: this.fileHandle };\r\n\r\n    let dsExpander;\r\n    if (this.projectSections) {\r\n      dsExpander = new DataStructureExtender(this.projectSections);\r\n      dsExpander.extend();\r\n    }\r\n    dbInstances[this.projectId] = await new DbConnector(\r\n      SQLITE_PLUGIN,\r\n      { projectInfo: this.projectInfo },\r\n      dsExpander?.allSez\r\n    ).init();\r\n  }\r\n\r\n  private async doIndexedDb(): Promise<void> {\r\n    if (this.projectSections) {\r\n      const dsExpander = new DataStructureExtender(this.projectSections);\r\n      dsExpander.extend();\r\n      dbInstances[this.projectId] = await new DbConnector(\r\n        INDEXEDDB_PLUGIN,\r\n        { previousVersions: [], indexedDbName: this.projectId },\r\n        dsExpander.allSez\r\n      ).init();\r\n    } else if (this.projectInfo.dexieInfoForUpgrade) {\r\n      dbInstances[this.projectId] = await new DbConnector(\r\n        INDEXEDDB_PLUGIN,\r\n        {\r\n          previousVersions: this.projectInfo.dexieInfoForUpgrade.previousVersions,\r\n          DS: this.projectInfo.dexieInfoForUpgrade.DS,\r\n          indexedDbName: this.projectId\r\n        }\r\n      ).init();\r\n    }\r\n  }\r\n\r\n}\r\n","import { RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Sets the current project\r\n */\r\nexport class CurrentProjectSetter {\r\n\r\n  /**\r\n   * Creates an instance of current project setter.\r\n   * @param project the project to set as current project\r\n   */\r\n  constructor(\r\n    private projectSettings: SystemData[RESERVED_AUDS_KEYS._settings],\r\n    private sectionsDefinitions: SystemData[RESERVED_AUDS_KEYS._sections]\r\n  ) { }\r\n\r\n  /**\r\n   * Dispatches the action to set SystemData in state\r\n   */\r\n  public set(): void {\r\n    store.dispatch(({\r\n      type: REDUX_ACTIONS.setCurrentProject,\r\n      payload: { [RESERVED_AUDS_KEYS._settings]: this.projectSettings.concat(), [RESERVED_AUDS_KEYS._sections]: this.sectionsDefinitions.concat() }\r\n    }));\r\n  }\r\n\r\n}\r\n","import { DbInitializer } from 'app/data/local-dbs/db-initializer.class';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport {\r\n  LocalProjectSettings,\r\n  ProjectSettings,\r\n  RESERVED_AUDS_KEYS,\r\n  Section\r\n  } from 'app/data/project-structure/project-info';\r\nimport { CLIENT_SECTIONS } from 'app/data/system-local-db/client-sections.enum';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\n\r\nexport class ProjectLoader {\r\n\r\n  /**\r\n   * The project info of the project to load\r\n   */\r\n  private projectSettings: Array<ProjectSettings>;\r\n  private projectSections: Array<Section>;\r\n\r\n  /**\r\n   * Creates an instance of ProjectLoader\r\n   * @param projectId the id of the projct to load\r\n   */\r\n  constructor(\r\n    private projectId: string,\r\n    private projectInfo?: LocalProjectSettings,\r\n    private setProject = true\r\n  ) { }\r\n\r\n  public async loadProject(): Promise<void> {\r\n    if (!this.projectInfo)\r\n      await this.setProjectInfoFromIndexedDB();\r\n    await this.createNewInstanceOfDbConnectorForrProject();\r\n    await this.loadProjectSettings();\r\n    await this.loadProjectSections();\r\n    if (this.setProject)\r\n      this.callCurrentProjectSetter();\r\n  }\r\n\r\n  /**\r\n   * Loads project info from indexedDB\r\n   */\r\n  private async setProjectInfoFromIndexedDB() {\r\n    this.projectInfo = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects, { id: this.projectId }).single();\r\n  }\r\n\r\n  /**\r\n   * Creates new instance of dbConnector for the project so it can be used in the app\r\n   */\r\n  private async createNewInstanceOfDbConnectorForrProject() {\r\n    await new DbInitializer(this.projectInfo).init();\r\n  }\r\n\r\n  /**\r\n   * Loads project settings from the dbInstance\r\n   */\r\n  public async loadProjectSettings(): Promise<void> {\r\n    this.projectSettings = await dbInstances[this.projectId].callSelector<ProjectSettings>(RESERVED_AUDS_KEYS._settings).multiple();\r\n  }\r\n\r\n  /**\r\n   * Loads project sections from the dbInstance\r\n   */\r\n  public async loadProjectSections(): Promise<void> {\r\n    this.projectSections = await dbInstances[this.projectId].callSelector<Section>(RESERVED_AUDS_KEYS._sections).multiple();\r\n  }\r\n\r\n  /**\r\n   * Calls current project setter to load the current project in the Redux store\r\n   */\r\n  private callCurrentProjectSetter() {\r\n    new CurrentProjectSetter(this.projectSettings, this.projectSections).set();\r\n  }\r\n\r\n}","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport { LocalProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { CLIENT_SECTIONS } from 'app/data/system-local-db/client-sections.enum';\r\nimport { ProjectLoader } from 'app/libs/project-helpers/project-handlers/project-loader.class';\r\n\r\nexport async function isProjectLoaded(projectId: string, setProject = true): Promise<boolean> {\r\n\r\n  if (typeof dbInstances?.[projectId]?.callSelector === 'function')\r\n    return true;\r\n\r\n  const projectInfo = await dbInstances.system.callSelector<LocalProjectSettings>(CLIENT_SECTIONS.projects, { id: projectId }).single();\r\n\r\n  // Relaxed equality check, because localStorage prop is a string\r\n  // eslint-disable-next-line eqeqeq\r\n  if (projectInfo.localStorage == LOCAL_STORAGE_SYSTEMS.IndexedDB) {\r\n    await new ProjectLoader(projectId, projectInfo, setProject).loadProject();\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}","import { Section, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { FormFieldsModel, OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\n/**\r\n * Builds the form element with the info on the parent section for ParentsSelector\r\n * \r\n * @see ParentsSelector\r\n */\r\nexport class ParentInfoFormEleBuilder {\r\n\r\n  private parentInfoFormModel: FormFieldsModel<SectionElement>;\r\n  private options: Array<OptionKeysModel> = [];\r\n\r\n  constructor(\r\n    private childOf: Array<string>,\r\n    private sections?: Array<Section>\r\n\r\n  ) { }\r\n\r\n  public build(): FormFieldsModel<SectionElement> {\r\n    this.setOptions();\r\n    this.setParentSelector();\r\n    return this.parentInfoFormModel;\r\n  }\r\n\r\n  private setOptions(): void {\r\n    this.childOf.forEach(sectionName => {\r\n      const sectionInfo = this.sections.find(section => section.id === sectionName);\r\n      this.options.push({ value: sectionName, label: sectionInfo.title });\r\n    });\r\n  }\r\n\r\n  private setParentSelector(): void {\r\n    this.parentInfoFormModel = {\r\n      componentCode: FORM_COMPONENTS_CODES.parentsSelector,\r\n      fieldName: RESERVED_FIELDS.parentsInfo,\r\n      label: 'Parent elements',\r\n      options: this.options\r\n    };\r\n  }\r\n\r\n}","import { Section } from 'app/data/project-structure/project-info';\r\n\r\nexport function findSectionById(sections: Array<Section>, toFindId: string): Section {\r\n  return sections.find(section => section.id === toFindId);\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport const FormEleContainer = ({ children, width }: { children: ReactNode, width: string | number }) => (\r\n  <div className={`${width} my-3 px-2 inline-block align-top`}>\r\n    {children}\r\n  </div>\r\n)","export const FormElementLabel = ({ label }: { label: string }) => (\r\n  <label className=\"w-full block mb-0 ml-1 text-gray-700 text-sm\">{label}</label>\r\n)","import { IValidStateForEle } from 'app/libs/redux/action.type';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\nimport { useEffect } from 'react';\r\n\r\nexport const RequiredField = ({ formEle, element, fieldId, touched }: IValidatorsConatinerProps) => {\r\n\r\n  const value = element[formEle.fieldName];\r\n\r\n  useEffect(() => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.setValidStateForEle, payload: {\r\n        formEleId: `${fieldId}-required`,\r\n        valid: value !== '' && value !== undefined && value !== null\r\n      } as IValidStateForEle\r\n    });\r\n  }, [value, fieldId]);\r\n\r\n  if (value || !touched)\r\n    return (<div className=\"ml-1 text-xs italic text-gray-400\">Required</div>);\r\n\r\n  return (<div className=\"ml-1 text-red-600 text-xs italic\">This field is required</div>);\r\n\r\n};\r\n","import { RequiredField } from 'app/ui-react-components/shared-components/forms-automator/validators/required-field.component';\r\nimport { IValidatorsConatinerProps } from 'app/ui-react-components/shared-components/forms-automator/validators/validators';\r\n\r\nexport const ValidatorsContainer = (props: IValidatorsConatinerProps) => {\r\n\r\n  const validators = [];\r\n\r\n  if (props.formEle.required)\r\n    validators.push(<RequiredField key=\"required-validator\" {...props} />)\r\n\r\n  return (\r\n    <span>\r\n      {validators}\r\n    </span>\r\n  );\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicCheckbox = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"checkbox\"\r\n        checked={(Reflect.has(element, formEle.fieldName) && typeof element[formEle.fieldName] === 'boolean') ? element[formEle.fieldName] : false}\r\n        className={`rounded mt-3 ${isInValid && touched ? \"text-red-600 border border-red-600\" : \"text-prussian-blue-500\"}`}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.checked)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","// Converts a col size in the range of 1-12 to the equivalente TailwindCSS width class\r\n// We can't use string concatenation here because it will break the build\r\n// See optimizing for production at https://tailwindcss.com/docs/optimizing-for-production\r\nexport function calcWidth(width: string): string {\r\n  switch (width) {\r\n    case '1':\r\n      return 'w-full lg:w-1/12';\r\n    case '2':\r\n      return 'w-full lg:w-2/12';\r\n    case '3':\r\n      return 'w-full lg:w-3/12';\r\n    case '4':\r\n      return 'w-full lg:w-4/12';\r\n    case '5':\r\n      return 'w-full lg:w-5/12';\r\n    case '6':\r\n      return 'w-full lg:w-6/12';\r\n    case '7':\r\n      return 'w-full lg:w-7/12';\r\n    case '8':\r\n      return 'w-full lg:w-8/12';\r\n    case '9':\r\n      return 'w-full lg:w-9/12';\r\n    case '10':\r\n      return 'w-full lg:w-10/12';\r\n    case '11':\r\n      return 'w-full lg:w-11/12';\r\n    case '12':\r\n      return 'w-full lg:w-12/12';\r\n    default:\r\n      return 'w-full';\r\n  }\r\n}","export const FORM_ELEMENTS_CSS_CLASSES = \"rounded-md border border-gray-300 hover:border-gray-400 focus:border-prussian-blue-500 focus:ring-0\";\r\nexport const FORM_ELEMENTS_CSS_CLASSES_ERR = \"rounded-md border-2 border-red-300 hover:border-red-400 focus:border-red-200 focus:ring-0\";","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"text\"\r\n        placeholder={formEle['label']}\r\n        disabled={formEle.disabled ? formEle.disabled : false}\r\n        required={formEle.required ? formEle.required : false}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicRadio, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n/* eslint-disable eqeqeq */\r\n\r\nexport const BasicRadio = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicRadio<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  if (!element[formEle.fieldName] && formEle.value)\r\n    element[formEle.fieldName] = formEle.value;\r\n\r\n\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  return (\r\n    <FormEleContainer key={formEle.fieldName} width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <div className=\"mt-2 pl-1\"\r\n      >\r\n        {formEle.options.map((option, indexOption) => {\r\n          return (\r\n            <div key={option.value} className=\"mb-2\">\r\n              <input\r\n                type=\"radio\"\r\n                value={option.value}\r\n                name={formEle.fieldName}\r\n                checked={element[formEle.fieldName] == option.value}\r\n                disabled={option.disabled || formEle.disabled ? true : false}\r\n                className={`${isInValid && touched ? \"bg-red-600 text-red-600\" : \"bg-gray-200 text-prussian-blue-500\"} mr-2 border-transparent focus:border-gray-500 focus:text-prussian-blue-600 focus:ring-prussian-blue-600`}\r\n                onChange={event => handleChange(formEle.fieldName, event.target['value'])}\r\n                onBlur={() => setTouched(true)}\r\n              />\r\n              <span className={option.disabled || formEle.disabled ? 'text-gray-300 cursor-not-allowed' : ''}>{option.label}</span>\r\n              {option.hint && (\r\n                <span>\r\n                  <sup><i className=\"ml-1 text-xs bi-info-circle\" data-tip data-for={`${fieldId}${indexOption}`}></i></sup>\r\n                  <ReactTooltip id={`${fieldId}${indexOption}`} effect=\"solid\" data-multiline={true} className=\"msg-wrapper text-center\">\r\n                    <span>{option.hint}</span>\r\n                  </ReactTooltip>\r\n                </span>\r\n              )}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicSelect = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <select\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      >\r\n        <option value=\"\">Please chose one</option>\r\n        {formEle.options.map((option, index) => (\r\n          <option\r\n            key={index}\r\n            value={option.value}\r\n          >{option.label}</option>)\r\n        )}\r\n      </select>\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BasicTextarea = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <textarea\r\n        name={formEle.fieldName}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={element[formEle.fieldName]}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  )\r\n};","import { Option } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\n\r\n/**\r\n * Converts the options used by react-select to a string for storing it in the DB\r\n * We do not want to store the whole object, only the values, as the label might change.\r\n */\r\nexport function parentInfoObjToString(parentInfoObj: Array<Option>): Array<string> {\r\n  const parentsInfo = [];\r\n  parentInfoObj.forEach(parentInfo => {\r\n    parentsInfo.push(parentInfo.value);\r\n  });\r\n  return parentsInfo;\r\n}","export interface Option { value: string, label: string }\r\n\r\ninterface OptionKeysModelGroup {\r\n  label: string;\r\n  options: Array<Option>\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObjForOptionsGroup(parentsInfo: Array<string>, selectOptions: Array<OptionKeysModelGroup>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the options group by recourevily searching the options by value\r\n    const group = selectOptions.find(group => group.options.find(opt => opt.value === parentInfo));\r\n\r\n    if (!group) return;\r\n\r\n    // find the option by searching the options of the group\r\n    const option = group.options.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Transforms the array of string keys to an array of objects with the label and value.\r\n * This version is for Select components with NON grouped options.\r\n * @param parentsInfo the array of the info on the parent, composed by: `[sectionID]|[elementID]`\r\n * @param selectOptions the options for the react-select component\r\n */\r\nexport function parentInfoStringToObj(parentsInfo: Array<string>, selectOptions: Array<Option>): Array<Option> {\r\n  const options = [];\r\n\r\n  if (!parentsInfo || !selectOptions)\r\n    return options;\r\n\r\n  parentsInfo.forEach(parentInfo => {\r\n    // find the option by searching the options of the select element\r\n    const option = selectOptions.find(opt => opt.value === parentInfo);\r\n\r\n    if (!option) return;\r\n\r\n    options.push(option);\r\n  });\r\n\r\n\r\n  return options;\r\n}","import { RESERVED_AUDS_KEYS, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObj } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ChildOfSelectorForSection = ({ formEle, element, handleChange, sectionId }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const currentEditedProjectSections = useSelector((state: AnitaStore) => state.formProject.project[RESERVED_AUDS_KEYS._sections]);\r\n  const [selectOptions, setSelectOptions] = useState<Array<Option>>([]);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const buildOptions = () => {\r\n\r\n      if (!Array.isArray(currentEditedProjectSections))\r\n        return;\r\n\r\n      const selectableSections: Array<Option> = [];\r\n      currentEditedProjectSections.forEach(sectionDec => {\r\n        if (sectionDec.id !== sectionId)\r\n          selectableSections.push({\r\n            value: sectionDec.id,\r\n            label: sectionDec.title\r\n          });\r\n      });\r\n      setSelectOptions(selectableSections);\r\n    }\r\n\r\n    if (isMounted)\r\n      buildOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [currentEditedProjectSections, currentEditedProjectSections.length, sectionId]);\r\n\r\n  const handleChangeInChildOfSelectorForSection = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObj(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInChildOfSelectorForSection}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DatePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? formEle['width'] : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"date\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { calcWidth } from 'app/ui-react-components/shared-components/forms-automator/form-builder/calc-width.function';\r\nimport { FORM_ELEMENTS_CSS_CLASSES, FORM_ELEMENTS_CSS_CLASSES_ERR } from 'app/ui-react-components/shared-components/forms-automator/form-layout/fom-elements-css-classes.const';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport * as dateFormat from 'date-format';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const DateTimePicker = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  const width = formEle['width'] ? calcWidth(formEle['width']) : \"w-full\";\r\n\r\n  return (\r\n    <FormEleContainer width={width}>\r\n      <FormElementLabel label={formEle['label']} />\r\n      <input\r\n        key={formEle.fieldName}\r\n        name={formEle.fieldName}\r\n        type=\"datetime-local\"\r\n        placeholder={formEle['label']}\r\n        className={`w-full ${isInValid && touched ? FORM_ELEMENTS_CSS_CLASSES_ERR : FORM_ELEMENTS_CSS_CLASSES}`}\r\n        value={dateFormat(\"yyyy-MM-ddThh:mm:ss\", new Date(element[formEle.fieldName]))}\r\n        onChange={event => handleChange(formEle.fieldName, event.target.value)}\r\n        onBlur={() => setTouched(true)}\r\n      />\r\n      <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n    </FormEleContainer>\r\n  );\r\n};","import { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport const HiddenInput = ({ formEle, element, handleChange }: ICommonFormEleProps) => {\r\n\r\n  if (element[formEle.fieldName] === undefined || element[formEle.fieldName] === null)\r\n    element[formEle.fieldName] = '';\r\n\r\n  return (<input key={formEle.fieldName}\r\n    name={formEle.fieldName}\r\n    type=\"hidden\"\r\n    value={element[formEle.fieldName]}\r\n    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleChange(formEle.fieldName, event.target.value)} />)\r\n};","const SUCCESS_BG_COLOR = \"bg-green-500\";\r\nconst DANGER_BG_COLOR = \"bg-red-500\";\r\nconst SUCCESS_TEXT_COLOR = \"text-green-700\";\r\nconst DANGER_TEXT_COLOR = \"text-red-700\";\r\nconst SUCCESS_BORDER_COLOR = \"border-green-500\";\r\nconst DANGER_BORDER_COLOR = \"border-red-500\";\r\n\r\nexport const SUCCESS_BTN_OUTLINE = `bg-transparent hover:${SUCCESS_BG_COLOR} ${SUCCESS_TEXT_COLOR} font-semibold hover:text-white border ${SUCCESS_BORDER_COLOR} hover:border-transparent rounded`;\r\nexport const DANGER_BTN_OUTLINE = `bg-transparent hover:${DANGER_BG_COLOR} ${DANGER_TEXT_COLOR} font-semibold hover:text-white border ${DANGER_BORDER_COLOR} hover:border-transparent rounded`;","import { PROJECT_EDITOR_FORM_BUILDER } from 'app/data/project-form-builder/project-editor-form-builder.const';\r\nimport { RESERVED_AUDS_KEYS, Section } from 'app/data/project-structure/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { DANGER_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormFieldsModel, ICommonFormEleProps, OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n/**\r\n * Checks if the OptionKeysModel was already in the section before we started editing.\r\n * We can't rely on the general edit mode of the form because we might have new options in edit mode.\r\n * @param section the section to which the current OptionKeysModel belongs\r\n * @param indexFormElement the index of the form model at which the current OptionKeysModel is, as we want to check only on the same form model\r\n * @param option the option to check\r\n * @returns the form model to use. We want different form models for adding and editing to disable fields that should not be altered.\r\n */\r\nfunction getCanEdit(section: Section, indexFormElement: number, value: any): boolean {\r\n  if (!section || !section.formModel[indexFormElement] || !section.formModel[indexFormElement]['options'] || !section.formModel[indexFormElement]['options'].length)\r\n    return true;\r\n\r\n  return !section.formModel[indexFormElement]['options'].some((opt: OptionKeysModel) => opt.value === value);\r\n}\r\n\r\nexport const OptionsMakerSingleOption = (props: ICommonFormEleProps<FormFieldsModel<OptionKeysModel>>) => {\r\n  const { formEle, element, handleOptionsChange, handleClickDeleteOption, indexSection, indexFormElement, index, optionElement } = props;\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const section = useSelector((store: AnitaStore) => store.formProject.original[RESERVED_AUDS_KEYS._sections][indexSection]);\r\n  const formModelToUse: Array<FormFieldsModel<any>> = useMemo(() => {\r\n    const canEdit = getCanEdit(section, indexFormElement, optionElement.value);\r\n    return canEdit ?\r\n      PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].optionEles.newItem :\r\n      PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].optionEles.newItem;\r\n  }, [section, indexFormElement, optionElement.value, projectEditorMode]);\r\n\r\n  return (\r\n    <li>\r\n      <FormAutomator\r\n        formModel={formModelToUse}\r\n        element={optionElement}\r\n        handleChange={handleOptionsChange.bind(undefined, index, optionElement)} />\r\n      {(typeof handleClickDeleteOption === 'function' && element[formEle.fieldName].length > 2) && <div className=\"inline-block w-full lg:w-1/12 px-2 lg:pl-1 lg:pr-3 lg:align-bottom mb-8\">\r\n        <button\r\n          onClick={handleClickDeleteOption.bind(undefined, index)}\r\n          data-tip data-for={`deleteOption-${index}`}\r\n          className={`w-full py-1 ${DANGER_BTN_OUTLINE}`}\r\n        ><i className=\"bi-trash hidden lg:block\"></i><span className=\"lg:hidden\">Delete option {index + 1}</span></button>\r\n        <ReactTooltip id={`deleteOption-${index}`} effect=\"solid\">\r\n          <span>Delete option {index + 1}</span>\r\n        </ReactTooltip>\r\n      </div>}\r\n    </li>\r\n  )\r\n};\r\n","import { SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormFieldsModel, ICommonFormEleProps, OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { OptionsMakerSingleOption } from 'app/ui-react-components/shared-components/forms-automator/form-fields/options-maker-single-option.component';\r\n\r\nexport const OptionsMaker = (props: ICommonFormEleProps<FormFieldsModel<OptionKeysModel>>) => {\r\n\r\n  const { formEle, element, handleOptionsChange, handleClickAddOption } = props;\r\n\r\n  if (typeof handleOptionsChange !== 'function')\r\n    return null;\r\n\r\n  if (!element[formEle.fieldName] || !Array.isArray(element[formEle.fieldName]) || !element[formEle.fieldName].length)\r\n    element[formEle.fieldName] = Array.from(Array(2), (a, i) => ({ label: '', value: i + 1 }));\r\n\r\n  return (\r\n    <div className=\"mt-6 pl-10 py-4 bg-gray-50 rounded-lg\">\r\n      <p className=\"-ml-5 font-semibold mb-1\">Choices</p>\r\n      <ol className=\"list-decimal\">\r\n        {element[formEle.fieldName].map((optionElement: OptionKeysModel, index) =>\r\n          <OptionsMakerSingleOption key={index} index={index} optionElement={optionElement} {...props} />\r\n        )}\r\n      </ol>\r\n      {(typeof handleClickAddOption === 'function') &&\r\n        <div className=\"flex items-end\">\r\n          <button\r\n            className={`ml-auto mr-4 mt-3 py-2 px-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddOption}\r\n          >\r\n            Add option\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};","import { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport function findFirstUserDefinedField(sectionFormModel: FormModel): number {\r\n\r\n  let firstUserDefinedFieldInfo: number = undefined;\r\n\r\n  sectionFormModel.some((formEle, index) => {\r\n    if (RESERVED_FIELDS[formEle.fieldName])\r\n      return false;\r\n\r\n    firstUserDefinedFieldInfo = index;\r\n    return true;\r\n  });\r\n\r\n  return firstUserDefinedFieldInfo;\r\n}\r\n","// Removes non ascii characters from a string and replaces with ascii chars, plus replaces spaces with -\r\nexport function cleanString(source: string): string {\r\n  let r = source.toLowerCase();\r\n  const non_asciis = {\r\n    a: '[àáâãäå]',\r\n    ae: 'æ',\r\n    c: 'ç',\r\n    e: '[èéêë]',\r\n    i: '[ìíîï]',\r\n    n: 'ñ',\r\n    o: '[òóôõö]',\r\n    oe: 'œ',\r\n    u: '[ùúûűü]',\r\n    y: '[ýÿ]'\r\n  };\r\n  for (const i in non_asciis)\r\n    r = r.replace(new RegExp(non_asciis[i], 'g'), i);\r\n\r\n  return r.replace(/\\s/g, '-')\r\n    .replace(/[^\\w-]/gi, '');\r\n}\r\n\r\n/**\r\n * Asyncs forEach. Unlike native JS forEach, this one awaits each callback to resolve befofore iterating to the next element of the array\r\n * @param array the array to loop\r\n * @param callback the function to call on each element of the array\r\n */\r\nexport async function asyncForEach<T>(array: Array<T>, callback: (item: T, index: number, arr: Array<T>) => Promise<any>): Promise<void> {\r\n  const totalLength = array.length;\r\n  for (let index = 0; index < totalLength; index++)\r\n    await callback(array[index] as T, index, array);\r\n}\r\n\r\n/**\r\n * Gets the current utcdate and time as an ISO string\r\n */\r\nexport function getUTCDateTime(): string {\r\n  return new Date(new Date().toUTCString()).toISOString();\r\n}\r\n\r\n/**\r\n * Gets the current date and time as an ISO string\r\n */\r\nexport function getDateTime(): string {\r\n  return new Date(new Date()).toISOString();\r\n}\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { RESERVED_AUDS_KEYS, SectionElement, SystemData } from 'app/data/project-structure/project-info';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel, OptionKeysModel, OptionKeysModelGroup } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport class OptionsForParentsSelector {\r\n\r\n  private optionsGroups: Array<OptionKeysModelGroup> = [];\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private options: Array<OptionKeysModel>\r\n  ) {\r\n  }\r\n  public async buildOptions(): Promise<Array<OptionKeysModelGroup>> {\r\n    await asyncForEach(this.options, async group => {\r\n      const sectionEles = await dbInstances[this.project[RESERVED_AUDS_KEYS._settings][0].id].callSelector<SectionElement>(group.value).multiple();\r\n      if (sectionEles.length)\r\n        this.createGroupOption(group.value as string, group.label, sectionEles);\r\n    });\r\n\r\n    return this.optionsGroups;\r\n  }\r\n\r\n  private createGroupOption(sectionId: string, sectionLabel: string, sectionEles: Array<SectionElement>): void {\r\n    const options: Array<OptionKeysModel> = [];\r\n    const section = findSectionById(this.project[RESERVED_AUDS_KEYS._sections], sectionId);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    sectionEles.forEach(ele => options.push({\r\n      value: `${sectionId}|${ele.id}`,\r\n      label: ele[section.formModel[indexFirstUserFiield].fieldName]\r\n    }));\r\n    this.optionsGroups.push({\r\n      label: sectionLabel,\r\n      options\r\n    });\r\n  }\r\n}","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { OptionsForParentsSelector } from 'app/libs/project-helpers/parent-info-form-ele-builder/options-for-parents-selector.class';\r\nimport { parentInfoObjToString } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-obj-to-string.function';\r\nimport { Option, parentInfoStringToObjForOptionsGroup } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-string-to-obj.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { IBasicSelect, ICommonFormEleProps, OptionKeysModelGroup } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FormEleContainer } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-ele-container.component';\r\nimport { FormElementLabel } from 'app/ui-react-components/shared-components/forms-automator/form-layout/form-element-label.component';\r\nimport { ValidatorsContainer } from 'app/ui-react-components/shared-components/forms-automator/validators/validators-container.component';\r\nimport uniqueId from 'lodash/uniqueId';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Select, { MultiValue } from 'react-select';\r\n\r\nexport const ParentsSelector = ({ formEle, element, handleChange }: ICommonFormEleProps<IBasicSelect<SectionElement>>) => {\r\n\r\n  const [selectOptions, setSelectOptions] = useState<Array<OptionKeysModelGroup>>([]);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n\r\n  const [touched, setTouched] = useState(false);\r\n  const { current: fieldId } = useRef(uniqueId(formEle.fieldName))\r\n  const validStore = useSelector((store: AnitaStore) => store.formElesValidState);\r\n  const isInValid = Object.keys(validStore).some(key => key.startsWith(fieldId) && validStore[key] === false);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      store.dispatch({ type: REDUX_ACTIONS.unsetValidStateForEle, payload: fieldId });\r\n    }\r\n  }, [fieldId]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const getSelectOptions = async () => {\r\n      const options = await new OptionsForParentsSelector(project, formEle.options).buildOptions();\r\n\r\n      if (isMounted)\r\n        setSelectOptions(options);\r\n    };\r\n\r\n\r\n    if (isMounted)\r\n      getSelectOptions();\r\n\r\n    return () => { isMounted = false };\r\n  }, [project, formEle.options]);\r\n\r\n  const handleChangeInParentsSelector = (newValue: MultiValue<Option>) => {\r\n    handleChange(formEle.fieldName, parentInfoObjToString(newValue as Array<Option>));\r\n  }\r\n\r\n  if (selectOptions.length === 0)\r\n    return null;\r\n\r\n  // We uas as any because react-select does not export the values we'd like to use,\r\n  // and the ones we define are not compatible.\r\n  return (<FormEleContainer width=\"w-full\">\r\n    <FormElementLabel label={formEle['label']} />\r\n    <Select\r\n      defaultValue={parentInfoStringToObjForOptionsGroup(element[formEle.fieldName], selectOptions as any)}\r\n      isMulti\r\n      name={formEle.fieldName}\r\n      options={selectOptions as any}\r\n      className={isInValid && touched ? \"border border-red-600 rounded\" : \"\"}\r\n      onChange={handleChangeInParentsSelector}\r\n      onBlur={() => setTouched(true)}\r\n    />\r\n    <ValidatorsContainer formEle={formEle} element={element} fieldId={fieldId} touched={touched} />\r\n  </FormEleContainer>\r\n  )\r\n};","import { FormFieldsModel, Prerequisites, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport class PrerequisitesChecker<ELEMENT extends Partial<SupportedFormsTypes>> {\r\n\r\n  private isIntegrated = false;\r\n\r\n  constructor(\r\n    private formEle: FormFieldsModel<Partial<SupportedFormsTypes>>,\r\n    private objValues: Partial<ELEMENT>\r\n  ) { }\r\n\r\n  public integrates(): boolean {\r\n    if (!this.formEle.prerequisites || !this.formEle.prerequisites.length)\r\n      return true;\r\n\r\n    this.loopPrerequisites();\r\n\r\n    return this.isIntegrated;\r\n  }\r\n\r\n  private loopPrerequisites(): void {\r\n    let counter = 0;\r\n    while (this.isIntegrated === false && counter < this.formEle.prerequisites.length) {\r\n      this.checkPrerequisites(this.formEle.prerequisites[counter]);\r\n      counter++;\r\n    }\r\n  }\r\n\r\n  private checkPrerequisites(prereq: Prerequisites): void {\r\n    for (const key in prereq)\r\n      // We use a relaxed equality check here, because the value can be a string or a number\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this.objValues[key] && (prereq[key].filter(prereqValue => prereqValue == this.objValues[key]).length > 0))\r\n        this.setIsIntegrated();\r\n  }\r\n\r\n  private setIsIntegrated(): void {\r\n    this.isIntegrated = true;\r\n  }\r\n\r\n}\r\n","import { ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { formElesSwitcher } from 'app/ui-react-components/shared-components/forms-automator/form-builder/form-eles-switcher.function';\r\nimport { PrerequisitesChecker } from 'app/ui-react-components/shared-components/forms-automator/form-builder/prerequisites-checker.class';\r\nimport { useMemo } from 'react';\r\n\r\nexport const FieldSelector = (props: ICommonFormEleProps) => {\r\n\r\n  const shouldRender = useMemo(() => new PrerequisitesChecker(props.formEle, props.element).integrates(), [props.formEle, props.element]);\r\n\r\n  if (shouldRender)\r\n    return formElesSwitcher(props.formEle.fieldName, props.formEle.componentCode, props);\r\n\r\n  return null;\r\n\r\n}","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { IBasicRadio, IBasicSelect, ICommonFormEleProps } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\nimport { BasicCheckbox } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-checkbox.component';\r\nimport { BasicInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-input.component';\r\nimport { BasicRadio } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-radio.component';\r\nimport { BasicSelect } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-select.component';\r\nimport { BasicTextarea } from 'app/ui-react-components/shared-components/forms-automator/form-fields/basic-textarea.component';\r\nimport { ChildOfSelectorForSection } from 'app/ui-react-components/shared-components/forms-automator/form-fields/child-of-selector-for-section.component';\r\nimport { DatePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-picker.component';\r\nimport { DateTimePicker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/date-time-picker.component';\r\nimport { HiddenInput } from 'app/ui-react-components/shared-components/forms-automator/form-fields/hidden-input.component';\r\nimport { OptionsMaker } from 'app/ui-react-components/shared-components/forms-automator/form-fields/options-maker.component';\r\nimport { ParentsSelector } from 'app/ui-react-components/shared-components/forms-automator/form-fields/parents-selector.component';\r\n\r\nexport function formElesSwitcher(key: string, componentCode: FORM_COMPONENTS_CODES, props: ICommonFormEleProps) {\r\n  switch (componentCode) {\r\n    case FORM_COMPONENTS_CODES.hiddenInput:\r\n      return <HiddenInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n      return <BasicInput key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n      return <BasicSelect key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return <BasicTextarea key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return <BasicCheckbox key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return <BasicRadio key={key} {...props as ICommonFormEleProps<IBasicRadio<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return <DatePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return <DateTimePicker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.optionsMaker:\r\n      return <OptionsMaker key={key} {...props} />\r\n    case FORM_COMPONENTS_CODES.childOfSelectorForSection:\r\n      return <ChildOfSelectorForSection key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    case FORM_COMPONENTS_CODES.parentsSelector:\r\n      return <ParentsSelector key={key} {...props as ICommonFormEleProps<IBasicSelect<SectionElement>>} />\r\n    default:\r\n      return <BasicInput key={key} {...props} />\r\n  }\r\n}","import { Section } from 'app/data/project-structure/project-info';\r\nimport { FieldSelector } from 'app/ui-react-components/shared-components/forms-automator/form-layout/field-selector.component';\r\n\r\nexport interface IFormAutomatorProps {\r\n  formModel: Section['formModel'];\r\n  element: { [key: string]: any };\r\n  handleChange: (...args: any) => void;\r\n  [customProps: string]: any;\r\n\r\n}\r\n\r\nexport const FormAutomator = (props: IFormAutomatorProps) => {\r\n\r\n  return (\r\n    <span>\r\n      {props.formModel.map((formEle) => (\r\n        <FieldSelector key={formEle.fieldName} formEle={formEle} {...props} />\r\n      ))}\r\n    </span>\r\n  )\r\n\r\n}","import { RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { ParentInfoFormEleBuilder } from 'app/libs/project-helpers/parent-info-form-ele-builder/parent-info-form-ele-builder.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const FormElementManager = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const sections = project[RESERVED_AUDS_KEYS._sections];\r\n  const section = findSectionById(sections, sectionId);\r\n\r\n  const element = useSelector((store: AnitaStore) => store.formElement.element);\r\n\r\n  const handleChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: { ...element, [fieldName]: value } });\r\n  }\r\n\r\n  return (\r\n    <form name=\"element-form\">\r\n      {section.childOf && section.childOf.length > 0 && <FormAutomator\r\n        formModel={[new ParentInfoFormEleBuilder(section.childOf, sections).build()]}\r\n        element={element}\r\n        handleChange={handleChange} />\r\n      }\r\n      <FormAutomator formModel={section.formModel} element={element} handleChange={handleChange} />\r\n    </form>\r\n  )\r\n\r\n};","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { SectionModel } from 'app/libs/db-connector/db-builder/sez-definition';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\n/**\r\n * Saves a new element in a section of the project, stores the project on disk and dispatches the changes to the current state\r\n */\r\nexport class ElementSaver {\r\n\r\n  /**\r\n   * Reference to section model in DS for easier access in code\r\n   */\r\n  private sectionModelInDS: SectionModel<SectionElement>;\r\n\r\n  /**\r\n   * Creates an instance of element saver.\r\n   * @param projectData the unmodified project data\r\n   * @param sectionId the id of the section of the element to save\r\n   * @param element the element to save\r\n   */\r\n  constructor(\r\n    private projectId: string,\r\n    private sectionId: string,\r\n    private element: SectionElement,\r\n    private mode: EDITOR_MODE\r\n  ) { }\r\n\r\n  /**\r\n   * Deep clones the project, adds/updated the element in the project to save and finally save the project\r\n   */\r\n  public async save(): Promise<SectionElement> {\r\n    this.setSectionModel();\r\n    this.checkAndSetPk();\r\n    this.setcreatedAt();\r\n    this.deleteEmptyProps();\r\n\r\n    if (this.mode === EDITOR_MODE.add)\r\n      await dbInstances[this.projectId].callInsertor(this.sectionId, this.element).autoInsert();\r\n    else {\r\n      this.setupdatedAtValueIfInEditMode();\r\n      await dbInstances[this.projectId].callUpdator(this.sectionId, this.element).autoUpdate();\r\n    }\r\n\r\n    return this.element;\r\n\r\n  }\r\n\r\n  /**\r\n   * Sets the section model from the DS stored in DbConnector\r\n   */\r\n  private setSectionModel(): void {\r\n    this.sectionModelInDS = dbInstances[this.projectId].DS[this.sectionId];\r\n  }\r\n\r\n  /**\r\n   * Checks if a `pk` value is set, if not one is created.\r\n   */\r\n  private checkAndSetPk(): void {\r\n    if (!this.element[this.sectionModelInDS.pk])\r\n      this.element[this.sectionModelInDS.pk] = IdCreator.make(this.sectionModelInDS.name);\r\n  }\r\n\r\n  /**\r\n   * Deletes all props from the element whose value is an empty string\r\n   */\r\n  private deleteEmptyProps(): void {\r\n    for (const prop in this.element)\r\n      if (this.element[prop] === '')\r\n        delete this.element[prop];\r\n  }\r\n\r\n  /**\r\n   * Checks if `createdAt` value is set, if not one is created.\r\n   */\r\n  private setcreatedAt(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.createdAt) && !this.element[RESERVED_FIELDS.createdAt])\r\n      this.element[RESERVED_FIELDS.createdAt] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  /**\r\n   * Sets the updatedAt value if in edit mode\r\n   */\r\n  private setupdatedAtValueIfInEditMode(): void {\r\n    if (this.sectionModelInDS.fields.includes(RESERVED_FIELDS.updatedAt))\r\n      this.element[RESERVED_FIELDS.updatedAt] = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n}\r\n","import { RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { ElementSaver } from 'app/libs/project-helpers/section-elements-handlers/element-saver.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const SaveElement = ({ sectionId }: { sectionId: string }) => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const element = useSelector((state: AnitaStore) => state.formElement.element);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const navigate = useNavigate();\r\n\r\n  const handleClick = async () => {\r\n    const mode = element.id ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n    await new ElementSaver(project[RESERVED_AUDS_KEYS._settings][0].id, sectionId, element, mode).save();\r\n    navigate(-1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-6 mb-3 px-2 flex justify-end\">\r\n      <button\r\n        className=\"py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n        onClick={() => navigate(-1)}\r\n      >Cancel</button>\r\n      <button\r\n        disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n        className=\"py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500\"\r\n        onClick={handleClick}\r\n      >Save</button>\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { ReactNode } from 'react';\r\nexport const MainContentContainer = ({ children, headerText }: { children: ReactNode, headerText?: string }) => (\r\n  <div className=\"p-4 bg-white rounded shadow\">\r\n    {headerText ? <div className=\"mt-3\">\r\n      <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n      <hr className=\"mt-4\" />\r\n    </div> : null}\r\n    <div className=\"pt-4\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n)","export const Loader = () => (\r\n  <svg className=\"mx-auto my-5 animate-spin h-5 w-5 text-prussian-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n  </svg>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormElementManager } from 'app/ui-react-components/project/add-edit-components/form-element-manager.component';\r\nimport { SaveElement } from 'app/ui-react-components/project/add-edit-components/save-element.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditSectionElement = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.elementId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = (mode === EDITOR_MODE.edit) ? params[URL_PARAMS.elementId] : null;\r\n\r\n  const [element, setElement] = useState<Partial<SectionElement> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n\r\n    const fetchElement = async () => {\r\n      const canProceed = await isProjectLoaded(projectId);\r\n\r\n      if (!projectId || !sectionId || !canProceed)\r\n        return setElement(undefined);\r\n\r\n      if (mode === EDITOR_MODE.add)\r\n        return setElement({});\r\n\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n      if (isMounted)\r\n        setElement(element);\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchElement();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId, sectionId, elementId]);\r\n\r\n  if (element === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Element' : 'Edit Element';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.updateFormElement, payload: element });\r\n\r\n  return (\r\n    <MainContentContainer headerText={headerText}>\r\n      {element === null && <Loader />}\r\n      {element !== null && <FormElementManager sectionId={sectionId} />}\r\n      {element !== null && <SaveElement sectionId={sectionId} />}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n/* eslint-disable eqeqeq */\r\n\r\n/**\r\n * Finds the text to be displayed for an option of a Radio or Select element based on the matching value\r\n */\r\nexport function txtByFieldValue(options: Array<OptionKeysModel>, toFindId: string | number): string | null {\r\n  // We use relaxed equal (==) here because the value of the radio button might be a string or a number.\r\n  const optionToReturn = options.find(option => option.value == toFindId);\r\n\r\n  if (typeof optionToReturn === 'undefined')\r\n    return null;\r\n\r\n  return optionToReturn.label;\r\n}\r\n\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { CLIENT_SECTIONS } from 'app/data/system-local-db/client-sections.enum';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\n\r\n/**\r\n * Deletes a project from the current device\r\n */\r\nexport class ProjectDeletor {\r\n\r\n  /**\r\n   * Creates an instance of project deletor.\r\n   * @param project the settings of the project to delete\r\n   */\r\n  constructor(\r\n    private project: ProjectSettings\r\n  ) { }\r\n\r\n  /**\r\n   * Deletes the project and reloads the list of projects\r\n   */\r\n  public async delete(): Promise<void> {\r\n    await this.callOnProjectDeleted();\r\n    await this.doDelete();\r\n    this.reloadProjectList();\r\n  }\r\n\r\n  /**\r\n   * Performs the delete action on IndexedDB with db-connector\r\n   */\r\n  private async doDelete(): Promise<void> {\r\n    await dbInstances.system.callDeletor<ProjectSettings>(CLIENT_SECTIONS.projects, { id: this.project.id }).autoDelete();\r\n  }\r\n\r\n  private async callOnProjectDeleted(): Promise<void> {\r\n    const canProceed = await isProjectLoaded(this.project.id, false);\r\n    if (canProceed)\r\n      await dbInstances[this.project.id].dbStore.onProjectDeleted?.();\r\n  }\r\n\r\n  /**\r\n   * Reloads the project list from scratch\r\n   */\r\n  private reloadProjectList(): void {\r\n    new ProjectsListLoader().load();\r\n  }\r\n\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport const ModalBody = ({ children }: { children: ReactNode }) => (\r\n  <div className=\"mt-2\">\r\n    {children}\r\n  </div>\r\n);","import { ReactNode } from 'react';\r\n\r\nexport const ModalContent = ({ children, icon }: { children: ReactNode, icon?: string }) => (\r\n  <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n    <div className=\"sm:flex sm:items-start\">\r\n      {icon && (\r\n        <div className=\"mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10\">\r\n          <i className={`${icon} text-xl -mt-1`}></i>\r\n        </div>\r\n      )}\r\n      <div className=\"sm:flex sm:items-start\">\r\n        <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);","import { ReactNode } from 'react';\r\nexport const ModalFooter = ({ children }: { children: ReactNode }) => (\r\n  <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n    {children}\r\n  </div>\r\n);\r\n","import { ReactNode } from 'react';\r\n\r\nexport const ModalHeader = ({ children }: { children: ReactNode }) => (\r\n  <h3 className=\"text-lg leading-6 font-medium text-gray-900\" id=\"modal-title\">\r\n    {children}\r\n  </h3>\r\n);\r\n","import { ModalBody } from 'app/ui-react-components/shared-components/modals/modal-body.component';\r\nimport { ModalContent } from 'app/ui-react-components/shared-components/modals/modal-content.component';\r\nimport { ModalFooter } from 'app/ui-react-components/shared-components/modals/modal-footer.component';\r\nimport { ModalHeader } from 'app/ui-react-components/shared-components/modals/modal-header.component';\r\nimport { ReactNode } from 'react';\r\n\r\ninterface IModal {\r\n  title: string;\r\n  actionText: string;\r\n  type: keyof typeof bgClasses;\r\n  handleClickAction: () => void;\r\n  closeFn: () => void;\r\n  animationClass: string;\r\n  children: ReactNode;\r\n  icon?: string;\r\n  disableAction?: boolean;\r\n}\r\n\r\nconst bgClasses = {\r\n  confirm: {\r\n    normal: 'bg-prussian-blue-500',\r\n    hover: 'bg-prussian-blue-600',\r\n    focus: 'bg-prussian-blue-800',\r\n  },\r\n  alert: {\r\n    normal: 'bg-red-600',\r\n    hover: 'bg-red-700',\r\n    focus: 'bg-red-900',\r\n  }\r\n};\r\n\r\nexport const Modal = ({ title, children, type, actionText, icon, handleClickAction, closeFn, animationClass, disableAction = false }: IModal) => {\r\n\r\n  return (\r\n    <div className=\"fixed z-10 inset-0 overflow-y-auto\" aria-labelledby=\"modal-title\" role=\"dialog\" aria-modal=\"true\">\r\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n        <div className={`animate__animated ${animationClass} animate__faster fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity`} aria-hidden=\"true\"></div>\r\n\r\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n        <div className={`animate__animated ${animationClass} animate__faster inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>\r\n          <ModalContent icon={icon}>\r\n            <ModalHeader>\r\n              {title}\r\n            </ModalHeader>\r\n            <ModalBody>\r\n              {children}\r\n            </ModalBody>\r\n          </ModalContent>\r\n          <ModalFooter>\r\n            <button\r\n              onClick={handleClickAction}\r\n              type=\"button\"\r\n              className={`w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 ${bgClasses[type].normal} text-base font-medium text-white hover:${bgClasses[type].focus} focus:outline-none focus:ring-0 focus:${bgClasses[type].focus} sm:ml-3 sm:w-auto sm:text-sm`}\r\n              disabled={disableAction}\r\n            >\r\n              {actionText}\r\n            </button>\r\n            <button onClick={closeFn} type=\"button\" className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-0 focus:bg-gray-200 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\">\r\n              Cancel\r\n            </button>\r\n          </ModalFooter>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { ProjectDeletor } from 'app/libs/project-helpers/project-handlers/project-deletor.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { Modal } from 'app/ui-react-components/shared-components/modals/modal.component';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router';\r\n\r\nexport const DeleteProjectButton = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [animationClass, setAnimationClass] = useState('animate__fadeIn');\r\n  const currentProject = useSelector((store: AnitaStore) => store.project);\r\n  const navigate = useNavigate();\r\n\r\n  const handleClickModal = () => {\r\n    if (isModalOpen) {\r\n      setAnimationClass('animate__fadeOut')\r\n      setTimeout(() => setIsModalOpen(false), 500);\r\n    } else {\r\n      setAnimationClass('animate__fadeIn')\r\n      setIsModalOpen(true)\r\n    }\r\n  }\r\n\r\n  const handleClickDelete = () => {\r\n    handleClickModal();\r\n    if (currentProject?.[RESERVED_AUDS_KEYS._settings][0]?.id === project.id)\r\n      store.dispatch({ type: REDUX_ACTIONS.resetCurrentProject });\r\n    // This timeout must be equal or greater than the one in closeFn.\r\n    // Otherwise we would cause an update on an unmounted component.\r\n    setTimeout(() => {\r\n      new ProjectDeletor(project).delete();\r\n      navigate(ANITA_URLS.projectsList);\r\n    }, 500);\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <button onClick={handleClickModal} className=\"px-4 py-2 text-red-700 inline-flex items-center md:mb-2 lg:mb-0 rounded bg-red-700 bg-opacity-10 hover:bg-opacity-20 text-sm\">\r\n        <i className=\"bi-trash\"></i><span className=\"ml-2 hidden lg:inline-block\">Delete project</span>\r\n      </button>\r\n      {isModalOpen && <Modal\r\n        title=\"Delete Project\"\r\n        actionText=\"Delete\"\r\n        type=\"alert\"\r\n        handleClickAction={handleClickDelete}\r\n        closeFn={handleClickModal}\r\n        animationClass={animationClass}\r\n        icon=\"text-red-600 bi-exclamation-triangle\"\r\n      >\r\n        <p className=\"text-sm text-gray-500\">\r\n          Are you sure you want to delete this project?<br /><br />All project data will be permanently removed from this device. This action cannot be undone.<br /><br />Data stored on other devices will not be affected.\r\n        </p>\r\n\r\n      </Modal>\r\n      }\r\n    </span>\r\n  )\r\n}\r\n","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\n\r\n/**\r\n * Accepts a url and a param and replaces all the occurences of the url param with a given value\r\n */\r\nexport function urlParamFiller(url: string, paramsToFill: Array<{ name: URL_PARAMS; value: string }>): string {\r\n  let result = url;\r\n  paramsToFill.forEach(params => { result = result.replace(new RegExp(`:${params.name}`, 'g'), params.value) });\r\n  return result;\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const EditButton = ({ project }: { project: ProjectSettings }) => (\r\n  <Link to={urlParamFiller(ANITA_URLS.projectEdit, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-gray-800 mr-3 inline-flex items-center ml-auto leading-none text-sm bg-gray-100 hover:bg-gray-200 rounded\">\r\n    <i className=\"bi-pencil\"></i> <span className=\"ml-2 hidden sm:inline-block\">Edit Project</span>\r\n  </Link>\r\n)","import { ReactNode } from 'react';\r\n\r\nexport const CardFooterItemsEnd = ({ children }: { children: ReactNode }) => (\r\n  <div className=\"flex items-end flex-wrap mt-6\">\r\n    {children}\r\n  </div>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { availableSystems } from 'app/data/project-form-builder/project-info-builder.constant';\r\nimport { ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { txtByFieldValue } from 'app/libs/project-helpers/txt-by-field-value.function';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nconst LoadedProject = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"p-6\">\r\n    <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Description</p>\r\n    <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n    <p className=\"text-md mb-3\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.createdAt))}</p>\r\n\r\n    <p className=\"text-gray-600 text-xs\">Storage method:</p>\r\n    <p className=\"text-md\">{txtByFieldValue(availableSystems, project.localStorage)}</p>\r\n\r\n    <CardFooterItemsEnd>\r\n      <DeleteProjectButton project={project} />\r\n      <EditButton project={project} />\r\n    </CardFooterItemsEnd>\r\n\r\n  </div>\r\n)\r\n\r\nexport const ProjectDetails = () => {\r\n\r\n  const urlParams = useParams();\r\n  const projectId = urlParams[URL_PARAMS.projectId];\r\n  const [project, setElement] = useState<ProjectSettings>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadProject = async () => {\r\n      const canProceed = await isProjectLoaded(projectId);\r\n\r\n      if (!canProceed)\r\n        return setElement(undefined);\r\n\r\n      const project = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_AUDS_KEYS._settings).single();\r\n      if (isMounted)\r\n        setElement(project);\r\n    }\r\n\r\n    if (isMounted)\r\n      loadProject();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectId]);\r\n\r\n  // If there is no DB instance loaded, for now we just redirect to the project list\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  return (\r\n    <div className=\"relative border-2 border-gray-200 border-opacity-60 rounded bg-white\" style={{ minHeight: \"200px\" }}>\r\n      {(project === null) ? <Loader /> : <LoadedProject project={project} />}\r\n    </div>\r\n  )\r\n\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { DANGER_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { Modal } from 'app/ui-react-components/shared-components/modals/modal.component';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const DeleteSectionElementButton = ({ projectId, sectionId, elementId }: { projectId: string, sectionId: string, elementId: string }) => {\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [animationClass, setAnimationClass] = useState('animate__fadeIn');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleClickModal = () => {\r\n    if (isModalOpen) {\r\n      setAnimationClass('animate__fadeOut')\r\n      setTimeout(() => setIsModalOpen(false), 500);\r\n    } else {\r\n      setAnimationClass('animate__fadeIn')\r\n      setIsModalOpen(true)\r\n    }\r\n  }\r\n\r\n  const handleClickDelete = () => {\r\n    handleClickModal();\r\n    // This timeout must be equal or greater than the one in closeFn.\r\n    // Otherwise we would cause an update on an unmounted component.\r\n    setTimeout(() => {\r\n      dbInstances[projectId].callDeletor(sectionId, { id: elementId }).autoDelete();\r\n      navigate(urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }]));\r\n    }, 500);\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <button data-tip data-for=\"deleteElement\" onClick={handleClickModal} className={`${DANGER_BTN_OUTLINE} mt-6 px-4 py-2`}>\r\n        <i className=\"bi-trash\"></i>\r\n      </button>\r\n      <ReactTooltip id=\"deleteElement\" effect=\"solid\">Delete element</ReactTooltip>\r\n      {isModalOpen && <Modal\r\n        title=\"Delete element\"\r\n        actionText=\"Delete\"\r\n        type=\"alert\"\r\n        handleClickAction={handleClickDelete}\r\n        closeFn={handleClickModal}\r\n        animationClass={animationClass}\r\n        icon=\"text-red-600 bi-exclamation-triangle\"\r\n      >\r\n        <p className=\"text-sm text-gray-500\">\r\n          Are you sure you want to delete this element?\r\n        </p>\r\n        <p className=\"text-sm text-gray-500\">\r\n          This action cannot be undone.\r\n        </p>\r\n\r\n      </Modal>\r\n      }\r\n    </span>\r\n  )\r\n}\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport {\r\n  ParentInfoForDetailsView,\r\n  RESERVED_AUDS_KEYS,\r\n  SectionElement,\r\n  SystemData\r\n  } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { findFirstUserDefinedField } from 'app/libs/tools/find-first-user-defined-field.function';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { asyncForEach } from 'app/libs/tools/tools';\r\nimport { FormModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport class GetParentInfoForDetailsView {\r\n\r\n  private parentInfoForDetailsView: Array<ParentInfoForDetailsView> = [];\r\n\r\n  constructor(\r\n    private listOfParents: Array<string>,\r\n    private projectId: string,\r\n    private sections: SystemData[RESERVED_AUDS_KEYS._sections]\r\n  ) { }\r\n\r\n  public async get(): Promise<Array<ParentInfoForDetailsView>> {\r\n    await asyncForEach(this.listOfParents, async sectionIdElementId => await this.processElement(sectionIdElementId));\r\n    return this.parentInfoForDetailsView;\r\n  }\r\n\r\n  private async processElement(sectionIdElementId: string): Promise<void> {\r\n    const arrInfo = sectionIdElementId.split('|');\r\n    const element = await dbInstances[this.projectId].callSelector<SectionElement>(arrInfo[0], { [RESERVED_FIELDS.id]: arrInfo[1] }).single();\r\n    const section = findSectionById(this.sections, arrInfo[0]);\r\n    const indexFirstUserFiield = findFirstUserDefinedField(section.formModel as FormModel);\r\n    this.parentInfoForDetailsView.push({\r\n      sectionId: arrInfo[0],\r\n      element,\r\n      txt: element[section.formModel[indexFirstUserFiield].fieldName]\r\n    });\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ParentInfoForDetailsView, Section } from 'app/data/project-structure/project-info';\r\nimport { GetParentInfoForDetailsView } from 'app/libs/project-helpers/get-parent-info-for-details-view.class';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ParentsLinkShower = ({ projectId, parentsInfo, sections }: { projectId: string, parentsInfo: Array<string>, sections: Array<Section> }) => {\r\n\r\n  const [parents, setParents] = useState<Array<ParentInfoForDetailsView>>([]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getParents = async () => {\r\n      const parents = await new GetParentInfoForDetailsView(parentsInfo, projectId, sections).get();\r\n      if (isMounted) {\r\n        setParents(parents);\r\n      }\r\n    }\r\n\r\n    if (isMounted)\r\n      getParents();\r\n\r\n    return (): void => { isMounted = false; };\r\n  }, [parentsInfo, projectId, sections]);\r\n\r\n  return (\r\n    <div className=\"p-3 pt-0\">\r\n      <p className=\"text-sm text-gray-500 mb-2\">Parent elements:</p>\r\n      {parents.map((parent, index) => (\r\n        <Link to={urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n          { name: URL_PARAMS.projectId, value: projectId },\r\n          { name: URL_PARAMS.sectionId, value: parent.sectionId },\r\n          { name: URL_PARAMS.elementId, value: parent.element.id }\r\n        ])} key={parent.element.id} className=\"mr-2 py-1 px-4 bg-gray-200 hover:bg-gray-300 bg-opacity-80 rounded-md text-sm font-semibold\">\r\n          {parent.txt}\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  )\r\n\r\n};","export const BasicText = ({ value }) => value || null;\r\n","export const CheckBoxAsCheck = ({ value }: { value: boolean }) => value ? '✓' : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDateTime = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd hh:mm', new Date(value)) : null;\r\n","import * as dateFormat from 'date-format';\r\n\r\nexport const FormattedDate = ({ value }: { value: string }) => value ? dateFormat('yyyy/MM/dd', new Date(value)) : null;\r\n","import { txtByFieldValue } from 'app/libs/project-helpers/txt-by-field-value.function';\r\nimport { OptionKeysModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\n\r\nexport const TextFromOptionsByValue = (options: Array<OptionKeysModel>, { value }: { value: string | number }) => txtByFieldValue(options, value);\r\n","import { BasicText } from 'app/ui-react-components/project/values-renderers/basic-text.component';\r\nimport { CheckBoxAsCheck } from 'app/ui-react-components/project/values-renderers/check-box-as-check.component';\r\nimport { FormattedDateTime } from 'app/ui-react-components/project/values-renderers/formatted-date-time.component';\r\nimport { FormattedDate } from 'app/ui-react-components/project/values-renderers/formatted-date.component';\r\nimport { TextFromOptionsByValue } from 'app/ui-react-components/project/values-renderers/text-from-options-by-value.component';\r\nimport { FormFieldsModel, SupportedFormsTypes } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { FORM_COMPONENTS_CODES } from 'app/ui-react-components/shared-components/forms-automator/form-component-codes.enum';\r\n\r\nexport const customRenderPicker = (formModel: FormFieldsModel<SupportedFormsTypes>) => {\r\n  switch (formModel.componentCode) {\r\n    case FORM_COMPONENTS_CODES.basicInput:\r\n    case FORM_COMPONENTS_CODES.basicTextarea:\r\n      return BasicText;\r\n    case FORM_COMPONENTS_CODES.basicSelect:\r\n    case FORM_COMPONENTS_CODES.basicRadio:\r\n      return TextFromOptionsByValue.bind(null, formModel.options);\r\n    case FORM_COMPONENTS_CODES.basicCheckbox:\r\n      return CheckBoxAsCheck;\r\n    case FORM_COMPONENTS_CODES.datePicker:\r\n      return FormattedDate;\r\n    case FORM_COMPONENTS_CODES.dateTimePicker:\r\n      return FormattedDateTime;\r\n    default:\r\n      return BasicText\r\n  }\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IAddElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  mode: EDITOR_MODE.add;\r\n  elementId?: never;\r\n}\r\n\r\ninterface IEditElementButtonProps {\r\n  projectId: string;\r\n  sectionId: string;\r\n  elementId: string;\r\n  mode: EDITOR_MODE.edit;\r\n}\r\n\r\ntype IAddEditElementButtonProps = | IAddElementButtonProps | IEditElementButtonProps;\r\n\r\nexport const AddEditElementButton = ({ projectId, sectionId, mode, elementId }: IAddEditElementButtonProps) => {\r\n\r\n  const icon = mode === EDITOR_MODE.add ? 'bi-plus' : 'bi-pencil';\r\n  const urlParamsToFill = [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }];\r\n\r\n  if (mode === EDITOR_MODE.edit)\r\n    urlParamsToFill.push({ name: URL_PARAMS.elementId, value: elementId })\r\n\r\n  const urlToFill = mode === EDITOR_MODE.add ? ANITA_URLS.projectSectionAddEle : ANITA_URLS.projectSectionEditEle;\r\n\r\n  const url: string = urlParamFiller(urlToFill, urlParamsToFill);\r\n\r\n  return (\r\n    <Link to={url} className=\"absolute bottom-5 right-7 md:bottom-7 md:right-10 bg-prussian-blue-400 text-white text-xl shadow-xl rounded-3xl h-14 w-14 flex items-center justify-center\">\r\n      <i className={icon}></i>\r\n    </Link>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { RESERVED_AUDS_KEYS, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { DeleteSectionElementButton } from 'app/ui-react-components/project/details-components/delete-section-element-button.component';\r\nimport { ParentsLinkShower } from 'app/ui-react-components/project/details-components/parents-link-shower.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const SectionElementDetails = () => {\r\n\r\n  const [element, setElement] = useState<SectionElement>(null);\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const elementId = params[URL_PARAMS.elementId];\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const fetchData = async () => {\r\n      const canProceed = await isProjectLoaded(projectId);\r\n\r\n      if (!projectId || !sectionId || !elementId || !canProceed)\r\n        return setElement(undefined);\r\n\r\n      const element = await dbInstances[projectId].callSelector<SectionElement>(sectionId, { id: elementId }).single();\r\n\r\n      if (isMounted)\r\n        setElement(element);\r\n    }\r\n\r\n    if (isMounted)\r\n      fetchData();\r\n\r\n    return () => { isMounted = false };\r\n  }, [projectId, sectionId, elementId, project]);\r\n\r\n  if (element === undefined) {\r\n    if (projectId && sectionId)\r\n      return <Navigate to={urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])} />\r\n    else\r\n      return <Navigate to={ANITA_URLS.projectsList} />\r\n  }\r\n\r\n  return (\r\n    <MainContentContainer headerText=\"Details\">\r\n      {(element === null || project === null) ? <Loader /> : <ElementValuesViewer element={element} formModels={findSectionById(project[RESERVED_AUDS_KEYS._sections], sectionId).formModel as Array<FormFieldsModel<SectionElement>>} />}\r\n      {(element !== null && element.parentsInfo && Array.isArray(element.parentsInfo) && element.parentsInfo.length > 0) && <ParentsLinkShower projectId={projectId} parentsInfo={element.parentsInfo} sections={project[RESERVED_AUDS_KEYS._sections]} />}\r\n      {(element !== null && (<div>\r\n        <DeleteSectionElementButton projectId={projectId} sectionId={sectionId} elementId={elementId} />\r\n        <AddEditElementButton projectId={projectId} sectionId={sectionId} elementId={elementId} mode={EDITOR_MODE.edit} />\r\n      </div>\r\n      )\r\n      )}\r\n    </MainContentContainer>\r\n  )\r\n\r\n}\r\n\r\nconst ElementValuesViewer = ({ element, formModels }: { element: SectionElement, formModels: Array<FormFieldsModel<SectionElement>> }) => {\r\n\r\n  return (\r\n    <div className=\"p-3\">\r\n      {formModels.map((formModel) => {\r\n        if (!formModel.label)\r\n          return null;\r\n\r\n        return <ValueWithLabel key={formModel.fieldName} formModel={formModel} value={element[formModel.fieldName]} />\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ValueWithLabel = ({ formModel, value }: { formModel: FormFieldsModel<SectionElement>, value: any }) => {\r\n  if (typeof value === 'undefined')\r\n    return null;\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"text-sm text-gray-500\">{formModel.label}</p>\r\n      <p className=\"mb-3\">{customRenderPicker(formModel)({ value })}</p>\r\n    </div>\r\n  )\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ReactNode } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nexport const TdWithLinkToDetails = ({ children, tdProps, elementId }: { children: ReactNode, tdProps: {}, elementId: string }) => {\r\n\r\n  const navigation = useNavigate();\r\n  const params = useParams();\r\n\r\n  return (\r\n    <td\r\n      onClick={() => navigation(urlParamFiller(ANITA_URLS.projectSectionEleDetails, [\r\n        { name: URL_PARAMS.projectId, value: params.projectId },\r\n        { name: URL_PARAMS.sectionId, value: params.sectionId },\r\n        { name: URL_PARAMS.elementId, value: elementId }\r\n      ]))}\r\n      className=\"px-6 py-4 cursor-pointer\"\r\n      {...tdProps}\r\n    >\r\n      {children}\r\n    </td>\r\n  )\r\n\r\n}","import { SectionElement } from 'app/data/project-structure/project-info';\r\nimport { Section } from 'app/data/project-structure/project-info';\r\nimport { TdWithLinkToDetails } from 'app/ui-react-components/project/list-components/td-with-link-to-details.component';\r\nimport { customRenderPicker } from 'app/ui-react-components/project/values-renderers/custom-render-picker.component';\r\nimport { useMemo } from 'react';\r\nimport { useSortBy, useTable } from 'react-table';\r\n\r\n/**\r\n * Builds the columns for the table with react-table looping through sectionInfo\r\n */\r\nconst useSectionInfo = (sectionInfo: Section) => {\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const colsToShoww = useMemo(() => [], [sectionInfo.id, sectionInfo.formModel]);\r\n  useMemo(\r\n    () => {\r\n      return sectionInfo.formModel.forEach(formModel => {\r\n        if (sectionInfo.id && formModel.label)\r\n          colsToShoww.push({\r\n            Header: formModel.label,\r\n            accessor: formModel.fieldName,\r\n            Cell: customRenderPicker(formModel),\r\n          });\r\n      }\r\n      )\r\n    },\r\n\r\n    [sectionInfo.id, sectionInfo.formModel, colsToShoww]\r\n  )\r\n  return colsToShoww;\r\n}\r\n\r\n\r\nexport const TableList = ({ sectionInfo, sectionData }: { sectionInfo: Section; sectionData: Array<SectionElement> }) => {\r\n  const columns = useSectionInfo(sectionInfo);\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data: sectionData }, useSortBy);\r\n\r\n  return (\r\n    // apply the table props\r\n    <table className=\"table-auto w-full divide-y divide-gray-200\" {...getTableProps()}>\r\n      <thead className=\"bg-gray-50\">\r\n        {// Loop over the header rows\r\n          headerGroups.map(headerGroup => (\r\n            // Apply the header row props\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {// Loop over the headers in each row\r\n                headerGroup.headers.map(column => (\r\n                  // Apply the header cell props\r\n                  <th className=\"px-6 py-2 text-xs text-gray-500 text-left\" {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {// Render the header\r\n                      column.render('Header')}\r\n                  </th>\r\n                ))}\r\n            </tr>\r\n          ))}\r\n      </thead>\r\n      {/* Apply the table body props */}\r\n      <tbody className=\"divide-y divide-gray-200\" {...getTableBodyProps()}>\r\n        {// Loop over the table rows\r\n          rows.map(row => {\r\n            // Prepare the row for display\r\n            prepareRow(row)\r\n            return (\r\n              // Apply the row props\r\n              <tr className=\"whitespace-nowrap\" {...row.getRowProps()}>\r\n                {// Loop over the rows cells\r\n                  row.cells.map(cell => {\r\n                    // TODO No Link to details for checkbox\r\n                    // Apply the cell props\r\n                    return (\r\n                      <TdWithLinkToDetails key={`${cell.column.id}${cell.row.id}`} tdProps={cell.getCellProps()} elementId={cell.row.original.id}>\r\n                        {cell.render('Cell')}\r\n                      </TdWithLinkToDetails>\r\n                    )\r\n                  })}\r\n              </tr>\r\n            )\r\n          })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const NoSectionData = ({ sectionTitle, sectionId, projectId }: { sectionTitle: string, sectionId: string, projectId: string }) => (\r\n  <div className=\"container px-5 py-24 mx-auto\">\r\n    <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n      <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n        <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">Nothing here yet</h2>\r\n        <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">There are no items in {sectionTitle}</h1>\r\n        <p className=\"leading-relaxed mb-3\">Create a new entry to populate this list</p>\r\n        <div className=\"flex flex-wrap mt-7\">\r\n          <Link\r\n            to={urlParamFiller(ANITA_URLS.projectSectionAddEle, [{ name: URL_PARAMS.projectId, value: projectId }, { name: URL_PARAMS.sectionId, value: sectionId }])}\r\n            className=\"flex-grow mx-2 mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n          >Create a new element\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { RESERVED_AUDS_KEYS, SectionElement } from 'app/data/project-structure/project-info';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { findSectionById } from 'app/libs/tools/find-section-by-id.function';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { TableList } from 'app/ui-react-components/project/list-components/tableList.component';\r\nimport { NoSectionData } from 'app/ui-react-components/project/no-section-data.component';\r\nimport { AddEditElementButton } from 'app/ui-react-components/shared-components/buttons/add-edit-element-button.component';\r\nimport { MainContentContainer } from 'app/ui-react-components/shared-components/common-ui-eles/main-content-container.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router';\r\n\r\nexport const SectionElementsList = () => {\r\n\r\n  const params = useParams();\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const sectionId = params[URL_PARAMS.sectionId];\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const [sectionData, setSectionData] = useState<Array<SectionElement>>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const getSectionData = async () => {\r\n      const canProceed = await isProjectLoaded(projectId);\r\n\r\n      if (!canProceed)\r\n        return setSectionData(undefined);\r\n\r\n      const data = await dbInstances[projectId].callSelector<SectionElement>(sectionId).multiple();\r\n      if (isMounted)\r\n        setSectionData(data);\r\n    }\r\n\r\n    if (isMounted)\r\n      getSectionData();\r\n\r\n    return () => { isMounted = false; };\r\n  }, [sectionId, projectId]);\r\n\r\n  if (sectionData === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />;\r\n\r\n  if (project === null || sectionData === null)\r\n    return <Loader />;\r\n\r\n  const sectionInfo = findSectionById(project[RESERVED_AUDS_KEYS._sections], sectionId);\r\n\r\n  if (!sectionInfo)\r\n    return null;\r\n\r\n  if (sectionData.length === 0)\r\n    return <NoSectionData sectionId={sectionId} sectionTitle={sectionInfo.title} projectId={projectId} />;\r\n\r\n  return (\r\n    <MainContentContainer headerText={sectionInfo.title}>\r\n      <TableList sectionInfo={sectionInfo} sectionData={sectionData} />\r\n      <AddEditElementButton projectId={projectId} sectionId={sectionId} mode={EDITOR_MODE.add} />\r\n    </MainContentContainer>\r\n  )\r\n\r\n}","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { AdditionalInfoForLocalStorage, LocalProjectSettings, ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { CLIENT_SECTIONS } from 'app/data/system-local-db/client-sections.enum';\r\n\r\n/**\r\n * Saves project's settings in IndexedDB.\r\n */\r\nexport class SaveProjectSettingsInIndexedDB {\r\n\r\n  /**\r\n   * Copy of the settings of the project to be saved in IndexedDB\r\n   */\r\n  private copyOfProjectSettings: LocalProjectSettings;\r\n\r\n  /**\r\n   * Creates an instance of save project settings in indexed db.\r\n   * @param projectSettings settings Object of the project to store\r\n   * @param fileHandle handle of the file on disk. Saved in the IndexedDB for future use\r\n   */\r\n  constructor(\r\n    private projectSettings: ProjectSettings,\r\n    private localSettingAdditionalKeys: AdditionalInfoForLocalStorage\r\n  ) { }\r\n\r\n  /**\r\n   * Saves the project settings in IndexedDB with its additional keys for handling local storage\r\n   * @returns save \r\n   */\r\n  public async save(): Promise<LocalProjectSettings> {\r\n    this.setProjectSettingsCloneWithAdditionalKeys();\r\n    this.doStoreProjectSettings();\r\n\r\n    return this.copyOfProjectSettings;\r\n  }\r\n\r\n  /**\r\n   * Deep clonse settings and then adds the fileHandle to prevent setting the fileHandle on the project data object\r\n   */\r\n  private setProjectSettingsCloneWithAdditionalKeys(): void {\r\n    this.copyOfProjectSettings = { ...this.projectSettings, ...this.localSettingAdditionalKeys };\r\n  }\r\n\r\n  /**\r\n   * Stores the project settings with db-connector\r\n   */\r\n  private doStoreProjectSettings(): void {\r\n    dbInstances.system.callInsertor(CLIENT_SECTIONS.projects, this.copyOfProjectSettings).autoInsert();\r\n  }\r\n}\r\n","import { DbInitializer } from 'app/data/local-dbs/db-initializer.class';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\n\r\nexport class ProjectSaver {\r\n\r\n  private projectDataToSave: SystemData = {\r\n    [RESERVED_AUDS_KEYS._settings]: [],\r\n    [RESERVED_AUDS_KEYS._sections]: []\r\n  };\r\n\r\n  constructor(\r\n    private project: SystemData,\r\n    private mode: EDITOR_MODE\r\n\r\n  ) { }\r\n\r\n  public async save(): Promise<SystemData> {\r\n    this.projectDataToSave[RESERVED_AUDS_KEYS._settings] = this.project[RESERVED_AUDS_KEYS._settings].concat();\r\n    this.projectDataToSave[RESERVED_AUDS_KEYS._sections] = this.project[RESERVED_AUDS_KEYS._sections].concat();\r\n\r\n    this.setcreatedAt();\r\n\r\n    if (this.mode === EDITOR_MODE.edit)\r\n      this.setupdatedAt();\r\n\r\n    if (!dbInstances[this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].id])\r\n      await this.initDbInstance();\r\n\r\n\r\n    await this.saveSettings();\r\n    await this.saveSections();\r\n\r\n    await this.postSaveActions();\r\n\r\n    return this.projectDataToSave;\r\n  }\r\n\r\n  private setcreatedAt(): void {\r\n    this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].createdAt = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private setupdatedAt(): void {\r\n    this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].updatedAt = new Date(new Date().toUTCString()).toISOString();\r\n  }\r\n\r\n  private async initDbInstance(): Promise<void> {\r\n    await new DbInitializer(this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0], this.projectDataToSave[RESERVED_AUDS_KEYS._sections]).init();\r\n  }\r\n\r\n  private async saveSettings(): Promise<void> {\r\n    await dbInstances[this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].id].callInsertor(RESERVED_AUDS_KEYS._settings, this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0]).autoInsert();\r\n  }\r\n\r\n  private async saveSections(): Promise<void> {\r\n    await dbInstances[this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].id].callDeletor(RESERVED_AUDS_KEYS._sections).clearSection();\r\n    await dbInstances[this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].id].callInsertor(RESERVED_AUDS_KEYS._sections, this.projectDataToSave[RESERVED_AUDS_KEYS._sections]).autoInsert();\r\n  }\r\n\r\n  private async postSaveActions(): Promise<void> {\r\n    const methodName = this.mode === EDITOR_MODE.add ? 'postProjectCreation' : 'postProjectUpdate';\r\n    const payload = await dbInstances[this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0].id].dbStore[methodName]?.(this.projectDataToSave) || {};\r\n\r\n    await new SaveProjectSettingsInIndexedDB(this.projectDataToSave[RESERVED_AUDS_KEYS._settings][0], payload).save();\r\n\r\n  }\r\n\r\n}\r\n","import { URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { PROJECT_EDITOR_FORM_BUILDER } from 'app/data/project-form-builder/project-editor-form-builder.const';\r\nimport { RESERVED_AUDS_KEYS, Section } from 'app/data/project-structure/project-info';\r\nimport {\r\n  IUpdateFormProjectUpdateFormModelAddOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelDeleteOptionPayload,\r\n  IUpdateFormProjectUpdateFormModelOfSectionPayload,\r\n  IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n  } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { cleanString } from 'app/libs/tools/tools';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport {\r\n  FormAutomatorOnChangeValue,\r\n  FormFieldsModel,\r\n  OptionKeysModel,\r\n  SupportedFormsTypes\r\n  } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\n\r\ninterface ISectionFormModelManagerProps {\r\n  indexSection: number;\r\n  indexFormElement: number;\r\n  element: FormFieldsModel<SupportedFormsTypes>;\r\n}\r\n\r\nconst getAlreadyExists = (section: Section, fieldName: string): boolean => {\r\n  if (!fieldName || !section) return false;\r\n  return section.formModel.some(formElement => formElement.fieldName === fieldName);\r\n}\r\n\r\nexport const SectionFormModelManager = (props: ISectionFormModelManagerProps) => {\r\n\r\n  const { indexSection, indexFormElement, element } = props;\r\n\r\n  const params = useParams();\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const section = useSelector((state: AnitaStore) => state.formProject.original[RESERVED_AUDS_KEYS._sections][indexSection]);\r\n  const projectId = params[URL_PARAMS.projectId];\r\n  const mode = useMemo(() => projectId ? EDITOR_MODE.edit : EDITOR_MODE.add, [projectId]);\r\n  const alreadyExists = getAlreadyExists(section, element.fieldName);\r\n  const formModelToUse = useMemo(() => mode === EDITOR_MODE.edit && alreadyExists ?\r\n    PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].sectionEles.existingItem :\r\n    PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].sectionEles.newItem,\r\n    [alreadyExists, mode, projectEditorMode]\r\n  );\r\n\r\n  const handleChange = (indexSection: number, indexFormElement: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    const identifierAutoVal = fieldName === 'label' && !alreadyExists ? { 'fieldName': (typeof value === 'string') ? cleanString(value) : value } : {};\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOfSection, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        formElement: { ...element, ...identifierAutoVal, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOfSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleOptionsChange = (indexSection: number, indexFormElement: number, indexOptions: number, optionElement: OptionKeysModel, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelOptionValue, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions,\r\n        formElement: { ...optionElement, [fieldName]: value }\r\n      } as IUpdateFormProjectUpdateFormModelOptionValuePayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddOption = (indexSection: number, indexFormElement: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelAddOption, payload: {\r\n        indexSection,\r\n        indexFormElement\r\n      } as IUpdateFormProjectUpdateFormModelAddOptionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickDeleteOption = (indexSection: number, indexFormElement: number, indexOptions: number) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateFormModelDeleteOption, payload: {\r\n        indexSection,\r\n        indexFormElement,\r\n        indexOptions\r\n      } as IUpdateFormProjectUpdateFormModelDeleteOptionPayload\r\n    });\r\n  }\r\n\r\n  return (\r\n    <FormAutomator\r\n      {\r\n      ...{\r\n        ...props,\r\n        formModel: formModelToUse as Array<FormFieldsModel<any>>,\r\n        handleChange: handleChange.bind(undefined, indexSection, indexFormElement),\r\n        handleOptionsChange: handleOptionsChange.bind(undefined, indexSection, indexFormElement),\r\n        handleClickAddOption: handleClickAddOption.bind(undefined, indexSection, indexFormElement),\r\n        handleClickDeleteOption: handleClickDeleteOption.bind(undefined, indexSection, indexFormElement)\r\n      }\r\n      }\r\n    />\r\n  )\r\n\r\n}","import { PROJECT_EDITOR_FORM_BUILDER } from 'app/data/project-form-builder/project-editor-form-builder.const';\r\nimport { RESERVED_AUDS_KEYS, Section } from 'app/data/project-structure/project-info';\r\nimport { RESERVED_FIELDS } from 'app/data/project-structure/reserved-fields.constant';\r\nimport { IUpdateFormProjectRemoveFieldFromSectionPayload, IUpdateFormProjectUpdateSectionPayload } from 'app/libs/redux/action.type';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { SectionFormModelManager } from 'app/ui-react-components/projects/add-edit-project-components/section-form-model-manager.component';\r\nimport { DANGER_BTN_OUTLINE, SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SectionManager = ({ section, sectionIndex }: { section: Section, sectionIndex: number }) => {\r\n\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const sections = useSelector((store: AnitaStore) => store.formProject.project[RESERVED_AUDS_KEYS._sections]);\r\n  const customFields: Array<string> = section.formModel\r\n    .map(formElement => Object.values(RESERVED_FIELDS).includes(formElement.fieldName) ? null : formElement.fieldName)\r\n    .filter(fieldName => fieldName !== null);\r\n\r\n  const handleChange = (index: number, fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({\r\n      type: REDUX_ACTIONS.updateFormProjectUpdateSection, payload: {\r\n        section: { ...section, [fieldName]: value },\r\n        index\r\n      } as IUpdateFormProjectUpdateSectionPayload\r\n    });\r\n  }\r\n\r\n  const handleClickAddField = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddFieldToSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveSection, payload: sectionIndex });\r\n  }\r\n\r\n  const handleClickDeleteField = (fieldIndex: number) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectRemoveFieldFromSection, payload: { sectionIndex, fieldIndex } as IUpdateFormProjectRemoveFieldFromSectionPayload });\r\n  }\r\n\r\n  return (\r\n    <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n      <div>\r\n        <h3 className=\"text-md font-bold\">{`Section # ${sectionIndex + 1}`}</h3>\r\n        <hr className=\"mt-4\" />\r\n      </div>\r\n      <div className=\"pt-4\">\r\n        <FormAutomator\r\n          formModel={PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].sectionInfo as Array<FormFieldsModel<any>>}\r\n          element={section}\r\n          handleChange={handleChange.bind(undefined, sectionIndex)}\r\n          sectionId={section.id}\r\n        />\r\n      </div>\r\n      <h4 className=\"pl-2 font-bold mb-2 mt-6\">Section element fields</h4>\r\n      {section.formModel.map((formElement, indexFormElement) =>\r\n        !customFields.includes(formElement.fieldName) ? null : (\r\n          <div key={`${section.id}-${indexFormElement}`} className=\"border border-transparent hover:border-prussian-blue-500 shadow rounded mb-3 p-4\">\r\n            <SectionFormModelManager\r\n              indexFormElement={indexFormElement}\r\n              indexSection={sectionIndex}\r\n              element={formElement}\r\n            />\r\n            {customFields.length < 2 ? null : (\r\n              <div className=\"flex justify-end\">\r\n                <button\r\n                  onClick={handleClickDeleteField.bind(undefined, indexFormElement)}\r\n                  className={`text-sm py-1 px-3 ${DANGER_BTN_OUTLINE}`}>\r\n                  Delete field\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      )}\r\n      <div className=\"flex items-end mt-10 mb-1\">\r\n        {(sections.length > 1) && <button onClick={handleClickDeleteSection}\r\n          className={`py-2 px-4 text-sm ${DANGER_BTN_OUTLINE}`}>\r\n          Delete section\r\n        </button>}\r\n        <button onClick={handleClickAddField}\r\n          className={`ml-auto py-2 px-4 text-sm ${SUCCESS_BTN_OUTLINE}`}>\r\n          Add field\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { PROJECT_EDITOR_FORM_BUILDER } from 'app/data/project-form-builder/project-editor-form-builder.const';\r\nimport { RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { ProjectSaver } from 'app/libs/project-helpers/project-handlers/project-saver.class';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { SectionManager } from 'app/ui-react-components/projects/add-edit-project-components/section-manager.component';\r\nimport { SUCCESS_BTN_OUTLINE } from 'app/ui-react-components/shared-components/buttons/buttons-layout-tw-classes.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router';\r\n\r\nexport const FormProjectManager = () => {\r\n\r\n  const { projectId } = useParams<URL_PARAMS>();\r\n  const projectEditorMode = useSelector((store: AnitaStore) => store.formProject.mode);\r\n  const project = useSelector((state: AnitaStore) => state.formProject.project);\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n  const mode: EDITOR_MODE = projectId ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n  const navigate = useNavigate();\r\n\r\n  const handleProjectChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectSettings, payload: { ...project[RESERVED_AUDS_KEYS._settings][0], [fieldName]: value } });\r\n  }\r\n\r\n  const handleClickSave = async () => {\r\n    await new ProjectSaver(project as SystemData, mode).save();\r\n    await new ProjectsListLoader().load();\r\n    new CurrentProjectSetter(project[RESERVED_AUDS_KEYS._settings], project[RESERVED_AUDS_KEYS._sections]).set();\r\n    navigate(urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project[RESERVED_AUDS_KEYS._settings][0].id }]));\r\n  }\r\n\r\n  const handleClickAddSection = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.updateFormProjectAddSection });\r\n  }\r\n\r\n  const projectFormModel = mode === EDITOR_MODE.add ?\r\n    PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].projectInfo.newItem :\r\n    PROJECT_EDITOR_FORM_BUILDER[projectEditorMode].projectInfo.existingItem;\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <FormAutomator formModel={projectFormModel as any} element={project[RESERVED_AUDS_KEYS._settings][0]} handleChange={handleProjectChange} />\r\n      </div>\r\n      <div className=\"px-1 md:px-2 lg:px-3\">\r\n        {project[RESERVED_AUDS_KEYS._sections].map((section, index) => <SectionManager key={section.id} section={section} sectionIndex={index} />)}\r\n      </div>\r\n      <div className=\"mt-5 p-4 bg-white rounded shadow\">\r\n        <div className=\"flex items-end flex-wrap\">\r\n          <button\r\n            className={`w-full sm:w-auto py-2 px-6 sm:mr-3 ${SUCCESS_BTN_OUTLINE}`}\r\n            onClick={handleClickAddSection}\r\n          >Add section</button>\r\n          <button\r\n            className=\"w-5/12 sm:w-auto sm:ml-auto py-2 px-6 bg-gray-200 font-semibold rounded hover:bg-gray-300 mr-3\"\r\n            onClick={() => navigate(-1)}\r\n          >Cancel</button>\r\n          <button\r\n            disabled={Object.keys(validObj).some(key => validObj[key] === false)}\r\n            className=\"w-5/12 ml-auto sm:ml-0 mt-8 sm:mt-0 sm:w-auto py-2 px-6 bg-prussian-blue-400 text-white font-semibold rounded hover:bg-prussian-blue-500 disabled:bg-gray-400 disabled:bg-opacity-40 disabled:cursor-not-allowed\"\r\n            onClick={handleClickSave}\r\n          >Save</button>\r\n        </div>\r\n      </div>\r\n    </span>\r\n  )\r\n}","import { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport './project-editor-mode-toggle.component.css';\r\nexport const ProjectEditorModeToggle = () => {\r\n\r\n  const handleChangeProjectEditorMode = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.setProjectEditorMode });\r\n  };\r\n\r\n  return (\r\n    <div className=\"ml-auto\">\r\n      <label htmlFor=\"project-editor-mode-toggle\" className=\"flex items-center cursor-pointer\">\r\n        <div className=\"mr-3 mt-1 text-gray-500 text-xs leading-none text-right\">\r\n          Advanced<br />mode\r\n        </div>\r\n        <div className=\"relative mt-1\">\r\n          <input type=\"checkbox\" id=\"project-editor-mode-toggle\" className=\"sr-only\" onChange={handleChangeProjectEditorMode} />\r\n          <div className=\"block bg-gray-600 w-10 h-6 rounded-full\"></div>\r\n          <div className=\"dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition\"></div>\r\n        </div>\r\n      </label>\r\n\r\n    </div>\r\n  )\r\n}","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport {\r\n  ProjectSettings,\r\n  RESERVED_AUDS_KEYS,\r\n  Section,\r\n  SystemData\r\n  } from 'app/data/project-structure/project-info';\r\nimport { IdCreator } from 'app/libs/id-creator/id-creator.class';\r\nimport { isProjectLoaded } from 'app/libs/project-helpers/project-handlers/is-project-loaded.function';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { EDITOR_MODE } from 'app/ui-react-components/editor-mode.enum';\r\nimport { FormProjectManager } from 'app/ui-react-components/projects/add-edit-project-components/form-project-manager.component';\r\nimport { ProjectEditorModeToggle } from 'app/ui-react-components/projects/add-edit-project-components/project-editor-mode-toggle.component';\r\nimport { Loader } from 'app/ui-react-components/shared-components/loader/loader.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nexport const AddEditProject = () => {\r\n\r\n  const params = useParams();\r\n  const mode = params[URL_PARAMS.projectId] ? EDITOR_MODE.edit : EDITOR_MODE.add;\r\n\r\n  const projectId = params[URL_PARAMS.projectId];\r\n\r\n  const [project, setProject] = useState<Partial<SystemData> | null | undefined>(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    // in add mode, sets a new project\r\n    if (mode === EDITOR_MODE.add)\r\n      return setProject({\r\n        [RESERVED_AUDS_KEYS._settings]: [{ id: IdCreator.random(), title: '', description: '', createdAt: '', localStorage: LOCAL_STORAGE_SYSTEMS.IndexedDB }],\r\n        [RESERVED_AUDS_KEYS._sections]: [{ id: IdCreator.random(), title: '', formModel: [{} as any] }],\r\n      });\r\n\r\n\r\n    const fetchEProject = async () => {\r\n      const canProceed = await isProjectLoaded(projectId);\r\n      if (!projectId || !canProceed)\r\n        return setProject(undefined);\r\n\r\n      const _settings = await dbInstances[projectId].callSelector<ProjectSettings>(RESERVED_AUDS_KEYS._settings).multiple();\r\n      const _sections = await dbInstances[projectId].callSelector<Section>(RESERVED_AUDS_KEYS._sections).multiple();\r\n\r\n      if (isMounted)\r\n        setProject({ _settings, _sections });\r\n    };\r\n\r\n    if (isMounted)\r\n      fetchEProject();\r\n\r\n    return () => { isMounted = false; }\r\n  }, [mode, projectId]);\r\n\r\n  if (project === undefined)\r\n    return <Navigate to={ANITA_URLS.projectsList} />\r\n\r\n  const headerText = mode === EDITOR_MODE.add ? 'Add Project' : 'Edit Project';\r\n\r\n  store.dispatch({ type: REDUX_ACTIONS.setFormProject, payload: project });\r\n\r\n  return (\r\n    <span>\r\n      <div className=\"p-4 bg-white rounded shadow flex\">\r\n        <div>\r\n          <h3 className=\"text-xl font-bold\">{headerText}</h3>\r\n        </div>\r\n        {project !== null && <ProjectEditorModeToggle />}\r\n      </div>\r\n      {project === null && <Loader />}\r\n      {project !== null && <FormProjectManager />}\r\n    </span>\r\n  )\r\n\r\n};\r\n","import { DbInitializer } from 'app/data/local-dbs/db-initializer.class';\r\nimport { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { LOCAL_STORAGE_SYSTEMS } from 'app/data/local-dbs/local-storage-systems.enum';\r\nimport { AnitaUniversalDataStorage, ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { SaveProjectSettingsInIndexedDB } from 'app/libs/project-helpers/project-handlers/save-project-settings-in-indexeddb.class';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\n\r\n/**\r\n * Imports one project file, and then calls `SaveProjectSettingsInIndexedDB`.\r\n * Also sets the last imported project as the current one by calling `CurrentProjectSetter`.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n * @see CurrentProjectSetter\r\n */\r\nexport class ProjectDataImporter {\r\n\r\n  /**\r\n   * \r\n   * @param projectData The project data of the project to import\r\n   * @param fileHandle FileSystemFileHandle of the project to import\r\n   */\r\n  constructor(\r\n    private projectData: AnitaUniversalDataStorage,\r\n    private fileHandle: FileSystemFileHandle\r\n\r\n  ) { }\r\n\r\n  /**\r\n   * Asks for the files to import and processes them, then sets the current project as the last one imported \r\n   */\r\n  public async import(): Promise<void> {\r\n    await this.initializeDb();\r\n    await this.setLocalProjectSettings();\r\n    this.dispatchProject(this.projectData[RESERVED_AUDS_KEYS._settings][0]);\r\n\r\n    // Relaxed equality check, because in the form the localStorage data is stored as a string\r\n    // eslint-disable-next-line eqeqeq\r\n    if (this.projectData[RESERVED_AUDS_KEYS._settings][0].localStorage == LOCAL_STORAGE_SYSTEMS.IndexedDB)\r\n      await this.saveDataToDb();\r\n  }\r\n\r\n  private async setLocalProjectSettings() {\r\n    const payload = await dbInstances[this.projectData[RESERVED_AUDS_KEYS._settings][0].id].dbStore.postProjectCreation?.(this.projectData) || {};\r\n    await new SaveProjectSettingsInIndexedDB(this.projectData[RESERVED_AUDS_KEYS._settings][0], payload).save();\r\n  }\r\n\r\n  /**\r\n   * Initialize the DbConnector instance\r\n   */\r\n  private async initializeDb(): Promise<void> {\r\n    await new DbInitializer(this.projectData[RESERVED_AUDS_KEYS._settings][0], this.projectData[RESERVED_AUDS_KEYS._sections], this.fileHandle).init();\r\n  }\r\n\r\n  private async saveDataToDb(): Promise<any> {\r\n    for (const section in this.projectData)\r\n      await dbInstances[this.projectData[RESERVED_AUDS_KEYS._settings][0].id].callInsertor(section, this.projectData[section]).autoInsert();\r\n  }\r\n\r\n  /**\r\n   * Dispatches the action to add the project to the list of projects\r\n   */\r\n  private dispatchProject(payload: ProjectSettings): void {\r\n    store.dispatch({ type: REDUX_ACTIONS.addProjectToList, payload });\r\n  }\r\n\r\n}\r\n","import { AnitaUniversalDataStorage } from 'app/data/project-structure/project-info';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { getFileHandle, readFileHandleAsText } from 'app/libs/db-connector/plugins/file-handles/helpers/fs-helper';\r\nimport fileDialog from 'file-dialog';\r\n\r\n/**\r\n * Imports one or more existing project files, and then calls `SaveProjectSettingsInIndexedDB`.\r\n * Also sets the last imported project as the current one by calling `CurrentProjectSetter`.\r\n *\r\n * @see SaveProjectSettingsInIndexedDB\r\n * @see CurrentProjectSetter\r\n */\r\nexport class ProjectFileImporter {\r\n\r\n  /**\r\n   * List of FileSystemFileHandle for each project to import\r\n   */\r\n  private fileHandle: FileSystemFileHandle;\r\n  /**\r\n   * The file contents of each project to import\r\n   */\r\n  private fileContents: string;\r\n  /**\r\n   * The project data of each project to import\r\n   */\r\n  private projectData: AnitaUniversalDataStorage;\r\n\r\n  /**\r\n   * Asks for the files to import and processes them, then sets the current project as the last one imported \r\n   */\r\n  public async import(): Promise<{ project: AnitaUniversalDataStorage, fileHandle: FileSystemFileHandle } | void> {\r\n    if (typeof window['showOpenFilePicker'] === 'function')\r\n      await this.askForFileHandle();\r\n    else\r\n      await this.importFromFile();\r\n\r\n    if (!this.fileContents)\r\n      return;\r\n\r\n    this.parseFileContents();\r\n    return { project: this.projectData, fileHandle: this.fileHandle };\r\n  }\r\n\r\n  /**\r\n   * Asks for user permission to open a file with File System Access API\r\n   */\r\n  private async askForFileHandle(): Promise<void> {\r\n    const fileHandles = await getFileHandle();\r\n    this.fileHandle = fileHandles[0];\r\n    this.fileContents = await readFileHandleAsText(this.fileHandle);\r\n  }\r\n\r\n  /**\r\n   * Asks  for a file with file-dialog\r\n   */\r\n  public async importFromFile(): Promise<void> {\r\n    const files = await fileDialog({ multiple: false, accept: 'text/json' });\r\n    this.fileContents = await files[0].text();\r\n  }\r\n\r\n  /**\r\n   * Converts the string of the project to the type `AnitaUniversalDataStorage`\r\n   */\r\n  private parseFileContents(): void {\r\n    this.projectData = JSON.parse(this.fileContents);\r\n  }\r\n\r\n}\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { projectInfoNewItem } from 'app/data/project-form-builder/project-info-builder.constant';\r\nimport { AnitaUniversalDataStorage, ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { FileSystemFileHandle } from 'app/libs/db-connector/plugins/file-handles/helpers/file-system-access-api';\r\nimport { CurrentProjectSetter } from 'app/libs/project-helpers/project-handlers/current-project-setter.class';\r\nimport { ProjectDataImporter } from 'app/libs/projects-helpers/project-importers/project-data-importer.class';\r\nimport { ProjectFileImporter } from 'app/libs/projects-helpers/project-importers/project-file-importer.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { FormAutomator } from 'app/ui-react-components/shared-components/forms-automator/form-automator.component';\r\nimport { FormAutomatorOnChangeValue, FormFieldsModel } from 'app/ui-react-components/shared-components/forms-automator/form-automator.types';\r\nimport { Modal } from 'app/ui-react-components/shared-components/modals/modal.component';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const ImportProjectButton = ({ btnType = 'icon' }: { btnType?: 'icon' | 'text' }) => {\r\n\r\n  const navigate = useNavigate();\r\n  const validObj = useSelector((state: AnitaStore) => state.formElesValidState);\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [animationClass, setAnimationClass] = useState('animate__fadeIn');\r\n  const [projectData, setProjectData] = useState<AnitaUniversalDataStorage>(null);\r\n  const [projectFileHandle, setProjectFileHandle] = useState<FileSystemFileHandle>();\r\n  const [projectSettings, setProjectSettings] = useState<ProjectSettings>(null);\r\n\r\n  const handleClickModal = async () => {\r\n    if (isModalOpen) {\r\n      setAnimationClass('animate__fadeOut')\r\n      setTimeout(() => setIsModalOpen(false), 500);\r\n    } else {\r\n      const { project, fileHandle } = await new ProjectFileImporter().import() || {};\r\n\r\n      if (!project)\r\n        return;\r\n\r\n      setAnimationClass('animate__fadeIn')\r\n      setIsModalOpen(true)\r\n      setProjectData(project);\r\n      setProjectSettings(project[RESERVED_AUDS_KEYS._settings][0])\r\n      setProjectFileHandle(fileHandle);\r\n    }\r\n  }\r\n\r\n  const handleClickImport = async () => {\r\n    projectData[RESERVED_AUDS_KEYS._settings][0] = projectSettings;\r\n    await new ProjectDataImporter(projectData, projectFileHandle).import();\r\n    handleClickModal();\r\n    new CurrentProjectSetter(projectData[RESERVED_AUDS_KEYS._settings], projectData[RESERVED_AUDS_KEYS._sections]).set();\r\n    setTimeout(() => navigate(ANITA_URLS.projectsList), 500);\r\n  }\r\n\r\n  const handleProjectChange = (fieldName: string | number, value: FormAutomatorOnChangeValue) => {\r\n    setProjectSettings({ ...projectSettings, [fieldName]: value });\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {btnType === 'icon' ? (<span><button data-tip data-for=\"importProject\"\r\n        onClick={handleClickModal}\r\n        className=\"mx-2 my-2 text-white bg-prussian-blue-600 border-0 py-1 px-6 focus:outline-none hover:bg-prussian-blue-700 rounded font-bold text-sm\"\r\n      ><i className=\"bi bi-arrow-bar-down\"></i>\r\n      </button>\r\n        <ReactTooltip id=\"importProject\" effect=\"solid\">\r\n          <span>Import an existing project</span>\r\n        </ReactTooltip></span>\r\n      ) : (\r\n        <button data-tip data-for=\"importProject\"\r\n          onClick={handleClickModal}\r\n          className=\"w-full mt-4 text-white bg-prussian-blue-400 border-0 py-3 px-8 focus:outline-none hover:bg-prussian-blue-500 rounded font-bold text-sm\"\r\n        >\r\n          Import an existing project\r\n        </button>\r\n      )}\r\n      {isModalOpen && <Modal\r\n        title=\"Import project\"\r\n        actionText=\"Import\"\r\n        type=\"confirm\"\r\n        handleClickAction={handleClickImport}\r\n        closeFn={handleClickModal}\r\n        animationClass={animationClass}\r\n        disableAction={Object.keys(validObj).some(key => validObj[key] === false)}\r\n      >\r\n        {projectSettings && <FormAutomator element={projectSettings} formModel={projectInfoNewItem as Array<FormFieldsModel<any>>} handleChange={handleProjectChange} />}\r\n      </Modal>\r\n      }\r\n    </span>\r\n  )\r\n}\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ImportProjectButton } from 'app/ui-react-components/projects/project-importer-components/import-project-button.component';\r\nimport { Link } from 'react-router-dom';\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n\r\nexport const ProjectsNone = () => {\r\n\r\n  // className = \"\"\r\n\r\n  return (\r\n    <div className=\"container px-0 md:px2 lg:px-5 pt-20 md:pt-24 mx-auto\">\r\n      <div className=\"p-4 lg:w-2/3 mx-auto\">\r\n        <div className=\"h-full bg-white shadow px-8 pt-16 pb-16 rounded-lg overflow-hidden text-center relative\">\r\n          <h2 className=\"tracking-widest text-xs title-font font-medium text-gray-400 mb-1\">No projects found</h2>\r\n          <h1 className=\"title-font sm:text-2xl text-xl font-medium text-gray-900 mb-3\">You don't have any Projects on this device yet</h1>\r\n          <p className=\"leading-relaxed mb-3\">You can create a new project or import one from an existing project file.</p>\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 lg:gap-2 mt-7\">\r\n            <ImportProjectButton btnType=\"text\" />\r\n            <Link\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"w-full flex flex-wrap content-center justify-center mt-4 bg-gray-200 border-0 py-3 px-8 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            >Create a new project\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { EditButton } from 'app/ui-react-components/shared-components/buttons/edit-project-button.component';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ProjectLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <div className=\"ml-auto\">\r\n    <EditButton project={project} />\r\n    <Link to={urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: project.id }])} className=\"px-4 py-3 text-white inline-flex items-center leading-none text-sm bg-prussian-blue-400 hover:bg-prussian-blue-500 rounded\">\r\n      <i className=\"bi-info-circle mr-2\"></i>Project details\r\n    </Link>\r\n  </div>\r\n\r\n)","import { ProjectSettings } from 'app/data/project-structure/project-info';\r\nimport { ProjectLoader } from 'app/libs/project-helpers/project-handlers/project-loader.class';\r\n\r\nexport const ProjectNotLoadedFooter = ({ project }: { project: ProjectSettings }) => (\r\n  <button onClick={() => new ProjectLoader(project.id).loadProject()} className=\"px-4 py-2 text-white ml-auto inline-flex items-center md:mb-2 lg:mb-0 rounded bg-green-500 hover:bg-green-600 text-sm\">\r\n    Load project\r\n  </button>\r\n)\r\n","import { dbInstances } from 'app/data/local-dbs/db-instances.const';\r\nimport { ProjectSettings, RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-loaded-footer.component';\r\nimport { ProjectNotLoadedFooter } from 'app/ui-react-components/projects/project-card-components/project-not-loaded-footer.component';\r\nimport { DeleteProjectButton } from 'app/ui-react-components/shared-components/buttons/delete-project.component';\r\nimport { CardFooterItemsEnd } from 'app/ui-react-components/shared-components/common-ui-eles/card-footer-items-end.component';\r\nimport * as dateFormat from 'date-format';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const ProjectCard = ({ project }: { project: ProjectSettings }) => {\r\n\r\n  const projectState = useSelector((state: AnitaStore) => state.project);\r\n\r\n  return (\r\n    <div className=\" mt-4 h-full border-2 border-gray-200 border-opacity-60 rounded-lg bg-white\">\r\n      <div className=\"p-6\">\r\n        <h1 className=\"title-font text-lg font-medium text-gray-900 mb-3\">{project.title}</h1>\r\n        <p className=\"text-lg mb-3\">{project.description}</p>\r\n\r\n        <p className=\"text-gray-600 text-xs\">Created on:</p>\r\n        <p className=\"text-md\">{dateFormat('yyyy/MM/dd, at hh:mm', new Date(project.createdAt))}</p>\r\n\r\n        <CardFooterItemsEnd>\r\n          <DeleteProjectButton project={project} />\r\n          {(\r\n            projectState === null ||\r\n            projectState[RESERVED_AUDS_KEYS._settings][0].id !== project.id ||\r\n            dbInstances[project.id] === undefined\r\n          ) ? <ProjectNotLoadedFooter project={project} /> : <ProjectLoadedFooter project={project} />}\r\n        </CardFooterItemsEnd>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { ProjectsListLoader } from 'app/libs/projects-helpers/projects-handlers/projects-list-loader.class';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectCard } from 'app/ui-react-components/projects/project-card.component';\r\nimport { ImportProjectButton } from 'app/ui-react-components/projects/project-importer-components/import-project-button.component';\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const ProjectsList = () => {\r\n\r\n  const [hasLoaded, setHasLoaded] = useState(false);\r\n  const projects = useSelector((state: AnitaStore) => state.projects);\r\n  const projectsLenght = projects?.length || 0;\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const loadProjectsList = async () => {\r\n      await new ProjectsListLoader().load();\r\n      setHasLoaded(true);\r\n    }\r\n    if (isMounted)\r\n      loadProjectsList();\r\n\r\n    return () => { isMounted = false; }\r\n\r\n  }, [projectsLenght]);\r\n\r\n  if (Array.isArray(projects) && projects.length === 0)\r\n    return <Navigate to={ANITA_URLS.projectsNone} />\r\n\r\n\r\n  if (!hasLoaded)\r\n    return <span></span>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"md:w-full bg-white border-b-2 rounded border-white\">\r\n        <div className=\"flex h-full border-t-2 border-prussian-blue-400 border-opacity-60 rounded justify-between\">\r\n          <div className=\"px-6 py-3\">\r\n            <h1 className=\"title-font text-md font-medium text-gray-900\">Projects on this device</h1>\r\n          </div>\r\n          <div className=\"my-2\">\r\n            <ImportProjectButton />\r\n            <Link data-tip data-for='createProject'\r\n              to={ANITA_URLS.projectAdd}\r\n              className=\"mx-2 my-2 text-white bg-prussian-blue-400 border-0 py-1 px-6 focus:outline-none hover:bg-gray-400 rounded font-bold text-sm\"\r\n            ><i className=\"bi bi-plus\"></i>\r\n            </Link>\r\n            <ReactTooltip id=\"createProject\" effect=\"solid\">\r\n              <span>Create a new project</span>\r\n            </ReactTooltip>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"p-1 md:w-full\">\r\n        {projects.map((project, index) => (<ProjectCard key={project.id} project={project} />))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n","import { ANITA_URLS } from 'app/anita-routes/anita-routes.constant';\r\nimport { AddEditSectionElement } from 'app/ui-react-components/project/add-edit-section-element.component';\r\nimport { ProjectDetails } from 'app/ui-react-components/project/project-details.component';\r\nimport { SectionElementDetails } from 'app/ui-react-components/project/section-element-details.component';\r\nimport { SectionElementsList } from 'app/ui-react-components/project/section-elements-list.component';\r\nimport { AddEditProject } from 'app/ui-react-components/projects/add-edit-project.component';\r\nimport { ProjectsNone } from 'app/ui-react-components/projects/no-projects.component';\r\nimport { ProjectsList } from 'app/ui-react-components/projects/projects-list.component';\r\nimport { Navigate, Route, Routes } from 'react-router-dom';\r\n\r\nexport const AnitaRoutes = () => (\r\n  <Routes>\r\n    <Route path={ANITA_URLS.projectsList} element={<ProjectsList />} />\r\n    <Route path={ANITA_URLS.projectAdd} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectEdit} element={<AddEditProject />} />\r\n    <Route path={ANITA_URLS.projectsNone} element={<ProjectsNone />} />\r\n    <Route path={ANITA_URLS.projectDetails} element={<ProjectDetails />} />\r\n\r\n    <Route path={ANITA_URLS.projectSectionElesList} element={<SectionElementsList />} />\r\n    <Route path={ANITA_URLS.projectSectionEleDetails} element={<SectionElementDetails />} />\r\n    <Route path={ANITA_URLS.projectSectionAddEle} element={<AddEditSectionElement />} />\r\n    <Route path={ANITA_URLS.projectSectionEditEle} element={<AddEditSectionElement />} />\r\n    <Route path=\"*\" element={<Navigate to={ANITA_URLS.projectsList} />}\r\n    />\r\n  </Routes>\r\n)","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant'\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function'\r\nimport { RESERVED_AUDS_KEYS, SystemData } from 'app/data/project-structure/project-info'\r\nimport { ProjectLoader } from 'app/libs/project-helpers/project-handlers/project-loader.class'\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const'\r\nimport { useClickOutside } from 'app/ui-react-components/hooks/click-outside.hook'\r\nimport React, { useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nexport const ProjectPicker = ({ project }: { project: SystemData }) => {\r\n\r\n  const projects = useSelector((store: AnitaStore) => store.projects);\r\n  const navigate = useNavigate();\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const dropDownRef = useRef<HTMLDivElement>(null);\r\n\r\n  useClickOutside(dropDownRef, () => setDropdownOpen(false));\r\n\r\n  const handleClick = (fn) => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  }\r\n\r\n  const loadProject = async (projectId: string) => {\r\n    await new ProjectLoader(projectId).loadProject()\r\n    goToDetails(projectId);\r\n  }\r\n\r\n  const goToDetails = (projectId: string) => {\r\n    navigate(urlParamFiller(ANITA_URLS.projectDetails, [{ name: URL_PARAMS.projectId, value: projectId }]));\r\n  }\r\n\r\n  return (\r\n    <div ref={dropDownRef}>\r\n      <p className=\"text-xs text-gray-600 pl-2\">Current project:</p>\r\n\r\n      <div x-data=\"{ dropdownOpen: true }\" className=\"relative\">\r\n        <button onClick={() => setDropdownOpen(!dropdownOpen)} className=\"relative w-full flex justify-between text-left z-10 rounded py-2 px-3 bg-gray-100 hover:bg-gray-200 focus:outline-none focus:bg-gray-300\">\r\n          <span>{project?.[RESERVED_AUDS_KEYS._settings][0]?.title}</span>\r\n          <i className=\"bi-chevron-expand my-auto\"></i>\r\n        </button>\r\n\r\n\r\n        {dropdownOpen && (\r\n          <div className=\"absolute left-0 mt-2 w-64 bg-white rounded-md overflow-hidden shadow-xl z-20 border border-bg-500\">\r\n            {projects?.length > 1 && (<div className=\"block py-2.5 px-4 text-sm bg-gray-100 text-gray-600\">Projects on this device</div>)}\r\n            {projects?.map(projectFromList => {\r\n              if (project[RESERVED_AUDS_KEYS._settings][0].id === projectFromList.id) return null;\r\n              return (\r\n                <button key={projectFromList.id} className=\"w-full block text-left px-4 py-2 text-sm text-gray-800 border-b hover:bg-gray-200\" onClick={() => handleClick(loadProject(projectFromList.id))}>{projectFromList.title}</button>)\r\n            })}\r\n            <div className=\"block py-2.5 px-4 text-sm bg-gray-100 text-gray-600\">Actions</div>\r\n            <button className=\"w-full block text-left px-4 py-2 text-sm text-gray-800 border-b hover:bg-gray-200\" onClick={() => handleClick(goToDetails(project[RESERVED_AUDS_KEYS._settings][0].id))}>\r\n              <i className=\"bi-info-circle mr-2\"></i>\r\n              Go to the details of the project\r\n            </button>\r\n            <button className=\"w-full block text-left px-4 py-2 text-sm text-gray-800 border-b hover:bg-gray-200\" onClick={() => handleClick(navigate(ANITA_URLS.projectsList))}>\r\n              <i className=\"bi-files mr-2\"></i>\r\n              Go to the projects list\r\n            </button>\r\n            <button className=\"w-full block text-left px-4 py-2 text-sm text-gray-800 border-b hover:bg-gray-200\" onClick={() => handleClick(navigate(ANITA_URLS.projectAdd))}>\r\n              <i className=\"bi-plus mr-2\"></i>\r\n              Create a new project\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div >\r\n    </div >\r\n  );\r\n\r\n}\r\n","import { useEffect } from 'react'\r\n\r\nexport const useClickOutside = (parentElement: React.RefObject<HTMLElement>, callback: () => void) => {\r\n  useEffect(() => {\r\n    // check if the click is inside a div with classs dueDateFieldDropup\r\n    const onClickOutside = (e: MouseEvent) => {\r\n      if (parentElement?.current && !parentElement.current!.contains(e.target as Node)) {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', onClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', onClickOutside)\r\n    }\r\n  }, [parentElement, callback])\r\n}\r\n","import { ANITA_URLS, URL_PARAMS } from 'app/anita-routes/anita-routes.constant';\r\nimport { urlParamFiller } from 'app/anita-routes/url-param-fillers.function';\r\nimport { RESERVED_AUDS_KEYS } from 'app/data/project-structure/project-info';\r\nimport { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { ProjectPicker } from 'app/ui-react-components/admin-layout/components/project-picker.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst baseStyleOfSidebarLinks: string = \"block py-2.5 px-4 transition duration-200 border-l-2 hover:border-prussian-blue-700 hover:text-prussian-blue-500 text-sm font-semibold\";\r\n\r\nconst addActiveClassNameToBaseStyle = (currentPath: string, linkPath: string): string => {\r\n  if (currentPath === linkPath) {\r\n    return `${baseStyleOfSidebarLinks} border-prussian-blue-700`;\r\n  } else {\r\n    return `${baseStyleOfSidebarLinks} border-transparent`;\r\n  }\r\n}\r\n\r\nexport const nonProjectRoutes: Array<{ to: string; txt: string, icon: string }> = [\r\n  { to: ANITA_URLS.projectsList, txt: 'Projects', icon: 'bi-files' }\r\n];\r\n\r\nconst ProjectMenu = () => {\r\n\r\n  const project = useSelector((state: AnitaStore) => state.project);\r\n  const location = useLocation();\r\n\r\n\r\n  if (project === null)\r\n    return <span></span>\r\n\r\n  return (\r\n    <div className=\"mt-3\">\r\n\r\n      <div className=\"block py-2.5 px-1\">\r\n        <ProjectPicker project={project} />\r\n      </div>\r\n      <div className=\"block py-2.5 px-4\">\r\n        <p className=\"text-xs text-gray-600\">Project sections:</p>\r\n      </div>\r\n      {project?.[RESERVED_AUDS_KEYS._sections]?.map(section => {\r\n        const linkPath = urlParamFiller(ANITA_URLS.projectSectionElesList, [{ name: URL_PARAMS.projectId, value: project[RESERVED_AUDS_KEYS._settings][0].id }, { name: URL_PARAMS.sectionId, value: section.id }]);\r\n        return (<Link\r\n          key={section.id}\r\n          to={linkPath}\r\n          className={addActiveClassNameToBaseStyle(location.pathname, linkPath)}\r\n        ><i className=\"bi-chevron-compact-right\"></i><span className=\"ml-2\">{section.title}</span>\r\n        </Link>)\r\n      }\r\n      )}\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport const SidebarMenu = () => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div>{\r\n      nonProjectRoutes.map(route => (<Link\r\n        key={route.to}\r\n        to={route.to}\r\n        className={addActiveClassNameToBaseStyle(location.pathname, route.to)}\r\n      ><i className={route.icon}></i><span className=\"ml-2\">{route.txt}</span>\r\n      </Link>)\r\n      )\r\n    }\r\n      < ProjectMenu />\r\n    </div>\r\n  );\r\n}","import { ReactNode } from 'react';\r\n\r\nexport const Content = (props: { children: ReactNode }) => (\r\n  <div className=\"flex-1 p-2 md:p-3 md:pt-5 lg:pt-5 lg:p-10 pt-5 overflow-auto\">\r\n    {props.children}\r\n  </div>\r\n);","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { REDUX_ACTIONS } from 'app/libs/redux/redux-actions.const';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const Header = () => {\r\n\r\n  const sidebarHideClass = useSelector((store: AnitaStore) => store.layout.sidebar)\r\n\r\n  const handleClickSidebar = () => {\r\n    store.dispatch({ type: REDUX_ACTIONS.toggleSidebar });\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white text-gray-700 flex h-14 shadow-md justify-between\">\r\n      <button className=\"mobile-menu-button p-4 focus:outline-none  md:hidden\" onClick={handleClickSidebar}>\r\n        <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div className=\"relative flex items-center lg:w-auto lg:static md:pl-5 -ml-7 md:ml-0\">\r\n        <Link to=\"/\" className=\"text-lg font-bold leading-relaxed inline-block mr-4 py-2 whitespace-no-wrap uppercase\">\r\n          <img src={`${process.env.PUBLIC_URL}/assets/logo/logo_square.svg`} style={{ height: '30px', width: 'auto' }} alt=\"Anita\" />\r\n        </Link>\r\n        <Link to=\"/\" className=\"hidden md:inline-block mr-4 py-2 whitespace-no-wrap text-prussian-blue-400\">\r\n          <span className=\"text-md font-bold leading-relaxed uppercase\">Anita</span><sup style={{ fontVariant: 'small-caps' }}>Beta</sup>\r\n        </Link>\r\n      </div>\r\n\r\n      <div className=\"visible md:hidden\">&#160;</div>\r\n\r\n      {sidebarHideClass === '' && (<div onClick={handleClickSidebar} className=\"absolute inset-0 h-full w-full z-10 md:hidden\"></div>)}\r\n\r\n    </div>\r\n  )\r\n}","import { AnitaStore } from 'app/libs/redux/reducers.const';\r\nimport { appVersion } from 'app/version';\r\nimport { ReactNode } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nexport const Sidebar = (props: { children: ReactNode }) => {\r\n\r\n  const toggledClass = useSelector((store: AnitaStore) => store.layout.sidebar)\r\n\r\n  return (\r\n    <div className=\"py-5 z-10\">\r\n      <div className={`${toggledClass} sidebar h-full bg-white shadow rounded-sm text-prussian-blue-500 w-64 space-y-6 py-7 px-2 absolute inset-y-0 left-0 transform md:relative md:translate-x-0 transition duration-200 ease-in-out`}>\r\n        <nav>\r\n          {props.children}\r\n        </nav>\r\n        <div className=\"absolute bottom-1 text-xs text-gray-400\">\r\n          <p className=\"inline-block mr-1\">v{appVersion}</p>|\r\n          <a className=\"ml-1\" href=\"https://github.com/anita-app/anita/issues\" target=\"_blank\" rel=\"noreferrer\">\r\n            <i className=\"bi-bug\" data-tip data-for=\"reportBug\"></i>\r\n            <ReactTooltip id=\"reportBug\" effect=\"solid\">\r\n              <span>Report a bug</span>\r\n            </ReactTooltip>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","/**\n * Auto generated file, do not edit.\n */\n\nexport const appVersion = '0.11.1';\n","import { AnitaRoutes } from 'app/anita-routes/anita-routes.component';\r\nimport { SidebarMenu } from 'app/ui-react-components/admin-layout/components/sidebar-menu.component';\r\nimport { Content } from 'app/ui-react-components/admin-layout/content.component';\r\nimport { Header } from 'app/ui-react-components/admin-layout/header.component';\r\nimport { Sidebar } from 'app/ui-react-components/admin-layout/sidebar.component';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nexport const AdminLayout = () => (\r\n  <Router>\r\n    <Header />\r\n    <div className=\"relative admin-container flex\">\r\n      <Sidebar>\r\n        <SidebarMenu />\r\n      </Sidebar>\r\n      <Content>\r\n        <AnitaRoutes />\r\n      </Content>\r\n    </div>\r\n  </Router>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'animate.css';\r\nimport { store } from 'app/libs/redux/state.store';\r\nimport { Startupper } from 'app/libs/startupper/startupper.class';\r\nimport { AdminLayout } from 'app/ui-react-components/admin-layout/admin-layout.component';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\n\r\nnew Startupper().init();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <AdminLayout />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}